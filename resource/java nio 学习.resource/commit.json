{"compress":true,"commitItems":[["5cca04b1-5fd9-4c3f-bbd0-5f1bcaa476e6",1586764829429,"## java nio\n### 什么是NIO\n  + 是为所有的原始类型（boolean类型除外）提供缓存支持的数据容器，使用它可以提供非阻塞式的高伸缩性网络。 \n### NIO于BIO的区别\n  + BIO是阻塞IO\n  + NIO是非阻塞IO\n  + 共同点：两者都是同步操作，必须先进行IO操作才能进行下一步操作\n  + 不同点：BIO多线程对某资源进行IO操作时会出现阻塞，即一个线程进行IO操作完才会通知另外的IO操作线程，必须等待。<br>\n    NIO多线程对某资源进行IO操作时会把资源先操作至内存缓冲区。然后询问是否IO操作就绪，是则进行IO操作，否则进行下一步操作，然后不断的轮询是否IO操作就绪，直到iIO操作就绪后进行相关操作。\n### NIO是怎么工作的\n + 调用Selector的静态工厂创建一个选择器，创建一个服务端的Channel，绑定到一个Socket对象，并把这个通信信道注册到选择器上，把这个通信信道设置为非阻塞模式。然后就可以调用Selector的selectedKeys方法来检查已经注册在这个选择器上的所有通信信道是否有需要的事件发生，如果有某个事件发生，将会返回所有的selectedKeys，通过这个对象的Channel方法就可以取得这个通信信道对象，从而读取通信的数据，而这里读取的数据是Buffer，这个Buffer是我们可以控制的缓冲器。\n",[[1586764816762,["Wahaha@DESKTOP-HTU2IVD",[[1,599," + \n"]],[598,598],[602,602]]],[1586764818036,["Wahaha@DESKTOP-HTU2IVD",[[-1,600,"+ "]],[602,602],[600,600]]],[1586764821481,["Wahaha@DESKTOP-HTU2IVD",[[1,600,"### "]],[600,600],[604,604]]],[1586764824466,["Wahaha@DESKTOP-HTU2IVD",[[-1,599," "]],[600,600],[599,599]]],[1586764828339,["Wahaha@DESKTOP-HTU2IVD",[[1,603,"NIO"]],[603,603],[606,606]]],[1586764816762,["Wahaha@DESKTOP-HTU2IVD",[[1,599," + \n"]],[598,598],[602,602]]],[1586764818036,["Wahaha@DESKTOP-HTU2IVD",[[-1,600,"+ "]],[602,602],[600,600]]],[1586764821481,["Wahaha@DESKTOP-HTU2IVD",[[1,600,"### "]],[600,600],[604,604]]],[1586764824466,["Wahaha@DESKTOP-HTU2IVD",[[-1,599," "]],[600,600],[599,599]]],[1586764830352,["Wahaha@DESKTOP-HTU2IVD",[[1,603,"NIO核心"]],[603,603],[608,608]]],[1586764830859,["Wahaha@DESKTOP-HTU2IVD",[[-1,606,"核心"]],[608,608],[606,606]]],[1586764832076,["Wahaha@DESKTOP-HTU2IVD",[[1,606,"组成"]],[606,606],[608,608]]],[1586764832670,["Wahaha@DESKTOP-HTU2IVD",[[1,609,"\n"]],[608,608],[609,609]]],[1586764836138,["Wahaha@DESKTOP-HTU2IVD",[[-1,609,"\n"],[1,610,"+"]],[609,609],[610,610]]],[1586764836353,["Wahaha@DESKTOP-HTU2IVD",[[1,610," "]],[610,610],[611,611]]],[1586764837061,["Wahaha@DESKTOP-HTU2IVD",[[-1,610," "]],[611,611],[610,610]]],[1586764837281,["Wahaha@DESKTOP-HTU2IVD",[[-1,609,"+"],[1,610,"\n"]],[610,610],[609,609]]],[1586764838721,["Wahaha@DESKTOP-HTU2IVD",[[-1,609,"\n"],[1,610," "]],[609,609],[610,610]]],[1586764857596,["Wahaha@DESKTOP-HTU2IVD",[[1,610,"+ channle\n + buffer\n + selee"]],[610,610],[638,638]]],[1586764858131,["Wahaha@DESKTOP-HTU2IVD",[[-1,637,"e"]],[638,638],[637,637]]],[1586764859132,["Wahaha@DESKTOP-HTU2IVD",[[1,637,"ctor"]],[637,637],[641,641]]],[1586764950085,[null,[[-1,641,"### NIO\n"]],[641,641],[641,641]]],[1586764950086,[null,[[1,641,"### NIO\n"]],[641,641],[641,641]]],[1586764816762,["Wahaha@DESKTOP-HTU2IVD",[[1,599," + \n"]],[598,598],[602,602]]],[1586764818036,["Wahaha@DESKTOP-HTU2IVD",[[-1,600,"+ "]],[602,602],[600,600]]],[1586764821481,["Wahaha@DESKTOP-HTU2IVD",[[1,600,"### "]],[600,600],[604,604]]],[1586764824466,["Wahaha@DESKTOP-HTU2IVD",[[-1,599," "]],[600,600],[599,599]]],[1586764830352,["Wahaha@DESKTOP-HTU2IVD",[[1,603,"NIO核心"]],[603,603],[608,608]]],[1586764830859,["Wahaha@DESKTOP-HTU2IVD",[[-1,606,"核心"]],[608,608],[606,606]]],[1586764832076,["Wahaha@DESKTOP-HTU2IVD",[[1,606,"组成"]],[606,606],[608,608]]],[1586764832670,["Wahaha@DESKTOP-HTU2IVD",[[1,609,"\n"]],[608,608],[609,609]]],[1586764836138,["Wahaha@DESKTOP-HTU2IVD",[[-1,609,"\n"],[1,610,"+"]],[609,609],[610,610]]],[1586764836353,["Wahaha@DESKTOP-HTU2IVD",[[1,610," "]],[610,610],[611,611]]],[1586764837061,["Wahaha@DESKTOP-HTU2IVD",[[-1,610," "]],[611,611],[610,610]]],[1586764837281,["Wahaha@DESKTOP-HTU2IVD",[[-1,609,"+"],[1,610,"\n"]],[610,610],[609,609]]],[1586764838721,["Wahaha@DESKTOP-HTU2IVD",[[-1,609,"\n"],[1,610," "]],[609,609],[610,610]]],[1586764857596,["Wahaha@DESKTOP-HTU2IVD",[[1,610,"+ channle\n + buffer\n + selee"]],[610,610],[638,638]]],[1586764858131,["Wahaha@DESKTOP-HTU2IVD",[[-1,637,"e"]],[638,638],[637,637]]],[1586764859132,["Wahaha@DESKTOP-HTU2IVD",[[1,637,"ctor"]],[637,637],[641,641]]]],null,"Wahaha@DESKTOP-HTU2IVD"]]}