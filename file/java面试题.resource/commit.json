{"compress":true,"commitItems":[["f4ec75f1-0d5d-42e5-a626-d5d057f8f510",1588842183605,"",[[1588842130460,["Wahaha@DESKTOP-HTU2IVD",[[1,0,"# java面试题\n\n\n\n"]],[0,0],[12,12]]],[1588842132602,["Wahaha@DESKTOP-HTU2IVD",[[-1,12,"\n"]],[12,12],[11,11]]],[1588842133114,["Wahaha@DESKTOP-HTU2IVD",[[-1,11,"\n"]],[11,11],[10,10]]],[1588842133999,["Wahaha@DESKTOP-HTU2IVD",[[1,11,"\n"]],[10,10],[11,11]]],[1588842135121,["Wahaha@DESKTOP-HTU2IVD",[[-1,11,"\n"],[1,12,"#"]],[11,11],[12,12]]],[1588842137685,["Wahaha@DESKTOP-HTU2IVD",[[1,12,"## 线程"]],[12,12],[17,17]]],[1588842138576,["Wahaha@DESKTOP-HTU2IVD",[[1,17,"\n\n"]],[17,17],[18,18]]],[1588842169335,["Wahaha@DESKTOP-HTU2IVD",[[1,17,"相关"]],[17,17],[19,19]]],[1588842171670,["Wahaha@DESKTOP-HTU2IVD",[[-1,20,"\n"],[1,21,"1"]],[20,20],[21,21]]],[1588842180149,["Wahaha@DESKTOP-HTU2IVD",[[1,21,". 什么是进程\n2. "]],[21,21],[32,32]]],[1588842181618,["Wahaha@DESKTOP-HTU2IVD",[[-1,30,". "]],[32,32],[30,30]]],[1588842182028,["Wahaha@DESKTOP-HTU2IVD",[[-1,29,"2"],[1,30,"\n"]],[30,30],[29,29]]],[1588842197059,["Wahaha@DESKTOP-HTU2IVD",[[1,29,"进程是系统中正在运行的一个程序，程序一旦运行就是进程"]],[29,29],[55,55]]],[1588842200759,["Wahaha@DESKTOP-HTU2IVD",[[1,56,"\n"]],[55,55],[56,56]]],[1588842201712,["Wahaha@DESKTOP-HTU2IVD",[[-1,56,"\n"],[1,57,"2"]],[56,56],[57,57]]],[1588842219801,["Wahaha@DESKTOP-HTU2IVD",[[1,57,". 什么是线程\n3. "]],[57,57],[68,68]]],[1588842220699,["Wahaha@DESKTOP-HTU2IVD",[[-1,66,". "]],[68,68],[66,66]]],[1588842220987,["Wahaha@DESKTOP-HTU2IVD",[[-1,65,"3"],[1,66,"\n"]],[66,66],[65,65]]],[1588842234571,["Wahaha@DESKTOP-HTU2IVD",[[1,65,"是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务"]],[65,65],[154,154]]],[1588842239605,["Wahaha@DESKTOP-HTU2IVD",[[1,155,"\n"]],[154,154],[155,155]]],[1588842240844,["Wahaha@DESKTOP-HTU2IVD",[[-1,155,"\n"],[1,156,"3"]],[155,155],[156,156]]],[1588842241326,["Wahaha@DESKTOP-HTU2IVD",[[1,156,". "]],[156,156],[158,158]]],[1588842265303,["Wahaha@DESKTOP-HTU2IVD",[[1,158,"线程实现的方式\n4. "]],[158,158],[169,169]]],[1588842265872,["Wahaha@DESKTOP-HTU2IVD",[[-1,167,". "]],[169,169],[167,167]]],[1588842266151,["Wahaha@DESKTOP-HTU2IVD",[[-1,166,"4"],[1,167,"\n"]],[167,167],[166,166]]],[1588842267475,["Wahaha@DESKTOP-HTU2IVD",[[-1,166,"\n"],[1,167," "]],[166,166],[167,167]]],[1588842272593,["Wahaha@DESKTOP-HTU2IVD",[[1,167,"- 集成"]],[167,167],[171,171]]],[1588842274321,["Wahaha@DESKTOP-HTU2IVD",[[-1,169,"集成"]],[171,171],[169,169]]],[1588842283002,["Wahaha@DESKTOP-HTU2IVD",[[1,169,"继承Thread的"]],[169,169],[178,178]]],[1588842284242,["Wahaha@DESKTOP-HTU2IVD",[[-1,177,"的"]],[178,178],[177,177]]],[1588842301725,["Wahaha@DESKTOP-HTU2IVD",[[1,177,"类\n - 实现runable"]],[177,177],[191,191]]],[1588842303133,["Wahaha@DESKTOP-HTU2IVD",[[1,191,"jiek"]],[191,191],[195,195]]],[1588842304088,["Wahaha@DESKTOP-HTU2IVD",[[-1,191,"jiek"]],[195,195],[191,191]]],[1588842317240,["Wahaha@DESKTOP-HTU2IVD",[[1,191,"接口\n - 实现callable j"]],[191,191],[209,209]]],[1588842317837,["Wahaha@DESKTOP-HTU2IVD",[[-1,207," j"]],[209,209],[207,207]]],[1588842319145,["Wahaha@DESKTOP-HTU2IVD",[[1,207,"接口"]],[207,207],[209,209]]],[1588842329992,["Wahaha@DESKTOP-HTU2IVD",[[1,167,"  "],[1,180,"  "],[1,194,"  "]],[166,209],[166,215]]],[1588842340159,["Wahaha@DESKTOP-HTU2IVD",[[-1,166,"   "]],[169,169],[166,166]]],[1588842342549,["Wahaha@DESKTOP-HTU2IVD",[[-1,165,"\n"]],[166,166],[165,165]]],[1588842344105,["Wahaha@DESKTOP-HTU2IVD",[[1,165,"\n"]],[165,165],[166,166]]],[1588842348721,["Wahaha@DESKTOP-HTU2IVD",[[1,166,"   "]],[166,166],[169,169]]],[1588842350774,["Wahaha@DESKTOP-HTU2IVD",[[-1,168," "]],[169,169],[168,168]]],[1588842359870,["Wahaha@DESKTOP-HTU2IVD",[[-1,182," "]],[183,183],[182,182]]],[1588842361740,["Wahaha@DESKTOP-HTU2IVD",[[-1,198," "]],[199,199],[198,198]]],[1588842364912,["Wahaha@DESKTOP-HTU2IVD",[[1,212,"\n  - "]],[212,212],[217,217]]],[1588842365916,["Wahaha@DESKTOP-HTU2IVD",[[-1,214," - "]],[217,217],[214,214]]],[1588842368071,["Wahaha@DESKTOP-HTU2IVD",[[1,214,"4. "]],[214,214],[217,217]]],[1588842373122,["Wahaha@DESKTOP-HTU2IVD",[[-1,213," "]],[214,214],[213,213]]],[1588842386717,["Wahaha@DESKTOP-HTU2IVD",[[1,216,"#### **Thread 类中的start() 和 run() 方法有什么区别**?"]],[216,216],[259,259]]],[1588842390179,["Wahaha@DESKTOP-HTU2IVD",[[-1,216,"#### "]],[216,221],[216,216]]],[1588842390774,["Wahaha@DESKTOP-HTU2IVD",[[-1,217,"*"]],[216,216],[216,216]]],[1588842390990,["Wahaha@DESKTOP-HTU2IVD",[[-1,216,"*"]],[216,216],[216,216]]],[1588842395618,["Wahaha@DESKTOP-HTU2IVD",[[-1,249,"**"]],[251,251],[249,249]]],[1588842398786,["Wahaha@DESKTOP-HTU2IVD",[[1,250,"\n5. "]],[250,250],[254,254]]],[1588842399664,["Wahaha@DESKTOP-HTU2IVD",[[-1,252,". "]],[254,254],[252,252]]],[1588842400530,["Wahaha@DESKTOP-HTU2IVD",[[-1,251,"5"],[1,252,"\n"]],[252,252],[251,251]]],[1588842401162,["Wahaha@DESKTOP-HTU2IVD",[[-1,251,"\n"],[1,252," "]],[251,251],[252,252]]],[1588842409518,["Wahaha@DESKTOP-HTU2IVD",[[1,252,"- start()"]],[252,252],[261,261]]],[1588842535622,["Wahaha@DESKTOP-HTU2IVD",[[1,261,": start方法来启动线程，真正实现了多线程运行，这时无需等待run方法体中的代码执行完毕而直接继续执行后续的代码。通过调用Thread类的 start()方法来启动一个线程，这时此线程处于就绪（可运行）状态，并没有运行，一旦得到cpu时间片，就开始执行run()方法，这里的run()方法 称为线程体，它包含了要执行的这个线程的内容，Run方法运行结束，此线程随即终止。\n - e"]],[261,261],[453,453]]],[1588842536148,["Wahaha@DESKTOP-HTU2IVD",[[-1,452,"e"]],[453,453],[452,452]]],[1588842539727,["Wahaha@DESKTOP-HTU2IVD",[[1,452,"run(): "]],[452,452],[459,459]]],[1588842570151,["Wahaha@DESKTOP-HTU2IVD",[[1,459,"run()方法只是类的一个普通方法而已，如果直接调用Run方法，程序中依然只有主线程这一个线程，其程序执行路径还是只有一条，还是要顺序执行，还是要等待run方法体执行完毕后才可继续执行下面的代码，这样就没有达到写线程的目的。\n - 调用start方法方可启动线程，而run方法只是thread类中的一个普通方法调用，还是在主线程里执行。\n - "]],[459,459],[631,631]]],[1588842570842,["Wahaha@DESKTOP-HTU2IVD",[[-1,629,"- "]],[631,631],[629,629]]],[1588842572060,["Wahaha@DESKTOP-HTU2IVD",[[-1,628," "],[1,629,"\n"]],[629,629],[628,628]]],[1588842573334,["Wahaha@DESKTOP-HTU2IVD",[[-1,628,"\n"],[1,629,"5"]],[628,628],[629,629]]],[1588842573939,["Wahaha@DESKTOP-HTU2IVD",[[1,629,". "]],[629,629],[631,631]]],[1588842869659,["Wahaha@DESKTOP-HTU2IVD",[[1,631,"xian"]],[631,631],[635,635]]],[1588842870760,["Wahaha@DESKTOP-HTU2IVD",[[-1,631,"xian"]],[635,635],[631,631]]],[1588842874776,["Wahaha@DESKTOP-HTU2IVD",[[1,631,"线程的5中"]],[631,631],[636,636]]],[1588842877442,["Wahaha@DESKTOP-HTU2IVD",[[-1,634,"5中"]],[636,636],[634,634]]],[1588842883942,["Wahaha@DESKTOP-HTU2IVD",[[1,634,"五种转台"]],[634,634],[638,638]]],[1588842884730,["Wahaha@DESKTOP-HTU2IVD",[[-1,636,"转台"]],[638,638],[636,636]]],[1588842886773,["Wahaha@DESKTOP-HTU2IVD",[[1,636,"状态"]],[636,636],[638,638]]],[1588842927758,["Wahaha@DESKTOP-HTU2IVD",[[1,638,"\n6. "]],[638,638],[642,642]]],[1588842929068,["Wahaha@DESKTOP-HTU2IVD",[[-1,640,". "]],[642,642],[640,640]]],[1588842929363,["Wahaha@DESKTOP-HTU2IVD",[[-1,639,"6"],[1,640,"\n"]],[640,640],[639,639]]],[1588842929763,["Wahaha@DESKTOP-HTU2IVD",[[-1,639,"\n"],[1,640," "]],[639,639],[640,640]]],[1588842936649,["Wahaha@DESKTOP-HTU2IVD",[[1,640,"- 新建转台"]],[640,640],[646,646]]],[1588842937265,["Wahaha@DESKTOP-HTU2IVD",[[-1,644,"转台"]],[646,646],[644,644]]],[1588842946254,["Wahaha@DESKTOP-HTU2IVD",[[1,644,"状态（）"]],[644,644],[648,648]]],[1588842948395,["Wahaha@DESKTOP-HTU2IVD",[[1,647,"NEW"]],[647,647],[650,650]]],[1588842951076,["Wahaha@DESKTOP-HTU2IVD",[[1,651,"仙剑"]],[651,651],[653,653]]],[1588842951903,["Wahaha@DESKTOP-HTU2IVD",[[-1,651,"仙剑"]],[653,653],[651,651]]],[1588842959025,["Wahaha@DESKTOP-HTU2IVD",[[1,651,"新建一个了线程\n - "]],[651,651],[662,662]]],[1588842979555,["Wahaha@DESKTOP-HTU2IVD",[[1,662,"可运行状态（）"]],[662,662],[669,669]]],[1588842981461,["Wahaha@DESKTOP-HTU2IVD",[[-1,667,"（）"]],[669,669],[667,667]]],[1588842986467,["Wahaha@DESKTOP-HTU2IVD",[[-1,646,"（NEW）"]],[647,651],[646,646]]],[1588842988199,["Wahaha@DESKTOP-HTU2IVD",[[1,646,"()"]],[646,646],[648,648]]],[1588842990026,["Wahaha@DESKTOP-HTU2IVD",[[1,647,"NEW "]],[647,647],[651,651]]],[1588842990765,["Wahaha@DESKTOP-HTU2IVD",[[-1,650," "]],[651,651],[650,650]]],[1588842991748,["Wahaha@DESKTOP-HTU2IVD",[[1,651," "]],[651,651],[652,652]]],[1588842993734,["Wahaha@DESKTOP-HTU2IVD",[[1,668,"()"]],[668,668],[670,670]]],[1588842997659,["Wahaha@DESKTOP-HTU2IVD",[[1,669,"RUNABLE"]],[669,669],[676,676]]],[1588843007517,["Wahaha@DESKTOP-HTU2IVD",[[1,672,"N"]],[672,672],[673,673]]],[1588843014275,["Wahaha@DESKTOP-HTU2IVD",[[1,678," xian"]],[678,678],[683,683]]],[1588843015355,["Wahaha@DESKTOP-HTU2IVD",[[-1,679,"xian"]],[683,683],[679,679]]],[1588843021904,["Wahaha@DESKTOP-HTU2IVD",[[1,679,"线程对象创建后，"]],[679,679],[687,687]]],[1588843032915,["Wahaha@DESKTOP-HTU2IVD",[[1,687,"其他线程调用次线程"]],[687,687],[696,696]]],[1588843035369,["Wahaha@DESKTOP-HTU2IVD",[[-1,693,"次"]],[694,694],[693,693]]],[1588843038225,["Wahaha@DESKTOP-HTU2IVD",[[1,693,"此"]],[693,693],[694,694]]],[1588843044150,["Wahaha@DESKTOP-HTU2IVD",[[1,696,"的start()方法"]],[696,696],[706,706]]],[1588843054826,["Wahaha@DESKTOP-HTU2IVD",[[-1,694,"线程"]],[696,696],[694,694]]],[1588843056284,["Wahaha@DESKTOP-HTU2IVD",[[1,694,"对象"]],[694,694],[696,696]]],[1588843070137,["Wahaha@DESKTOP-HTU2IVD",[[1,706,"，该状态的线程位于可运行线程池中，等待被线程调度选中，获取cpu 的使用权 。"]],[706,706],[745,745]]],[1588843072210,["Wahaha@DESKTOP-HTU2IVD",[[-1,744,"。"]],[745,745],[744,744]]],[1588843082510,["Wahaha@DESKTOP-HTU2IVD",[[1,744,"。\n - **运行(RUNNING)**：可运行状态(runnable)的线程获得了cpu 时间片（timeslice） ，执行程序代码"]],[744,744],[812,812]]],[1588843086227,["Wahaha@DESKTOP-HTU2IVD",[[-1,749,"**"]],[751,751],[749,749]]],[1588843089533,["Wahaha@DESKTOP-HTU2IVD",[[-1,760,"**"]],[761,762],[760,760]]],[1588843097862,["Wahaha@DESKTOP-HTU2IVD",[[-1,799,"） ，"]],[801,801],[799,799]]],[1588843099731,["Wahaha@DESKTOP-HTU2IVD",[[1,799,"）"]],[799,799],[800,800]]],[1588843104562,["Wahaha@DESKTOP-HTU2IVD",[[-1,789,"（"]],[790,790],[789,789]]],[1588843108497,["Wahaha@DESKTOP-HTU2IVD",[[1,789,"（"]],[789,789],[790,790]]],[1588843124526,["Wahaha@DESKTOP-HTU2IVD",[[1,806,"\n - **阻塞(BLOCKED)**：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种："]],[806,806],[946,946]]],[1588843128577,["Wahaha@DESKTOP-HTU2IVD",[[-1,810,"**"]],[812,812],[810,810]]],[1588843132619,["Wahaha@DESKTOP-HTU2IVD",[[-1,821,"**"]],[823,823],[821,821]]],[1588843136919,["Wahaha@DESKTOP-HTU2IVD",[[1,942,"\n - - "]],[942,942],[948,948]]],[1588843139978,["Wahaha@DESKTOP-HTU2IVD",[[-1,946,"- "]],[943,945],[943,943]]],[1588843143789,["Wahaha@DESKTOP-HTU2IVD",[[-1,944,"- "]],[946,946],[944,944]]],[1588843185765,["Wahaha@DESKTOP-HTU2IVD",[[1,944,"  + 等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。\n   + 同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。\n   + 其他阻塞：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。\n   + "]],[944,944],[1243,1243]]],[1588843187590,["Wahaha@DESKTOP-HTU2IVD",[[-1,1239,"  + "]],[1243,1243],[1239,1239]]],[1588843190780,["Wahaha@DESKTOP-HTU2IVD",[[1,1239," -"]],[1239,1239],[1241,1241]]],[1588843192162,["Wahaha@DESKTOP-HTU2IVD",[[-1,1240,"-"]],[1241,1241],[1240,1240]]],[1588843213702,["Wahaha@DESKTOP-HTU2IVD",[[1,1240,"- **死亡(DEAD)**：线程run()、main() 方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生"]],[1240,1240],[1315,1315]]],[1588843216752,["Wahaha@DESKTOP-HTU2IVD",[[-1,1242,"**"]],[1244,1244],[1242,1242]]],[1588843219523,["Wahaha@DESKTOP-HTU2IVD",[[-1,1250,"**"]],[1252,1252],[1250,1250]]],[1588843258808,["Wahaha@DESKTOP-HTU2IVD",[[1,1311,"\n  - "]],[1311,1311],[1316,1316]]],[1588843260064,["Wahaha@DESKTOP-HTU2IVD",[[-1,1313," - "]],[1316,1316],[1313,1313]]],[1588843260519,["Wahaha@DESKTOP-HTU2IVD",[[-1,1312," "],[1,1313,"\n"]],[1313,1313],[1312,1312]]],[1588843262325,["Wahaha@DESKTOP-HTU2IVD",[[-1,1312,"\n"],[1,1313,"6"]],[1312,1312],[1313,1313]]],[1588843263495,["Wahaha@DESKTOP-HTU2IVD",[[1,1313," 。 "]],[1313,1313],[1316,1316]]],[1588843266215,["Wahaha@DESKTOP-HTU2IVD",[[-1,1313," 。 "]],[1316,1316],[1313,1313]]],[1588843294287,["Wahaha@DESKTOP-HTU2IVD",[[1,1313,". #### 如何知道代码段被哪个线程调用？"]],[1313,1313],[1335,1335]]],[1588843298224,["Wahaha@DESKTOP-HTU2IVD",[[-1,1315,"####"]],[1315,1319],[1315,1315]]],[1588843312401,["Wahaha@DESKTOP-HTU2IVD",[[-1,20,"1."],[1,22,"###"]],[20,22],[23,23]]],[1588843315528,["Wahaha@DESKTOP-HTU2IVD",[[1,23,"#"]],[23,23],[24,24]]],[1588843322648,["Wahaha@DESKTOP-HTU2IVD",[[-1,58,"2."],[1,60,"####"]],[58,60],[62,62]]],[1588843326173,["Wahaha@DESKTOP-HTU2IVD",[[-1,159,"3."],[1,161,"####"]],[159,161],[163,163]]],[1588843330093,["Wahaha@DESKTOP-HTU2IVD",[[-1,219,"4."],[1,221,"####"]],[219,221],[223,223]]],[1588843342388,["Wahaha@DESKTOP-HTU2IVD",[[-1,636,"5."],[1,638,"####"]],[636,638],[640,640]]],[1588843356761,["Wahaha@DESKTOP-HTU2IVD",[[-1,1322,"6."],[1,1324,"####"]],[1322,1324],[1326,1326]]],[1588843358771,["Wahaha@DESKTOP-HTU2IVD",[[-1,1342,"？"]],[1343,1343],[1342,1342]]],[1588843359359,["Wahaha@DESKTOP-HTU2IVD",[[1,1342,"\n\n"]],[1342,1342],[1343,1343]]],[1588843364337,["Wahaha@DESKTOP-HTU2IVD",[[-1,1343,"\n"],[1,1344,"·"]],[1343,1343],[1344,1344]]],[1588843364981,["Wahaha@DESKTOP-HTU2IVD",[[1,1344,"··"]],[1344,1344],[1346,1346]]],[1588843365871,["Wahaha@DESKTOP-HTU2IVD",[[-1,1344,"··"]],[1346,1346],[1344,1344]]],[1588843366349,["Wahaha@DESKTOP-HTU2IVD",[[-1,1343,"·"],[1,1344,"\n"]],[1344,1344],[1343,1343]]],[1588843367434,["Wahaha@DESKTOP-HTU2IVD",[[-1,1343,"\n"],[1,1344,"1"]],[1343,1343],[1344,1344]]],[1588843367693,["Wahaha@DESKTOP-HTU2IVD",[[1,1344,"1"]],[1344,1344],[1345,1345]]],[1588843368168,["Wahaha@DESKTOP-HTU2IVD",[[-1,1344,"1"]],[1345,1345],[1344,1344]]],[1588843368429,["Wahaha@DESKTOP-HTU2IVD",[[-1,1343,"1"],[1,1344,"\n"]],[1344,1344],[1343,1343]]],[1588843368971,["Wahaha@DESKTOP-HTU2IVD",[[-1,1343,"\n"],[1,1344,"`"]],[1343,1343],[1344,1344]]],[1588843369632,["Wahaha@DESKTOP-HTU2IVD",[[1,1344,"``"]],[1344,1344],[1346,1346]]],[1588843369658,["Wahaha@DESKTOP-HTU2IVD",[[1,1346,"language\n```\n"]],[1346,1346],[1346,1354]]],[1588843371699,["Wahaha@DESKTOP-HTU2IVD",[[-1,1346,"language"],[1,1354,"\n"]],[1346,1354],[1347,1347]]],[1588843375399,["Wahaha@DESKTOP-HTU2IVD",[[1,1347,"sou"]],[1347,1347],[1350,1350]]],[1588843376592,["Wahaha@DESKTOP-HTU2IVD",[[-1,1347,"sou"]],[1350,1350],[1347,1347]]],[1588843377701,["Wahaha@DESKTOP-HTU2IVD",[[1,1347,"sou"]],[1347,1347],[1350,1350]]],[1588843378616,["Wahaha@DESKTOP-HTU2IVD",[[-1,1347,"sou"]],[1350,1350],[1347,1347]]],[1588843379604,["Wahaha@DESKTOP-HTU2IVD",[[1,1347,"sys"]],[1347,1347],[1350,1350]]],[1588843383245,["Wahaha@DESKTOP-HTU2IVD",[[-1,1347,"sys"]],[1350,1350],[1347,1347]]],[1588843384731,["Wahaha@DESKTOP-HTU2IVD",[[1,1347,"Syr"]],[1347,1347],[1350,1350]]],[1588843385270,["Wahaha@DESKTOP-HTU2IVD",[[-1,1349,"r"]],[1350,1350],[1349,1349]]],[1588843386044,["Wahaha@DESKTOP-HTU2IVD",[[1,1349,"sten"]],[1349,1349],[1353,1353]]],[1588843386719,["Wahaha@DESKTOP-HTU2IVD",[[-1,1352,"n"]],[1353,1353],[1352,1352]]],[1588843392441,["Wahaha@DESKTOP-HTU2IVD",[[1,1352,"m.out.prinlt"]],[1352,1352],[1364,1364]]],[1588843397442,["Wahaha@DESKTOP-HTU2IVD",[[-1,1362,"lt"]],[1364,1364],[1362,1362]]],[1588843403249,["Wahaha@DESKTOP-HTU2IVD",[[1,1362,"tln()"]],[1362,1362],[1367,1367]]],[1588843406797,["Wahaha@DESKTOP-HTU2IVD",[[1,1366,"Thra=e"]],[1366,1366],[1372,1372]]],[1588843407413,["Wahaha@DESKTOP-HTU2IVD",[[-1,1369,"a=e"]],[1372,1372],[1369,1369]]],[1588843420340,["Wahaha@DESKTOP-HTU2IVD",[[1,1369,"ead.currentThread("]],[1369,1369],[1387,1387]]],[1588843420557,["Wahaha@DESKTOP-HTU2IVD",[[1,1388,")"]],[1387,1387],[1388,1388]]],[1588843426252,["Wahaha@DESKTOP-HTU2IVD",[[1,1388,".getName("]],[1388,1388],[1397,1397]]],[1588843431175,["Wahaha@DESKTOP-HTU2IVD",[[1,1398,");"]],[1397,1397],[1400,1400]]],[1588843435039,["Wahaha@DESKTOP-HTU2IVD",[[1,1401,"\n"]],[1401,1401],[1402,1402]]],[1588843436006,["Wahaha@DESKTOP-HTU2IVD",[[-1,1401,"\n"]],[1402,1402],[1401,1401]]],[1588843458208,["Wahaha@DESKTOP-HTU2IVD",[[1,1405,"\n"]],[1404,1404],[1405,1405]]],[1588843516148,["Wahaha@DESKTOP-HTU2IVD",[[1,15,"1. "]],[15,15],[18,18]]],[1588843519262,["Wahaha@DESKTOP-HTU2IVD",[[-1,16,". "]],[18,18],[16,16]]],[1588843520142,["Wahaha@DESKTOP-HTU2IVD",[[1,16,"="]],[16,16],[17,17]]],[1588843520789,["Wahaha@DESKTOP-HTU2IVD",[[-1,15,"1="]],[17,17],[15,15]]],[1588843523428,["Wahaha@DESKTOP-HTU2IVD",[[1,25,"1."]],[25,25],[27,27]]],[1588843526948,["Wahaha@DESKTOP-HTU2IVD",[[1,65,"2."]],[65,65],[67,67]]],[1588843539373,["Wahaha@DESKTOP-HTU2IVD",[[1,228,"3. "]],[228,228],[231,231]]],[1588843544210,["Wahaha@DESKTOP-HTU2IVD",[[1,67," "]],[67,67],[68,68]]],[1588843545487,["Wahaha@DESKTOP-HTU2IVD",[[1,27," "]],[27,27],[28,28]]],[1588843554524,["Wahaha@DESKTOP-HTU2IVD",[[1,170,"3. "]],[170,170],[173,173]]],[1588843558847,["Wahaha@DESKTOP-HTU2IVD",[[-1,233,"3"],[1,234,"4"]],[233,234],[234,234]]],[1588843562171,["Wahaha@DESKTOP-HTU2IVD",[[1,653,"5. "]],[653,653],[656,656]]],[1588843567467,["Wahaha@DESKTOP-HTU2IVD",[[1,1343,"6. "]],[1343,1343],[1346,1346]]],[1588843574600,["Wahaha@DESKTOP-HTU2IVD",[[-1,1423,"\n"],[1,1424,"7"]],[1423,1423],[1424,1424]]],[1588843576023,["Wahaha@DESKTOP-HTU2IVD",[[-1,1423,"7"],[1,1424,"\n"]],[1424,1424],[1423,1423]]],[1588843577369,["Wahaha@DESKTOP-HTU2IVD",[[-1,1423,"\n"],[1,1424,"#"]],[1423,1423],[1424,1424]]],[1588843585448,["Wahaha@DESKTOP-HTU2IVD",[[1,1424,"### 7. sleep()fan"]],[1424,1424],[1441,1441]]],[1588843586560,["Wahaha@DESKTOP-HTU2IVD",[[-1,1438,"fan"]],[1441,1441],[1438,1438]]],[1588843589043,["Wahaha@DESKTOP-HTU2IVD",[[1,1438,"方法"]],[1438,1438],[1440,1440]]],[1588843589805,["Wahaha@DESKTOP-HTU2IVD",[[1,1440,"\n\n"]],[1440,1440],[1441,1441]]],[1588843594293,["Wahaha@DESKTOP-HTU2IVD",[[1,1441,"方法sleep()的作用是在指定的毫秒数内让当前的“正在执行的线程”休眠（暂停执行）。"]],[1441,1441],[1484,1484]]],[1588843597037,["Wahaha@DESKTOP-HTU2IVD",[[-1,1482,"）。"]],[1484,1484],[1482,1482]]],[1588843597745,["Wahaha@DESKTOP-HTU2IVD",[[1,1483,"\n"]],[1482,1482],[1483,1483]]],[1588843600120,["Wahaha@DESKTOP-HTU2IVD",[[-1,1483,"\n"],[1,1484,"#"]],[1483,1483],[1484,1484]]],[1588843601663,["Wahaha@DESKTOP-HTU2IVD",[[1,1484,"### "]],[1484,1484],[1488,1488]]],[1588843649952,["Wahaha@DESKTOP-HTU2IVD",[[1,1488,"8. 停止进程"]],[1488,1488],[1495,1495]]],[1588843650988,["Wahaha@DESKTOP-HTU2IVD",[[1,1495,"\n\n"]],[1495,1495],[1496,1496]]],[1588843656900,["Wahaha@DESKTOP-HTU2IVD",[[-1,1493,"进"],[1,1494,"线程"]],[1493,1493],[1495,1495]]],[1588843660458,["Wahaha@DESKTOP-HTU2IVD",[[-1,1495,"程"]],[1496,1496],[1495,1495]]],[1588843671042,["Wahaha@DESKTOP-HTU2IVD",[[-1,1496,"\n"],[1,1497,"1"]],[1496,1496],[1497,1497]]],[1588843672371,["Wahaha@DESKTOP-HTU2IVD",[[1,1497,". run方法执行完成，自然终止。\n\nstop()方法，suspend()以及resume()都是过期作废方法，使用它们结果不可预期。\n\n大多数停止一个线程的操作使用Thread.interrupt()等于说给线程打一个停止的标记, 此方法不回去终止一个正在运行的线程，需要加入一个判断才能可以完成线程的停止\n\n作者：java小咖秀\n链接：https://juejin.im/post/5eaecf326fb9a043856f33d5\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[1497,1497],[1755,1755]]],[1588843675731,["Wahaha@DESKTOP-HTU2IVD",[[1,1516,"2. "]],[1516,1516],[1519,1519]]],[1588843678827,["Wahaha@DESKTOP-HTU2IVD",[[-1,1656,"作者：java小咖秀"],[-1,1667,"链接：https://juejin.im/post/5eaecf326fb9a043856f33d5\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[1656,1758],[1656,1656]]],[1588843692530,["Wahaha@DESKTOP-HTU2IVD",[[-1,1515,"\n"]],[1515,1515],[1514,1514]]],[1588843695499,["Wahaha@DESKTOP-HTU2IVD",[[-1,1567,"\n"]],[1567,1567],[1566,1566]]],[1588843699696,["Wahaha@DESKTOP-HTU2IVD",[[1,1626,"\n"]],[1626,1626],[1627,1627]]],[1588843702373,["Wahaha@DESKTOP-HTU2IVD",[[1,1567,"3. \n"]],[1566,1566],[1570,1570]]],[1588843703640,["Wahaha@DESKTOP-HTU2IVD",[[-1,1567,"3. "]],[1570,1570],[1567,1567]]],[1588843723662,["Wahaha@DESKTOP-HTU2IVD",[[1,1655,"#### 8. 停止线程"]],[1655,1655],[1667,1667]]],[1588843725760,["Wahaha@DESKTOP-HTU2IVD",[[-1,1660,"8"],[1,1661,"9"]],[1660,1661],[1661,1661]]],[1588843734571,["Wahaha@DESKTOP-HTU2IVD",[[-1,1663,"停止线程"],[1,1667,"#### interrupted 和 isInterrupted"]],[1663,1667],[1695,1695]]],[1588843738950,["Wahaha@DESKTOP-HTU2IVD",[[-1,1663,"#### "]],[1663,1667],[1662,1662]]],[1588843745129,["Wahaha@DESKTOP-HTU2IVD",[[1,1692,"\n"]],[1690,1690],[1691,1691]]],[1588843745646,["Wahaha@DESKTOP-HTU2IVD",[[1,1691,"interrupted : 判断当前线程是否已经中断,会清除状态。\n\nisInterrupted ：判断线程是否已经中断，不会清除状态。"]],[1691,1691],[1759,1759]]],[1588843749318,["Wahaha@DESKTOP-HTU2IVD",[[1,1691,"\n"]],[1690,1690],[1691,1691]]],[1588843759513,["Wahaha@DESKTOP-HTU2IVD",[[1,1762,"\n"]],[1760,1760],[1761,1761]]],[1588843760078,["Wahaha@DESKTOP-HTU2IVD",[[1,1763,"\n"]],[1761,1761],[1762,1762]]],[1588843764705,["Wahaha@DESKTOP-HTU2IVD",[[1,1762,"#### 18.yield"]],[1762,1762],[1775,1775]]],[1588843766144,["Wahaha@DESKTOP-HTU2IVD",[[1,1777,"\n"]],[1775,1775],[1776,1776]]],[1588843771389,["Wahaha@DESKTOP-HTU2IVD",[[1,1776,"放弃当前cpu资源，将它让给其他的任务占用cpu执行时间。但放弃的时间不确定，有可能刚刚放弃，马上又获得cpu时间片"]],[1776,1776],[1834,1834]]],[1588843861042,["Wahaha@DESKTOP-HTU2IVD",[[1,1836,"\n"]],[1834,1834],[1835,1835]]],[1588843861631,["Wahaha@DESKTOP-HTU2IVD",[[1,1837,"\n"]],[1835,1835],[1836,1836]]],[1588843865628,["Wahaha@DESKTOP-HTU2IVD",[[1,1836,"#### 22.线程种类"]],[1836,1836],[1848,1848]]],[1588843871283,["Wahaha@DESKTOP-HTU2IVD",[[-1,1768,"8"],[1,1769,"0"]],[1768,1769],[1769,1769]]],[1588843874046,["Wahaha@DESKTOP-HTU2IVD",[[-1,1841,"2"],[1,1842,"1"]],[1841,1842],[1842,1842]]],[1588843878257,["Wahaha@DESKTOP-HTU2IVD",[[-1,1842,"2"],[1,1843,"1 "]],[1842,1843],[1845,1845]]],[1588843880317,["Wahaha@DESKTOP-HTU2IVD",[[1,1851,"\n"]],[1849,1849],[1850,1850]]],[1588843885652,["Wahaha@DESKTOP-HTU2IVD",[[1,1850,"Java线程有两种，一种是用户线程，一种是守护线程。"]],[1850,1850],[1876,1876]]],[1588843887084,["Wahaha@DESKTOP-HTU2IVD",[[1,1878,"\n"]],[1876,1876],[1877,1877]]],[1588843888173,["Wahaha@DESKTOP-HTU2IVD",[[1,1879,"\n"]],[1877,1877],[1878,1878]]],[1588843894487,["Wahaha@DESKTOP-HTU2IVD",[[1,1878,"#### 23.守护线程的特点"]],[1878,1878],[1893,1893]]],[1588843898752,["Wahaha@DESKTOP-HTU2IVD",[[-1,1883,"23"],[1,1885,"1"]],[1883,1885],[1884,1884]]],[1588843898980,["Wahaha@DESKTOP-HTU2IVD",[[1,1884,"2"]],[1884,1884],[1885,1885]]],[1588843906943,["Wahaha@DESKTOP-HTU2IVD",[[-1,1836,"#### 11. 线程种类\nJava线程有两种，一种是用户线程，一种是守护线程。\n\n#### 12.守护线程的特点\n"]],[1836,1894],[1836,1836]]],[1588843941840,["Wahaha@DESKTOP-HTU2IVD",[[1,1836,"#### 26.设置线程上下文类加载器"]],[1836,1836],[1855,1855]]],[1588843944179,["Wahaha@DESKTOP-HTU2IVD",[[-1,1841,"26"],[1,1843,"1"]],[1841,1843],[1842,1842]]],[1588843944381,["Wahaha@DESKTOP-HTU2IVD",[[1,1842,"1"]],[1842,1842],[1843,1843]]],[1588843946146,["Wahaha@DESKTOP-HTU2IVD",[[1,1856,"\n"]],[1855,1855],[1856,1856]]],[1588843953742,["Wahaha@DESKTOP-HTU2IVD",[[1,1856,"public ClassLoader getContextClassLoader() \n"]],[1856,1856],[1900,1900]]],[1588843960509,["Wahaha@DESKTOP-HTU2IVD",[[-1,1856,"public ClassLoader getContextClassLoader() "]],[1856,1899],[1856,1856]]],[1588843965185,["Wahaha@DESKTOP-HTU2IVD",[[1,1856," 获取线程上下文类加载器"]],[1856,1856],[1868,1868]]],[1588843967148,["Wahaha@DESKTOP-HTU2IVD",[[1,1869," \n"]],[1868,1868],[1870,1870]]],[1588843969820,["Wahaha@DESKTOP-HTU2IVD",[[-1,1856," "],[1,1857," "],[-1,1869," "],[1,1870," `"]],[1870,1870],[1871,1871]]],[1588843970247,["Wahaha@DESKTOP-HTU2IVD",[[1,1871,"``"]],[1871,1871],[1873,1873]]],[1588843970795,["Wahaha@DESKTOP-HTU2IVD",[[1,1874," \n"]],[1873,1873],[1875,1875]]],[1588843973505,["Wahaha@DESKTOP-HTU2IVD",[[1,1875,"```"]],[1875,1875],[1878,1878]]],[1588843976713,["Wahaha@DESKTOP-HTU2IVD",[[1,1870,"\n "]],[1868,1868],[1870,1870]]],[1588843977965,["Wahaha@DESKTOP-HTU2IVD",[[1,1870,"```"]],[1870,1870],[1873,1873]]],[1588843979199,["Wahaha@DESKTOP-HTU2IVD",[[1,1875,"\n "]],[1873,1873],[1875,1875]]],[1588843980025,["Wahaha@DESKTOP-HTU2IVD",[[1,1875,"```"]],[1875,1875],[1878,1878]]],[1588843981195,["Wahaha@DESKTOP-HTU2IVD",[[-1,1874," ```"]],[1878,1878],[1874,1874]]],[1588843983991,["Wahaha@DESKTOP-HTU2IVD",[[-1,1869," ```\n\n ```\n ```"]],[1869,1884],[1869,1869]]],[1588843985629,["Wahaha@DESKTOP-HTU2IVD",[[1,1856,"\n"]],[1855,1855],[1856,1856]]],[1588843988525,["Wahaha@DESKTOP-HTU2IVD",[[1,1870," \n"]],[1869,1869],[1871,1871]]],[1588843990957,["Wahaha@DESKTOP-HTU2IVD",[[1,1871,"```"]],[1871,1871],[1874,1874]]],[1588843992436,["Wahaha@DESKTOP-HTU2IVD",[[1,1875," \n"]],[1874,1874],[1876,1876]]],[1588843993913,["Wahaha@DESKTOP-HTU2IVD",[[1,1876,"11"]],[1876,1876],[1878,1878]]],[1588843994521,["Wahaha@DESKTOP-HTU2IVD",[[-1,1876,"11"]],[1878,1878],[1876,1876]]],[1588843995292,["Wahaha@DESKTOP-HTU2IVD",[[1,1876,"```"]],[1876,1876],[1879,1879]]],[1588844001037,["Wahaha@DESKTOP-HTU2IVD",[[1,1876,"\n "]],[1874,1874],[1876,1876]]],[1588844001367,["Wahaha@DESKTOP-HTU2IVD",[[1,1876,"public ClassLoader getContextClassLoader()"]],[1876,1876],[1918,1918]]],[1588844013082,["Wahaha@DESKTOP-HTU2IVD",[[-1,1875," public ClassLoader getContextClassLoader"],[1,1916,"System.out.println(Thread.currentThread().getName"],[1,1918,");"],[-1,1919," "]],[1871,1923],[1932,1932]]],[1588844018004,["Wahaha@DESKTOP-HTU2IVD",[[-1,1869,"\n"]],[1870,1870],[1869,1869]]],[1588844025993,["Wahaha@DESKTOP-HTU2IVD",[[-1,1874,"System.out.println(Thread.currentThread().getName());\n```"]],[1874,1931],[1874,1874]]],[1588844027335,["Wahaha@DESKTOP-HTU2IVD",[[-1,1876,"\n"]],[1874,1874],[1873,1873]]],[1588844028785,["Wahaha@DESKTOP-HTU2IVD",[[-1,1869," ```"]],[1873,1873],[1869,1869]]],[1588844029346,["Wahaha@DESKTOP-HTU2IVD",[[1,1870," \n"]],[1869,1869],[1871,1871]]],[1588844032863,["Wahaha@DESKTOP-HTU2IVD",[[-1,1856,"\n"]],[1856,1856],[1855,1855]]],[1588844044038,["Wahaha@DESKTOP-HTU2IVD",[[1,1869,"```"]],[1869,1869],[1872,1872]]],[1588844044066,["Wahaha@DESKTOP-HTU2IVD",[[1,1872,"language\n```\n"]],[1872,1872],[1872,1880]]],[1588844045349,["Wahaha@DESKTOP-HTU2IVD",[[-1,1872,"language"],[1,1880,"\n"]],[1872,1880],[1873,1873]]],[1588844046663,["Wahaha@DESKTOP-HTU2IVD",[[1,1873,"```\nSystem.out.println(Thread.currentThread().getName());\n```"]],[1873,1873],[1934,1934]]],[1588844049356,["Wahaha@DESKTOP-HTU2IVD",[[-1,1931,"```"]],[1931,1934],[1931,1931]]],[1588844054540,["Wahaha@DESKTOP-HTU2IVD",[[-1,1877,"System.out.println(Thread.currentThread().getName());"]],[1877,1930],[1877,1877]]],[1588844056668,["Wahaha@DESKTOP-HTU2IVD",[[1,1873,"\n"]],[1872,1872],[1873,1873]]],[1588844057021,["Wahaha@DESKTOP-HTU2IVD",[[1,1873,"System.out.println(Thread.currentThread().getName());"]],[1873,1873],[1926,1926]]],[1588844058873,["Wahaha@DESKTOP-HTU2IVD",[[-1,1933,"```\n"]],[1932,1936],[1932,1932]]],[1588844059187,["Wahaha@DESKTOP-HTU2IVD",[[-1,1932,"\n"]],[1932,1932],[1931,1931]]],[1588844062670,["Wahaha@DESKTOP-HTU2IVD",[[1,1927,"\n"]],[1926,1926],[1927,1927]]],[1588844064183,["Wahaha@DESKTOP-HTU2IVD",[[-1,1927,"\n"]],[1927,1927],[1926,1926]]],[1588844069177,["Wahaha@DESKTOP-HTU2IVD",[[1,1856,"1."]],[1856,1856],[1858,1858]]],[1588844069439,["Wahaha@DESKTOP-HTU2IVD",[[1,1859," "]],[1858,1858],[1859,1859]]],[1588844079094,["Wahaha@DESKTOP-HTU2IVD",[[1,1934,"2. ​ 设置线程类加载器（可以打破Java类加载器的父类委托机制）"]],[1934,1934],[1968,1968]]],[1588844083490,["Wahaha@DESKTOP-HTU2IVD",[[1,1969,"3. \n"]],[1968,1968],[1972,1972]]],[1588844085107,["Wahaha@DESKTOP-HTU2IVD",[[-1,1969,"3. "]],[1972,1972],[1969,1969]]],[1588844086427,["Wahaha@DESKTOP-HTU2IVD",[[1,1969,"```"]],[1969,1969],[1972,1972]]],[1588844086457,["Wahaha@DESKTOP-HTU2IVD",[[1,1972,"language\n```\n"]],[1972,1972],[1972,1980]]],[1588844087481,["Wahaha@DESKTOP-HTU2IVD",[[-1,1972,"language"],[1,1980,"\n"]],[1972,1980],[1973,1973]]],[1588844092171,["Wahaha@DESKTOP-HTU2IVD",[[1,1973,"public  void  setContextClassLoader(ClassLoader cl)"]],[1973,1973],[2024,2024]]],[1588844096931,["Wahaha@DESKTOP-HTU2IVD",[[1,2031,"#### 11.设置线程上下文类加载器"]],[2031,2031],[2050,2050]]],[1588844099219,["Wahaha@DESKTOP-HTU2IVD",[[-1,2037,"1"],[1,2038,"2"]],[2037,2038],[2038,2038]]],[1588844101431,["Wahaha@DESKTOP-HTU2IVD",[[-1,2039,"设置线程上下文类加载器"]],[2039,2050],[2039,2039]]],[1588844102422,["Wahaha@DESKTOP-HTU2IVD",[[1,2039," joi"]],[2039,2039],[2043,2043]]],[1588844102905,["Wahaha@DESKTOP-HTU2IVD",[[1,2043,"n"]],[2043,2043],[2044,2044]]],[1588844111366,["Wahaha@DESKTOP-HTU2IVD",[[1,2045," \n"]],[2044,2044],[2046,2046]]],[1588844111709,["Wahaha@DESKTOP-HTU2IVD",[[1,2046,"join是指把指定的线程加入到当前线程，比如join某个线程a,会让当前线程b进入等待,直到a的生命周期结束，此期间b线程是处于blocked状态。"]],[2046,2046],[2120,2120]]],[1588844132802,["Wahaha@DESKTOP-HTU2IVD",[[1,2122," #### 12. join"]],[2122,2122],[2136,2136]]],[1588844135363,["Wahaha@DESKTOP-HTU2IVD",[[-1,2129,"2"],[1,2130,"3"]],[2129,2130],[2130,2130]]],[1588844139451,["Wahaha@DESKTOP-HTU2IVD",[[-1,2132,"join"],[1,2136,"神魔是"]],[2132,2132],[2135,2135]]],[1588844141087,["Wahaha@DESKTOP-HTU2IVD",[[-1,2132,"神魔是"]],[2135,2135],[2132,2132]]],[1588844152055,["Wahaha@DESKTOP-HTU2IVD",[[-1,2128,"13. "],[1,2132,"#### 什么是synchronized?"]],[2128,2132],[2149,2149]]],[1588844155001,["Wahaha@DESKTOP-HTU2IVD",[[-1,2128,"####"],[1,2132,"1"]],[2128,2132],[2129,2129]]],[1588844156362,["Wahaha@DESKTOP-HTU2IVD",[[1,2129,"3."]],[2129,2129],[2131,2131]]],[1588844158367,["Wahaha@DESKTOP-HTU2IVD",[[1,2149," \n"]],[2148,2148],[2150,2150]]],[1588844219388,["Wahaha@DESKTOP-HTU2IVD",[[1,2150,"synchronized关键字可以时间一个简单的策略来防止线程干扰和内存一致性错误，如果一个对象是对多个线程可见的，那么对该对想的所有读写都将通过同步的方式来进行。"]],[2150,2150],[2232,2232]]],[1588844229958,["Wahaha@DESKTOP-HTU2IVD",[[1,2233," \n"]],[2232,2232],[2234,2234]]],[1588844240640,["Wahaha@DESKTOP-HTU2IVD",[[1,2234,"#### 29.synchronized包括哪两个jvm重要的指令？"]],[2234,2234],[2268,2268]]],[1588844243509,["Wahaha@DESKTOP-HTU2IVD",[[-1,2239,"29"],[1,2241,"1"]],[2239,2241],[2240,2240]]],[1588844243758,["Wahaha@DESKTOP-HTU2IVD",[[1,2240,"4"]],[2240,2240],[2241,2241]]],[1588844247811,["Wahaha@DESKTOP-HTU2IVD",[[1,2242," "]],[2242,2242],[2243,2243]]],[1588844249104,["Wahaha@DESKTOP-HTU2IVD",[[1,2270," \n"]],[2269,2269],[2271,2271]]],[1588844253425,["Wahaha@DESKTOP-HTU2IVD",[[1,2271,"monitor enter 和 monitor exit"]],[2271,2271],[2299,2299]]],[1588844254719,["Wahaha@DESKTOP-HTU2IVD",[[1,2300," \n"]],[2299,2299],[2301,2301]]],[1588844263301,["Wahaha@DESKTOP-HTU2IVD",[[1,2301,"#### synchronized关键字用法?"]],[2301,2301],[2324,2324]]],[1588844265337,["Wahaha@DESKTOP-HTU2IVD",[[1,2306," "]],[2305,2305],[2306,2306]]],[1588844266293,["Wahaha@DESKTOP-HTU2IVD",[[1,2306,"15"]],[2306,2306],[2308,2308]]],[1588844266621,["Wahaha@DESKTOP-HTU2IVD",[[1,2309," "]],[2308,2308],[2309,2309]]],[1588844267643,["Wahaha@DESKTOP-HTU2IVD",[[-1,2309," "]],[2309,2309],[2308,2308]]],[1588844268830,["Wahaha@DESKTOP-HTU2IVD",[[1,2308,"。"]],[2308,2308],[2309,2309]]],[1588844269082,["Wahaha@DESKTOP-HTU2IVD",[[1,2310," "]],[2309,2309],[2310,2310]]],[1588844270244,["Wahaha@DESKTOP-HTU2IVD",[[-1,2308,"。 "]],[2310,2310],[2308,2308]]],[1588844271585,["Wahaha@DESKTOP-HTU2IVD",[[1,2308,"."]],[2308,2308],[2309,2309]]],[1588844274307,["Wahaha@DESKTOP-HTU2IVD",[[1,2329," \n"]],[2328,2328],[2330,2330]]],[1588844280047,["Wahaha@DESKTOP-HTU2IVD",[[1,2330,"可以用于对代码块或方法的修饰"]],[2330,2330],[2344,2344]]],[1588844287166,["Wahaha@DESKTOP-HTU2IVD",[[1,2345," \n"]],[2344,2344],[2346,2346]]],[1588844289246,["Wahaha@DESKTOP-HTU2IVD",[[1,2346," #### 15. synchronized关键字用法?\n"]],[2346,2346],[2375,2375]]],[1588844291799,["Wahaha@DESKTOP-HTU2IVD",[[-1,2353,"5"]],[2352,2354],[2353,2353]]],[1588844292383,["Wahaha@DESKTOP-HTU2IVD",[[1,2353,"6"]],[2353,2353],[2354,2354]]],[1588844298802,["Wahaha@DESKTOP-HTU2IVD",[[1,2356,"#### "],[-1,2368,"关键字用法"],[1,2373,"锁的是什么"]],[2356,2374],[2379,2379]]],[1588844302144,["Wahaha@DESKTOP-HTU2IVD",[[-1,2356,"#### "]],[2356,2361],[2356,2356]]],[1588844310866,["Wahaha@DESKTOP-HTU2IVD",[[1,2375,"  \n"]],[2374,2374],[2377,2377]]],[1588844311740,["Wahaha@DESKTOP-HTU2IVD",[[1,2377,"普通同步方法 —————> 锁的是当前实力对象。\n\n静态同步方法—————> 锁的是当前类的Class对象。\n\n同步方法快 —————> 锁的是synchonized括号里配置的对象。"]],[2377,2377],[2469,2469]]],[1588844325904,["Wahaha@DESKTOP-HTU2IVD",[[-1,2437,"快"],[1,2438,"k"]],[2437,2438],[2438,2438]]],[1588844326953,["Wahaha@DESKTOP-HTU2IVD",[[1,2438,"uai="]],[2438,2438],[2442,2442]]],[1588844328185,["Wahaha@DESKTOP-HTU2IVD",[[-1,2437,"kuai="]],[2442,2442],[2437,2437]]],[1588844330115,["Wahaha@DESKTOP-HTU2IVD",[[1,2437,"块"]],[2437,2437],[2438,2438]]],[1588844335126,["Wahaha@DESKTOP-HTU2IVD",[[-1,2375,"  "]],[2377,2377],[2375,2375]]],[1588844337826,["Wahaha@DESKTOP-HTU2IVD",[[-1,2346," "]],[2347,2347],[2346,2346]]],[1588844348021,["Wahaha@DESKTOP-HTU2IVD",[[1,2031,"="]],[2031,2031],[2032,2032]]],[1588844348827,["Wahaha@DESKTOP-HTU2IVD",[[-1,2030," ="]],[2032,2032],[2030,2030]]],[1588844352075,["Wahaha@DESKTOP-HTU2IVD",[[-1,2121," "]],[2122,2122],[2121,2121]]],[1588844355434,["Wahaha@DESKTOP-HTU2IVD",[[-1,2231," "]],[2232,2232],[2231,2231]]],[1588844357796,["Wahaha@DESKTOP-HTU2IVD",[[-1,2297," "]],[2298,2298],[2297,2297]]],[1588844360319,["Wahaha@DESKTOP-HTU2IVD",[[-1,2341," "]],[2342,2342],[2341,2341]]],[1588844367536,["Wahaha@DESKTOP-HTU2IVD",[[-1,2147," "]],[2148,2148],[2147,2147]]],[1588844373780,["Wahaha@DESKTOP-HTU2IVD",[[1,2230,"\n"]],[2229,2229],[2230,2230]]],[1588844376128,["Wahaha@DESKTOP-HTU2IVD",[[1,2297," \n"]],[2296,2296],[2298,2298]]],[1588844377878,["Wahaha@DESKTOP-HTU2IVD",[[1,2343," \n"]],[2342,2342],[2344,2344]]],[1588844381207,["Wahaha@DESKTOP-HTU2IVD",[[1,2467,"\n"]],[2465,2465],[2466,2466]]],[1588844381762,["Wahaha@DESKTOP-HTU2IVD",[[1,2468,"\n"]],[2466,2466],[2467,2467]]],[1588844457786,["Wahaha@DESKTOP-HTU2IVD",[[1,2467,"普通同步方法 —————> 锁的是当前实力对象。\n\n静态同步方法—————> 锁的是当前类的Class对象。\n\n同步方法快 —————> 锁的是synchonized括号里配置的对象。"]],[2467,2467],[2559,2559]]],[1588844458559,["Wahaha@DESKTOP-HTU2IVD",[[-1,2467,"普通同步方法 —————> 锁的是当前实力对象。\n\n静态同步方法—————> 锁的是当前类的Class对象。\n\n同步方法快 —————> 锁的是synchonized括号里配置的对象。"]],[2559,2559],[2467,2467]]],[1588844462396,["Wahaha@DESKTOP-HTU2IVD",[[1,2467,"#### 16. synchronized锁的是什么?"]],[2467,2467],[2494,2494]]],[1588844465022,["Wahaha@DESKTOP-HTU2IVD",[[1,2473,"7"]],[2473,2473],[2474,2474]]],[1588844467758,["Wahaha@DESKTOP-HTU2IVD",[[-1,2474,"6"]],[2475,2475],[2474,2474]]],[1588844476318,["Wahaha@DESKTOP-HTU2IVD",[[-1,2476,"synchronized锁的是什么?"],[1,2494,"#### volatile关键字"]],[2476,2494],[2492,2492]]],[1588844479319,["Wahaha@DESKTOP-HTU2IVD",[[-1,2475," #### "]],[2475,2481],[2475,2475]]],[1588844480047,["Wahaha@DESKTOP-HTU2IVD",[[1,2475," "]],[2475,2475],[2476,2476]]],[1588844485458,["Wahaha@DESKTOP-HTU2IVD",[[1,2489,"\n"]],[2487,2487],[2488,2488]]],[1588844486026,["Wahaha@DESKTOP-HTU2IVD",[[1,2488,"volatile 是轻量级的synchronized,它在多处理器开发中保证了共享变量的“可见性“。\n\nJava语言规范第3版对volatile定义如下，Java允许线程访问共享变量，为了保证共享变量能准确和一致的更新，线程应该确保排它锁单独获得这个变量。如果一个字段被声明为volatile,Java线程内存模型所有线程看到这个变量的值是一致的。\n\n作者：java小咖秀\n链接：https://juejin.im/post/5eaecf326fb9a043856f33d5\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[2488,2488],[2766,2766]]],[1588844490965,["Wahaha@DESKTOP-HTU2IVD",[[-1,2664,"作者：java小咖秀\n链接：https://juejin.im/post/5eaecf326fb9a043856f33d5\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[2664,2766],[2664,2664]]],[1588844495766,["Wahaha@DESKTOP-HTU2IVD",[[-1,2544,"语言规范第3版对volatile定义如下，Java"]],[2540,2565],[2540,2540]]],[1588844516158,["Wahaha@DESKTOP-HTU2IVD",[[1,2641,"\n"]],[2638,2638],[2639,2639]]],[1588845229710,["Wahaha@DESKTOP-HTU2IVD",[[1,2639,"#### 50.等待/通知机制"]],[2639,2639],[2654,2654]]],[1588845234112,["Wahaha@DESKTOP-HTU2IVD",[[-1,2644,"50"],[1,2646,"1"]],[2644,2646],[2645,2645]]],[1588845234557,["Wahaha@DESKTOP-HTU2IVD",[[1,2645,"8"]],[2645,2645],[2646,2646]]],[1588845236339,["Wahaha@DESKTOP-HTU2IVD",[[1,2647," "]],[2647,2647],[2648,2648]]],[1588845237745,["Wahaha@DESKTOP-HTU2IVD",[[1,2658,"\n"]],[2655,2655],[2656,2656]]],[1588845242295,["Wahaha@DESKTOP-HTU2IVD",[[1,2656,"一个线程修改了一个对象的值，而另一个线程感知到了变化，然后进行相应的操作。"]],[2656,2656],[2693,2693]]],[1588845247875,["Wahaha@DESKTOP-HTU2IVD",[[1,2696,"\n"]],[2693,2693],[2694,2694]]],[1588845248360,["Wahaha@DESKTOP-HTU2IVD",[[1,2697,"\n"]],[2694,2694],[2695,2695]]],[1588845272480,["Wahaha@DESKTOP-HTU2IVD",[[1,2694,"eg: deng"]],[2694,2694],[2702,2702]]],[1588845273492,["Wahaha@DESKTOP-HTU2IVD",[[-1,2698,"deng"]],[2702,2702],[2698,2698]]],[1588845275147,["Wahaha@DESKTOP-HTU2IVD",[[1,2698,"等待"]],[2698,2698],[2700,2700]]],[1588845276251,["Wahaha@DESKTOP-HTU2IVD",[[1,2704,"\n"]],[2700,2700],[2701,2701]]],[1588845280050,["Wahaha@DESKTOP-HTU2IVD",[[1,2701,"```"]],[2701,2701],[2704,2704]]],[1588845280081,["Wahaha@DESKTOP-HTU2IVD",[[1,2704,"language\n```\n"]],[2704,2704],[2704,2712]]],[1588845288473,["Wahaha@DESKTOP-HTU2IVD",[[-1,2704,"language"],[1,2712,"synchronized(obj) { while(条件不满足) { obj.wait(); } 执行对应逻辑 }"]],[2704,2712],[2761,2761]]],[1588845291380,["Wahaha@DESKTOP-HTU2IVD",[[1,2704,"\n"]],[2704,2704],[2705,2705]]],[1588845293720,["Wahaha@DESKTOP-HTU2IVD",[[1,2705,"  "]],[2705,2705],[2707,2707]]],[1588845296100,["Wahaha@DESKTOP-HTU2IVD",[[1,2725,"\n  "]],[2725,2725],[2728,2728]]],[1588845299294,["Wahaha@DESKTOP-HTU2IVD",[[-1,2726,"  "]],[2728,2728],[2726,2726]]],[1588845299703,["Wahaha@DESKTOP-HTU2IVD",[[-1,2725,"\n"]],[2726,2726],[2725,2725]]],[1588845304958,["Wahaha@DESKTOP-HTU2IVD",[[1,2727,"\n    "]],[2727,2727],[2732,2732]]],[1588845309372,["Wahaha@DESKTOP-HTU2IVD",[[1,2747,"\n      "]],[2747,2747],[2754,2754]]],[1588845312428,["Wahaha@DESKTOP-HTU2IVD",[[1,2768,"\n      "]],[2768,2768],[2775,2775]]],[1588845319914,["Wahaha@DESKTOP-HTU2IVD",[[-1,2707,"synchronized(obj) { \n    while(条件不满足) { \n      obj.wait(); } \n      执行对应逻辑 }"]],[2708,2783],[2707,2707]]],[1588845323646,["Wahaha@DESKTOP-HTU2IVD",[[1,2707,"synchronized(obj) { while(条件不满足) { obj.wait(); } 执行对应逻辑 }"]],[2707,2707],[2764,2764]]],[1588845337335,["Wahaha@DESKTOP-HTU2IVD",[[1,2727,"\n                    "]],[2727,2727],[2748,2748]]],[1588845345619,["Wahaha@DESKTOP-HTU2IVD",[[1,2763,"\n                                      "]],[2763,2763],[2802,2802]]],[1588845349010,["Wahaha@DESKTOP-HTU2IVD",[[-1,2801," "]],[2802,2802],[2801,2801]]],[1588845352540,["Wahaha@DESKTOP-HTU2IVD",[[1,2812,"\n                                     "]],[2812,2812],[2850,2850]]],[1588845358598,["Wahaha@DESKTOP-HTU2IVD",[[1,2853,"\n                                      "]],[2853,2853],[2892,2892]]],[1588845362084,["Wahaha@DESKTOP-HTU2IVD",[[1,2899,"\n                                      "]],[2899,2899],[2938,2938]]],[1588845369537,["Wahaha@DESKTOP-HTU2IVD",[[-1,2902,"                                    "]],[2938,2938],[2902,2902]]],[1588845383481,["Wahaha@DESKTOP-HTU2IVD",[[-1,2735,"             "]],[2735,2748],[2735,2735]]],[1588845387909,["Wahaha@DESKTOP-HTU2IVD",[[-1,2767,"                     "]],[2767,2788],[2767,2767]]],[1588845392171,["Wahaha@DESKTOP-HTU2IVD",[[-1,2802,"               "]],[2802,2817],[2802,2802]]],[1588845397251,["Wahaha@DESKTOP-HTU2IVD",[[-1,2814,"                             执"]],[2815,2844],[2814,2814]]],[1588845400636,["Wahaha@DESKTOP-HTU2IVD",[[1,2814,"zhi"]],[2814,2814],[2817,2817]]],[1588845401494,["Wahaha@DESKTOP-HTU2IVD",[[-1,2814,"zhi"]],[2817,2817],[2814,2814]]],[1588845418922,["Wahaha@DESKTOP-HTU2IVD",[[1,2814,"执行"]],[2814,2814],[2816,2816]]],[1588845419245,["Wahaha@DESKTOP-HTU2IVD",[[-1,2816,"行"]],[2816,2816],[2815,2815]]],[1588845426368,["Wahaha@DESKTOP-HTU2IVD",[[-1,2764,"   "]],[2766,2766],[2763,2763]]],[1588845431025,["Wahaha@DESKTOP-HTU2IVD",[[-1,2787,"            "]],[2787,2799],[2787,2787]]],[1588845442383,["Wahaha@DESKTOP-HTU2IVD",[[-1,2694,"eg:"]],[2694,2696],[2694,2694]]],[1588845446635,["Wahaha@DESKTOP-HTU2IVD",[[1,2813,"通知"]],[2813,2813],[2815,2815]]],[1588845447661,["Wahaha@DESKTOP-HTU2IVD",[[1,2818,"\n"]],[2815,2815],[2816,2816]]],[1588845449719,["Wahaha@DESKTOP-HTU2IVD",[[1,2816,"```"]],[2816,2816],[2819,2819]]],[1588845449752,["Wahaha@DESKTOP-HTU2IVD",[[1,2819,"language\n```\n"]],[2819,2819],[2819,2827]]],[1588845450162,["Wahaha@DESKTOP-HTU2IVD",[[-1,2819,"language"],[1,2827,"\n"]],[2819,2827],[2820,2820]]],[1588845450688,["Wahaha@DESKTOP-HTU2IVD",[[1,2821,"\n"]],[2820,2820],[2821,2821]]],[1588845450983,["Wahaha@DESKTOP-HTU2IVD",[[1,2822,"\n"]],[2821,2821],[2822,2822]]],[1588845451203,["Wahaha@DESKTOP-HTU2IVD",[[1,2823,"\n"]],[2822,2822],[2823,2823]]],[1588845457676,["Wahaha@DESKTOP-HTU2IVD",[[1,2820,"sy"]],[2820,2820],[2822,2822]]],[1588845458453,["Wahaha@DESKTOP-HTU2IVD",[[-1,2820,"sy"]],[2822,2822],[2820,2820]]],[1588845460603,["Wahaha@DESKTOP-HTU2IVD",[[1,2820,"  sybc"]],[2820,2820],[2826,2826]]],[1588845463061,["Wahaha@DESKTOP-HTU2IVD",[[-1,2824,"bc"]],[2826,2826],[2824,2824]]],[1588845473921,["Wahaha@DESKTOP-HTU2IVD",[[1,2824,"nchronized()"]],[2824,2824],[2836,2836]]],[1588845476850,["Wahaha@DESKTOP-HTU2IVD",[[1,2835,"obj"]],[2835,2835],[2838,2838]]],[1588845479105,["Wahaha@DESKTOP-HTU2IVD",[[1,2839,"{}"]],[2839,2839],[2841,2841]]],[1588845480888,["Wahaha@DESKTOP-HTU2IVD",[[1,2840,"\n  \n  \n  \n  "]],[2840,2840],[2852,2852]]],[1588845487540,["Wahaha@DESKTOP-HTU2IVD",[[1,2843,"      gai"]],[2843,2843],[2852,2852]]],[1588845488898,["Wahaha@DESKTOP-HTU2IVD",[[-1,2849,"gai"]],[2852,2852],[2849,2849]]],[1588845492589,["Wahaha@DESKTOP-HTU2IVD",[[1,2849,"改变条件"]],[2849,2849],[2853,2853]]],[1588845495718,["Wahaha@DESKTOP-HTU2IVD",[[1,2856,"      \n  "]],[2853,2853],[2862,2862]]],[1588845516810,["Wahaha@DESKTOP-HTU2IVD",[[1,2862,"    obj.notifyAll();"]],[2862,2862],[2882,2882]]],[1588845522166,["Wahaha@DESKTOP-HTU2IVD",[[-1,2883,"  \n  "]],[2883,2888],[2883,2883]]],[1588845526515,["Wahaha@DESKTOP-HTU2IVD",[[-1,2889,"\n\n"]],[2888,2890],[2888,2888]]],[1588845529085,["Wahaha@DESKTOP-HTU2IVD",[[-1,2888,"\n"]],[2888,2888],[2887,2887]]],[1588845540058,["Wahaha@DESKTOP-HTU2IVD",[[1,2893,"#### "]],[2893,2893],[2898,2898]]],[1588845546964,["Wahaha@DESKTOP-HTU2IVD",[[1,2898,"#### notify"]],[2898,2898],[2909,2909]]],[1588845553214,["Wahaha@DESKTOP-HTU2IVD",[[-1,2898,"####"],[1,2902,"1"]],[2898,2902],[2899,2899]]],[1588845554800,["Wahaha@DESKTOP-HTU2IVD",[[1,2899,"9."]],[2899,2899],[2901,2901]]],[1588845561895,["Wahaha@DESKTOP-HTU2IVD",[[1,2910,"\n"]],[2908,2908],[2909,2909]]],[1588845562401,["Wahaha@DESKTOP-HTU2IVD",[[1,2909,"notify()也是Object类的通用方法，也要在同步方法或同步代码块内调用，该方法用来通知哪些可能灯光该对象的对象锁的其他线程，如果有多个线程等待，则随机挑选出其中一个呈wait状态的线程，对其发出 通知 notify，并让它等待获取该对象的对象锁。"]],[2909,2909],[3036,3036]]],[1588845596866,["Wahaha@DESKTOP-HTU2IVD",[[-1,2959,"能灯光"]],[2960,2962],[2959,2959]]],[1588845600714,["Wahaha@DESKTOP-HTU2IVD",[[1,2959,"能灯光"]],[2959,2959],[2960,2962]]],[1588845606528,["Wahaha@DESKTOP-HTU2IVD",[[-1,2960,"灯光该"]],[2960,2962],[2960,2960]]],[1588845630103,["Wahaha@DESKTOP-HTU2IVD",[[1,2960,"灯光"]],[2960,2960],[2962,2962]]],[1588845648892,["Wahaha@DESKTOP-HTU2IVD",[[1,3037,"\n"]],[3035,3035],[3036,3036]]],[1588845649385,["Wahaha@DESKTOP-HTU2IVD",[[1,3038,"\n"]],[3036,3036],[3037,3037]]],[1588845655906,["Wahaha@DESKTOP-HTU2IVD",[[1,3037,"#### 20. #### 53.notify/notifyAll"]],[3037,3037],[3070,3070]]],[1588845660516,["Wahaha@DESKTOP-HTU2IVD",[[-1,3045," #### 53."]],[3045,3054],[3045,3045]]],[1588845661438,["Wahaha@DESKTOP-HTU2IVD",[[1,3045," "]],[3045,3045],[3046,3046]]],[1588845662767,["Wahaha@DESKTOP-HTU2IVD",[[1,3064,"\n"]],[3062,3062],[3063,3063]]],[1588845667477,["Wahaha@DESKTOP-HTU2IVD",[[1,3063,"notify等于说将等待队列中的一个线程移动到同步队列中，而notifyAll是将等待队列中的所有线程全部移动到同步队列中。"]],[3063,3063],[3125,3125]]],[1588845917444,["Wahaha@DESKTOP-HTU2IVD",[[1,3127,"\n"]],[3126,3126],[3127,3127]]],[1588845917819,["Wahaha@DESKTOP-HTU2IVD",[[1,3127,"#### 55.ThreadLocal\n\n主要解决每一个线程想绑定自己的值，存放线程的私有数据。\n\n#### 56.ThreadLocal使用"]],[3127,3127],[3198,3198]]],[1588845920156,["Wahaha@DESKTOP-HTU2IVD",[[-1,3132,"55"],[1,3134,"1"]],[3132,3134],[3133,3133]]],[1588845921213,["Wahaha@DESKTOP-HTU2IVD",[[-1,3132,"1"]],[3133,3133],[3132,3132]]],[1588845921559,["Wahaha@DESKTOP-HTU2IVD",[[1,3132,"21"]],[3132,3132],[3134,3134]]],[1588845927417,["Wahaha@DESKTOP-HTU2IVD",[[-1,3132,"21"]],[3134,3134],[3132,3132]]],[1588845930483,["Wahaha@DESKTOP-HTU2IVD",[[1,3132,"1"]],[3132,3132],[3133,3133]]],[1588845930958,["Wahaha@DESKTOP-HTU2IVD",[[1,3132,"55"],[-1,3132,"1"]],[3133,3133],[3132,3134]]],[1588845933567,["Wahaha@DESKTOP-HTU2IVD",[[-1,3177,"#### 56.ThreadLocal使用"]],[3177,3198],[3177,3177]]],[1588845938788,["Wahaha@DESKTOP-HTU2IVD",[[-1,3131," 55"],[1,3134,"2"]],[3131,3134],[3132,3132]]],[1588845938963,["Wahaha@DESKTOP-HTU2IVD",[[1,3132,"1"]],[3132,3132],[3133,3133]]],[1588845940211,["Wahaha@DESKTOP-HTU2IVD",[[1,3131," "]],[3131,3131],[3132,3132]]],[1588845960753,["Wahaha@DESKTOP-HTU2IVD",[[1,3177,"public class XKThreadLocal {\n\n    public static ThreadLocal threadLocal = new ThreadLocal();\n\n    public static void main(String[] args) {\n        if (threadLocal.get() == null) {\n            System.out.println(\"未设置过值\");\n            threadLocal.set(\"Java小咖秀\");\n        }\n        System.out.println(threadLocal.get());\n    }\n\n}\n"]],[3177,3177],[3504,3504]]],[1588845965522,["Wahaha@DESKTOP-HTU2IVD",[[1,3177,"\n"]],[3176,3176],[3177,3177]]],[1588845967174,["Wahaha@DESKTOP-HTU2IVD",[[1,3177,"```"]],[3177,3177],[3180,3180]]],[1588845967208,["Wahaha@DESKTOP-HTU2IVD",[[1,3180,"language\n```\n"]],[3180,3180],[3180,3188]]],[1588845973599,["Wahaha@DESKTOP-HTU2IVD",[[-1,3194,"public class XKThreadLocal {\n\n    public static ThreadLocal threadLocal = new ThreadLocal();\n\n    public static void main(String[] args) {\n        if (threadLocal.get() == null) {\n            System.out.println(\"未设置过值\");\n            threadLocal.set(\"Java小咖秀\");\n        }\n        System.out.println(threadLocal.get());\n    }\n\n}"]],[3194,3520],[3194,3194]]],[1588845979240,["Wahaha@DESKTOP-HTU2IVD",[[-1,3180,"language"],[1,3188,"\n"]],[3180,3188],[3181,3181]]],[1588845980523,["Wahaha@DESKTOP-HTU2IVD",[[1,3181,"public class XKThreadLocal {\n\n    public static ThreadLocal threadLocal = new ThreadLocal();\n\n    public static void main(String[] args) {\n        if (threadLocal.get() == null) {\n            System.out.println(\"未设置过值\");\n            threadLocal.set(\"Java小咖秀\");\n        }\n        System.out.println(threadLocal.get());\n    }\n\n}"]],[3181,3181],[3507,3507]]],[1588845986522,["Wahaha@DESKTOP-HTU2IVD",[[1,3181,"  "],[1,3210,"  "],[1,3211,"  "],[1,3274,"  "],[1,3275,"  "],[1,3328,"  "],[1,3361," "],[1,3373," "],[1,3402,"  "],[1,3450,"  "],[1,3452,"  "],[1,3503,"  "],[1,3505,"  "],[1,3506,"  "]],[3181,3507],[3181,3533]]],[1588846007449,["Wahaha@DESKTOP-HTU2IVD",[[-1,3447,"Java小咖秀"],[1,3454,"线程"]],[3447,3447],[3449,3449]]],[1588846009196,["Wahaha@DESKTOP-HTU2IVD",[[1,3449,"学习"]],[3449,3449],[3451,3451]]],[1588846136749,["Wahaha@DESKTOP-HTU2IVD",[[1,3176,"  - 使用"]],[3176,3176],[3182,3182]]],[1588846144104,["Wahaha@DESKTOP-HTU2IVD",[[1,3180,"ThreadLocal"]],[3180,3180],[3191,3191]]],[1588846158853,["Wahaha@DESKTOP-HTU2IVD",[[1,3552,"```"]],[3552,3552],[3555,3555]]],[1588846158889,["Wahaha@DESKTOP-HTU2IVD",[[1,3555,"language\n```\n"]],[3555,3555],[3555,3563]]],[1588846160092,["Wahaha@DESKTOP-HTU2IVD",[[-1,3555,"language"],[1,3563,"\n"]],[3555,3563],[3556,3556]]],[1588846166296,["Wahaha@DESKTOP-HTU2IVD",[[1,3557,"\n"]],[3555,3555],[3556,3556]]],[1588846171431,["Wahaha@DESKTOP-HTU2IVD",[[1,3556,"  输出："]],[3556,3556],[3561,3561]]],[1588846171790,["Wahaha@DESKTOP-HTU2IVD",[[1,3562,"  \n"]],[3561,3561],[3564,3564]]],[1588846179507,["Wahaha@DESKTOP-HTU2IVD",[[-1,3557," 输出："]],[3557,3561],[3557,3557]]],[1588846181974,["Wahaha@DESKTOP-HTU2IVD",[[1,3552,"\n"]],[3551,3551],[3552,3552]]],[1588846186217,["Wahaha@DESKTOP-HTU2IVD",[[1,3552,"  print"]],[3552,3552],[3559,3559]]],[1588846199309,["Wahaha@DESKTOP-HTU2IVD",[[1,3568,"未设置过值"]],[3568,3568],[3573,3573]]],[1588846200386,["Wahaha@DESKTOP-HTU2IVD",[[1,3574,"  \n"]],[3573,3573],[3576,3576]]],[1588846201194,["Wahaha@DESKTOP-HTU2IVD",[[1,3576,"x"]],[3576,3576],[3577,3577]]],[1588846201732,["Wahaha@DESKTOP-HTU2IVD",[[-1,3576,"x"]],[3577,3577],[3576,3576]]],[1588846204757,["Wahaha@DESKTOP-HTU2IVD",[[1,3576,"线程学习"]],[3576,3576],[3580,3580]]],[1588846207165,["Wahaha@DESKTOP-HTU2IVD",[[-1,3564," "]],[3565,3565],[3564,3564]]],[1588846207572,["Wahaha@DESKTOP-HTU2IVD",[[-1,3564,"\n"]],[3564,3564],[3563,3563]]],[1588846209537,["Wahaha@DESKTOP-HTU2IVD",[[-1,3579,"\n"]],[3579,3579],[3578,3578]]],[1588846212357,["Wahaha@DESKTOP-HTU2IVD",[[1,3559,"："]],[3559,3559],[3560,3560]]],[1588846219009,["Wahaha@DESKTOP-HTU2IVD",[[1,3585,"- "]],[3585,3585],[3587,3587]]],[1588846220312,["Wahaha@DESKTOP-HTU2IVD",[[-1,3585,"- "]],[3587,3587],[3585,3585]]],[1588846221840,["Wahaha@DESKTOP-HTU2IVD",[[1,3585," - "]],[3585,3585],[3588,3588]]],[1588846229115,["Wahaha@DESKTOP-HTU2IVD",[[1,3194,"  - \n"]],[3193,3193],[3198,3198]]],[1588846230649,["Wahaha@DESKTOP-HTU2IVD",[[-1,3195," - "]],[3198,3198],[3195,3195]]],[1588846231360,["Wahaha@DESKTOP-HTU2IVD",[[1,3195,"获取当前的线程的值通过get(),设置set(T) 方式来设置值。"]],[3195,3195],[3228,3228]]],[1588846243436,["Wahaha@DESKTOP-HTU2IVD",[[1,3623,"#### 解决get()返回null问题"]],[3623,3623],[3643,3643]]],[1588846246249,["Wahaha@DESKTOP-HTU2IVD",[[-1,3623,"####"]],[3623,3627],[3623,3623]]],[1588846252587,["Wahaha@DESKTOP-HTU2IVD",[[1,3640,"通过继承重写initialValue()方法即可。"]],[3640,3640],[3665,3665]]],[1588846260270,["Wahaha@DESKTOP-HTU2IVD",[[1,3646,"\n"]],[3646,3646],[3647,3647]]],[1588846261800,["Wahaha@DESKTOP-HTU2IVD",[[-1,3646,"\n"]],[3647,3647],[3646,3646]]],[1588846263665,["Wahaha@DESKTOP-HTU2IVD",[[1,3666,"\n"]],[3665,3665],[3666,3666]]],[1588846265473,["Wahaha@DESKTOP-HTU2IVD",[[-1,3666,"\n"],[1,3667,"·"]],[3666,3666],[3667,3667]]],[1588846266113,["Wahaha@DESKTOP-HTU2IVD",[[1,3667,"··"]],[3667,3667],[3669,3669]]],[1588846267305,["Wahaha@DESKTOP-HTU2IVD",[[-1,3667,"··"]],[3669,3669],[3667,3667]]],[1588846267958,["Wahaha@DESKTOP-HTU2IVD",[[-1,3666,"·"],[1,3667,"\n"]],[3667,3667],[3666,3666]]],[1588846268585,["Wahaha@DESKTOP-HTU2IVD",[[-1,3666,"\n"],[1,3667,"`"]],[3666,3666],[3667,3667]]],[1588846269007,["Wahaha@DESKTOP-HTU2IVD",[[1,3667,"``"]],[3667,3667],[3669,3669]]],[1588846269043,["Wahaha@DESKTOP-HTU2IVD",[[1,3669,"language\n```\n"]],[3669,3669],[3669,3677]]],[1588846269434,["Wahaha@DESKTOP-HTU2IVD",[[-1,3669,"language"],[1,3677,"\n"]],[3669,3677],[3670,3670]]],[1588846270661,["Wahaha@DESKTOP-HTU2IVD",[[1,3670,"public class ThreadLocalExt extends ThreadLocal{ static ThreadLocalExt threadLocalExt = new ThreadLocalExt(); @Override protected Object initialValue() { return \"Java小咖秀\"; } public static void main(String[] args) { System.out.println(threadLocalExt.get()); } }\n\n作者：java小咖秀\n链接：https://juejin.im/post/5eaecf326fb9a043856f33d5\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[3670,3670],[4034,4034]]],[1588846271996,["Wahaha@DESKTOP-HTU2IVD",[[-1,3670,"public class ThreadLocalExt extends ThreadLocal{ static ThreadLocalExt threadLocalExt = new ThreadLocalExt(); @Override protected Object initialValue() { return \"Java小咖秀\"; } public static void main(String[] args) { System.out.println(threadLocalExt.get()); } }\n\n作者：java小咖秀\n链接：https://juejin.im/post/5eaecf326fb9a043856f33d5\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[4034,4034],[3670,3670]]],[1588846279577,["Wahaha@DESKTOP-HTU2IVD",[[1,3675,"\n"]],[3674,3674],[3675,3675]]],[1588846280048,["Wahaha@DESKTOP-HTU2IVD",[[1,3676,"\n"]],[3675,3675],[3676,3676]]],[1588846280343,["Wahaha@DESKTOP-HTU2IVD",[[1,3676,"public class ThreadLocalExt extends ThreadLocal{ static ThreadLocalExt threadLocalExt = new ThreadLocalExt(); @Override protected Object initialValue() { return \"Java小咖秀\"; } public static void main(String[] args) { System.out.println(threadLocalExt.get()); } }\n\n作者：java小咖秀\n链接：https://juejin.im/post/5eaecf326fb9a043856f33d5\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[3676,3676],[4040,4040]]],[1588846288689,["Wahaha@DESKTOP-HTU2IVD",[[1,3724,"\n\n   "],[1,3785,"\n\n   "],[1,3795,"\n   "],[1,3829,"\n       "],[1,3847,"\n   "],[1,3849,"\n\n   "],[1,3890,"\n       "],[1,3932,"\n  "],[-1,3933,"}"],[1,3937,"}"],[-1,3938,"作者：java小咖秀"],[-1,3949,"链接：https://juejin.im/post/5eaecf326fb9a043856f33d5\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[3676,4040],[3981,3981]]],[1588846293431,["Wahaha@DESKTOP-HTU2IVD",[[-1,3676,"public class ThreadLocalExt extends ThreadLocal{\n\n    static ThreadLocalExt threadLocalExt = new ThreadLocalExt();\n\n    @Override\n    protected Object initialValue() {\n        return \"Java小咖秀\";\n    }\n\n    public static void main(String[] args) {\n        System.out.println(threadLocalExt.get());\n    }\n}"]],[3676,3979],[3676,3676]]],[1588846295792,["Wahaha@DESKTOP-HTU2IVD",[[1,3670,"public class ThreadLocalExt extends ThreadLocal{\n\n    static ThreadLocalExt threadLocalExt = new ThreadLocalExt();\n\n    @Override\n    protected Object initialValue() {\n        return \"Java小咖秀\";\n    }\n\n    public static void main(String[] args) {\n        System.out.println(threadLocalExt.get());\n    }\n}"]],[3670,3670],[3973,3973]]],[1588846300377,["Wahaha@DESKTOP-HTU2IVD",[[1,3670,"  "],[1,3719,"  "],[1,3720,"  "],[1,3785,"  "],[1,3786,"  "],[1,3800,"  "],[1,3838," "],[1,3846," "],[1,3868,"  "],[1,3870,"  "],[1,3871,"  "],[1,3924,"  "],[1,3970,"  "],[1,3972,"  "]],[3670,3973],[3670,3999]]],[1588846306203,["Wahaha@DESKTOP-HTU2IVD",[[-1,3868,"Java小咖秀"],[1,3875,"线程"]],[3868,3868],[3870,3870]]],[1588846307336,["Wahaha@DESKTOP-HTU2IVD",[[1,3870,"学习"]],[3870,3870],[3872,3872]]],[1588846310894,["Wahaha@DESKTOP-HTU2IVD",[[1,4001," "]],[4001,4001],[4000,4002]]],[1588846311359,["Wahaha@DESKTOP-HTU2IVD",[[1,4000,"pri"]],[4000,4000],[4003,4003]]],[1588846312643,["Wahaha@DESKTOP-HTU2IVD",[[-1,4000,"pri"]],[4003,4003],[4000,4000]]],[1588846313193,["Wahaha@DESKTOP-HTU2IVD",[[1,4001,"\n"]],[4000,4000],[4001,4001]]],[1588846316726,["Wahaha@DESKTOP-HTU2IVD",[[1,4001,"print:"]],[4001,4001],[4007,4007]]],[1588846317076,["Wahaha@DESKTOP-HTU2IVD",[[1,4008,"\n"]],[4007,4007],[4008,4008]]],[1588846319117,["Wahaha@DESKTOP-HTU2IVD",[[1,4008,"```"]],[4008,4008],[4011,4011]]],[1588846319150,["Wahaha@DESKTOP-HTU2IVD",[[1,4011,"language\n```\n"]],[4011,4011],[4011,4019]]],[1588846319516,["Wahaha@DESKTOP-HTU2IVD",[[-1,4011,"language"],[1,4019,"\n"]],[4011,4019],[4012,4012]]],[1588846330758,["Wahaha@DESKTOP-HTU2IVD",[[1,4012,"  线程学习"]],[4012,4012],[4018,4018]]]],null,"Wahaha@DESKTOP-HTU2IVD"],["97eaa95c-609a-4955-91f1-61ce10c34ed5",1588924147875,"# java面试题\n\n### 线程相关\n#### 1. 什么是进程\n进程是系统中正在运行的一个程序，程序一旦运行就是进程\n#### 2. 什么是线程\n是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务\n#### 3. 线程实现的方式\n  - 继承Thread类\n  - 实现runable接口\n  - 实现callable接口\n#### 4. Thread 类中的start() 和 run() 方法有什么区别?\n - start(): start方法来启动线程，真正实现了多线程运行，这时无需等待run方法体中的代码执行完毕而直接继续执行后续的代码。通过调用Thread类的 start()方法来启动一个线程，这时此线程处于就绪（可运行）状态，并没有运行，一旦得到cpu时间片，就开始执行run()方法，这里的run()方法 称为线程体，它包含了要执行的这个线程的内容，Run方法运行结束，此线程随即终止。\n - run(): run()方法只是类的一个普通方法而已，如果直接调用Run方法，程序中依然只有主线程这一个线程，其程序执行路径还是只有一条，还是要顺序执行，还是要等待run方法体执行完毕后才可继续执行下面的代码，这样就没有达到写线程的目的。\n - 调用start方法方可启动线程，而run方法只是thread类中的一个普通方法调用，还是在主线程里执行。\n#### 5. 线程的五种状态\n - 新建状态(NEW) 新建一个了线程\n - 可运行状态(RUNNABLE) 线程对象创建后，其他线程调用此对象的start()方法，该状态的线程位于可运行线程池中，等待被线程调度选中，获取cpu 的使用权 。\n - 运行(RUNNING)：可运行状态(runnable)的线程获得了cpu 时间片（timeslice）执行程序代码\n - 阻塞(BLOCKED)：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种：\n   + 等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。\n   + 同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。\n   + 其他阻塞：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。\n  - 死亡(DEAD)：线程run()、main() 方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生\n####  6. 如何知道代码段被哪个线程调用\n```\nSystem.out.println(Thread.currentThread().getName());\n```\n#### 7. sleep()方法\n方法sleep()的作用是在指定的毫秒数内让当前的“正在执行的线程”休眠（暂停执行\n#### 8. 停止线程\n1. run方法执行完成，自然终止。\n2. stop()方法，suspend()以及resume()都是过期作废方法，使用它们结果不可预期。\n\n大多数停止一个线程的操作使用Thread.interrupt()等于说给线程打一个停止的标记, 此方法不回去终止一个正\n在运行的线程，需要加入一个判断才能可以完成线程的停止\n#### 9. interrupted 和 isInterrupted\n\ninterrupted : 判断当前线程是否已经中断,会清除状态。\n\nisInterrupted ：判断线程是否已经中断，不会清除状态。\n\n#### 10.yield\n放弃当前cpu资源，将它让给其他的任务占用cpu执行时间。但放弃的时间不确定，有可能刚刚放弃，马上又获得cpu时间片\n\n#### 11.设置线程上下文类加载器\n1.  获取线程上下文类加载器\n```\nSystem.out.println(Thread.currentThread().getName());\n```\n2. ​ 设置线程类加载器（可以打破Java类加载器的父类委托机制）\n```\npublic  void  setContextClassLoader(ClassLoader cl)\n```\n\n#### 12. join\n join是指把指定的线程加入到当前线程，比如join某个线程a,会让当前线程b进入等待,直到a的生命周期结束，此期间b线程是处于blocked状态。\n\n#### 13. 什么是synchronized?\nsynchronized关键字可以时间一个简单的策略来防止线程干扰和内存一致性错误，如果一个对象是对多个线程可见的，那么对该对想的所有读写都将通过同步的方式来进行。\n\n#### 14. synchronized包括哪两个jvm重要的指令？\n monitor enter 和 monitor exit\n \n#### 15. synchronized关键字用法?\n 可以用于对代码块或方法的修饰\n \n#### 16. synchronized锁的是什么?\n普通同步方法 —————> 锁的是当前实力对象。\n\n静态同步方法—————> 锁的是当前类的Class对象。\n\n同步方法块 —————> 锁的是synchonized括号里配置的对象。\n\n#### 17. volatile关键字\nvolatile 是轻量级的synchronized,它在多处理器开发中保证了共享变量的“可见性“。\n\nJava允许线程访问共享变量，为了保证共享变量能准确和一致的更新，线程应该确保排它锁单独获得这个变量。如果一个字段被声明为volatile,Java线程内存模型所有线程看到这个变量的值是一致的。\n\n#### 18. 等待/通知机制\n一个线程修改了一个对象的值，而另一个线程感知到了变化，然后进行相应的操作。\n 等待\n```\n  synchronized(obj) { \n       while(条件不满足) { \n             obj.wait();\n           } \n         执行对应逻辑 \n  }\n```\n\n通知\n```\n  synchronized(obj){\n        改变条件\n            obj.notifyAll();\n\n  }\n```\n\n#### 19. notify\nnotify()也是Object类的通用方法，也要在同步方法或同步代码块内调用，该方法用来通知哪些可能灯光对象的对象锁的其他线程，如果有多个线程等待，则随机挑选出其中一个呈wait状态的线程，对其发出 通知 notify，并让它等待获取该对象的对象锁。\n\n#### 20. notify/notifyAll\nnotify等于说将等待队列中的一个线程移动到同步队列中，而notifyAll是将等待队列中的所有线程全部移动到同步队列中。\n\n#### 21.ThreadLocal\n\n主要解决每一个线程想绑定自己的值，存放线程的私有数据。\n  - ThreadLocal使用\n 获取当前的线程的值通过get(),设置set(T) 方式来设置值。\n```\n  public class XKThreadLocal {\n  \n      public static ThreadLocal threadLocal = new ThreadLocal();\n  \n      public static void main(String[] args) {\n          if (threadLocal.get() == null) {\n              System.out.println(\"未设置过值\");\n              threadLocal.set(\"线程学习\");\n          }\n          System.out.println(threadLocal.get());\n      }\n  \n  }\n```\n  print：\n```\n  未设置过值\n  线程学习\n```\n\n -  解决get()返回null问题\n通过继承重写initialValue()方法即可。\n```\n  public class ThreadLocalExt extends ThreadLocal{\n  \n      static ThreadLocalExt threadLocalExt = new ThreadLocalExt();\n  \n      @Override\n      protected Object initialValue() {\n          return \"线程学习\";\n      }\n  \n      public static void main(String[] args) {\n          System.out.println(threadLocalExt.get());\n      }\n  }\n```\nprint:\n```\n  线程学习\n```\n\n \n\n\n\n",[[1588924109210,["Wahaha@DESKTOP-HTU2IVD",[[1,4026,"#### lock接口"]],[4026,4026],[4037,4037]]],[1588924126791,["Wahaha@DESKTOP-HTU2IVD",[[1,4040,"\n"]],[4037,4037],[4038,4038]]],[1588924145022,["Wahaha@DESKTOP-HTU2IVD",[[1,4038,"锁可以防止多个线程同时共享资源。"]],[4038,4038],[4054,4054]]],[1588924162967,["Wahaha@DESKTOP-HTU2IVD",[[1,4054,"Java5前程序是靠synchronized实现锁功能。Java5之后，并发包新增Lock接口来实现锁功能。"]],[4054,4054],[4108,4108]]],[1588924165332,["Wahaha@DESKTOP-HTU2IVD",[[1,4111,"\n"]],[4108,4108],[4109,4109]]],[1588924168170,["Wahaha@DESKTOP-HTU2IVD",[[1,4031,"22."]],[4031,4031],[4034,4034]]],[1588924215484,["Wahaha@DESKTOP-HTU2IVD",[[1,4113,"#### LOCK"]],[4113,4113],[4122,4122]]],[1588924216584,["Wahaha@DESKTOP-HTU2IVD",[[-1,4118,"LOCK"]],[4122,4122],[4118,4118]]],[1588924239803,["Wahaha@DESKTOP-HTU2IVD",[[1,4118,"lock接口提供synchronized不具备的主要特性"]],[4118,4118],[4146,4146]]],[1588924240970,["Wahaha@DESKTOP-HTU2IVD",[[1,4148,"\n"]],[4146,4146],[4147,4147]]],[1588924246204,["Wahaha@DESKTOP-HTU2IVD",[[1,4149,"\n"]],[4147,4147],[4148,4148]]],[1588924255467,["Wahaha@DESKTOP-HTU2IVD",[[1,4148,"特性| miao"]],[4148,4148],[4156,4156]]],[1588924256730,["Wahaha@DESKTOP-HTU2IVD",[[-1,4151," miao"]],[4156,4156],[4151,4151]]],[1588924258890,["Wahaha@DESKTOP-HTU2IVD",[[1,4151,"描述"]],[4151,4151],[4153,4153]]],[1588924259907,["Wahaha@DESKTOP-HTU2IVD",[[1,4155,"\n"]],[4153,4153],[4154,4154]]],[1588924264767,["Wahaha@DESKTOP-HTU2IVD",[[1,4154,"---|"]],[4154,4154],[4158,4158]]],[1588924267276,["Wahaha@DESKTOP-HTU2IVD",[[1,4159,"--"]],[4159,4159],[4161,4161]]],[1588924268616,["Wahaha@DESKTOP-HTU2IVD",[[1,4162,"   |   \n"]],[4161,4161],[4162,4165]]],[1588924282704,["Wahaha@DESKTOP-HTU2IVD",[[1,4164,"chang"]],[4164,4164],[4169,4169]]],[1588924283914,["Wahaha@DESKTOP-HTU2IVD",[[-1,4164,"chang"]],[4169,4169],[4164,4164]]],[1588924296610,["Wahaha@DESKTOP-HTU2IVD",[[1,4164,"尝试非阻塞地获取锁"]],[4164,4164],[4173,4173]]],[1588924322359,["Wahaha@DESKTOP-HTU2IVD",[[1,4178,"当前线程尝试获取锁，如果"]],[4178,4178],[4190,4190]]],[1588924324704,["Wahaha@DESKTOP-HTU2IVD",[[1,4189,"这一"],[1,4190," "]],[4189,4189],[4191,4191]]],[1588924325672,["Wahaha@DESKTOP-HTU2IVD",[[-1,4189,"这一"]],[4191,4191],[4189,4189]]],[1588924386803,[null,[[-1,4158,"\n"],[1,4159,"-"],[1,4192,"\n"]],[4158,4158],[4193,4193]]],[1588924386803,[null,[[1,4158,"\n"],[-1,4158,"-"],[-1,4192,"\n"]],[4193,4193],[4158,4158]]],[1588924351661,["Wahaha@DESKTOP-HTU2IVD",[[1,4190,"这一时刻锁没有被其他线程获取到，责成"]],[4190,4190],[4208,4208]]],[1588924352377,["Wahaha@DESKTOP-HTU2IVD",[[-1,4206,"责成"]],[4208,4208],[4206,4206]]],[1588924366938,["Wahaha@DESKTOP-HTU2IVD",[[1,4206,"则成功获取并持有该锁\n  "]],[4206,4206],[4219,4219]]],[1588924383239,["Wahaha@DESKTOP-HTU2IVD",[[1,4220,"|   \n   "]],[4216,4216],[4217,4220]]],[1588924446807,[null,[[-1,4158,"\n"],[1,4159,"-"],[1,4229,"\n"]],[4158,4158],[4230,4230]]],[1588924446807,[null,[[1,4158,"\n"],[-1,4158,"-"],[-1,4229,"\n"]],[4230,4230],[4158,4158]]],[1588924390256,["Wahaha@DESKTOP-HTU2IVD",[[-1,4218,"  "]],[4217,4217],[4216,4218]]],[1588924391518,["Wahaha@DESKTOP-HTU2IVD",[[1,4216,"能被"]],[4216,4216],[4218,4218]]],[1588924392734,["Wahaha@DESKTOP-HTU2IVD",[[-1,4216,"能被"]],[4218,4218],[4216,4216]]],[1588924401050,["Wahaha@DESKTOP-HTU2IVD",[[1,4218,"能被中断的获取锁"]],[4218,4218],[4226,4226]]],[1588924428267,["Wahaha@DESKTOP-HTU2IVD",[[1,4230,"与synchronized不同，获取到所得"]],[4230,4230],[4251,4251]]],[1588924428926,["Wahaha@DESKTOP-HTU2IVD",[[-1,4249,"所得"]],[4251,4251],[4249,4249]]],[1588924443579,["Wahaha@DESKTOP-HTU2IVD",[[1,4249,"锁的线程能够响应中断"]],[4249,4249],[4259,4259]]],[1588924506802,[null,[[-1,4158,"\n"],[1,4159,"-"],[1,4264,"\n"]],[4158,4158],[4265,4265]]],[1588924506802,[null,[[1,4158,"\n"],[-1,4158,"-"],[-1,4264,"\n"]],[4265,4265],[4158,4158]]],[1588924467115,["Wahaha@DESKTOP-HTU2IVD",[[1,4259,"，当获取到锁的线程被中断是"]],[4259,4259],[4272,4272]]],[1588924468214,["Wahaha@DESKTOP-HTU2IVD",[[-1,4271,"是"]],[4272,4272],[4271,4271]]],[1588924469312,["Wahaha@DESKTOP-HTU2IVD",[[1,4271,"是"]],[4271,4271],[4272,4272]]],[1588924470909,["Wahaha@DESKTOP-HTU2IVD",[[-1,4271,"是"]],[4272,4272],[4271,4271]]],[1588924483128,["Wahaha@DESKTOP-HTU2IVD",[[1,4271,"时，中断日常"]],[4271,4271],[4277,4277]]],[1588924484674,["Wahaha@DESKTOP-HTU2IVD",[[-1,4275,"日常"]],[4277,4277],[4275,4275]]],[1588924497492,["Wahaha@DESKTOP-HTU2IVD",[[1,4275,"异常将会抛出，通知"]],[4275,4275],[4284,4284]]],[1588924498062,["Wahaha@DESKTOP-HTU2IVD",[[-1,4282,"通知"]],[4284,4284],[4282,4282]]],[1588924506176,["Wahaha@DESKTOP-HTU2IVD",[[1,4282,"同时锁会被释放"]],[4282,4282],[4289,4289]]],[1588924566806,[null,[[-1,4158,"\n"],[1,4159,"-"],[1,4294,"\n"]],[4158,4158],[4295,4295]]],[1588924566806,[null,[[1,4158,"\n"],[-1,4158,"-"],[-1,4294,"\n"]],[4295,4295],[4158,4158]]],[1588924507405,["Wahaha@DESKTOP-HTU2IVD",[[1,4293,"|   \n   "]],[4289,4289],[4290,4293]]],[1588924511516,["Wahaha@DESKTOP-HTU2IVD",[[-1,4291,"  "]],[4290,4290],[4289,4291]]],[1588924512464,["Wahaha@DESKTOP-HTU2IVD",[[1,4289,"吃屎"]],[4289,4289],[4291,4291]]],[1588924513682,["Wahaha@DESKTOP-HTU2IVD",[[-1,4288,"放吃屎"]],[4291,4291],[4288,4288]]],[1588924515371,["Wahaha@DESKTOP-HTU2IVD",[[1,4288,"放"]],[4288,4288],[4289,4289]]],[1588924518516,["Wahaha@DESKTOP-HTU2IVD",[[1,4291,"吃屎"]],[4291,4291],[4293,4293]]],[1588924519454,["Wahaha@DESKTOP-HTU2IVD",[[-1,4291,"吃屎"]],[4293,4293],[4291,4291]]],[1588924523710,["Wahaha@DESKTOP-HTU2IVD",[[1,4291,"超时获取锁"]],[4291,4291],[4296,4296]]],[1588924556040,["Wahaha@DESKTOP-HTU2IVD",[[1,4300,"在指定时间内获取锁，如果届时"]],[4300,4300],[4314,4314]]],[1588924557158,["Wahaha@DESKTOP-HTU2IVD",[[-1,4312,"届时"]],[4314,4314],[4312,4312]]],[1588924566081,["Wahaha@DESKTOP-HTU2IVD",[[1,4312,"截止时间没有获取到锁"]],[4312,4312],[4322,4322]]],[1588924626808,[null,[[-1,4158,"\n"],[1,4159,"-"],[1,4327,"\n"]],[4158,4158],[4328,4328]]],[1588924626808,[null,[[1,4158,"\n"],[-1,4158,"-"],[-1,4327,"\n"]],[4328,4328],[4158,4158]]],[1588924569519,["Wahaha@DESKTOP-HTU2IVD",[[1,4322,"则重视"]],[4322,4322],[4325,4325]]],[1588924570253,["Wahaha@DESKTOP-HTU2IVD",[[-1,4323,"重视"]],[4325,4325],[4323,4323]]],[1588924573210,["Wahaha@DESKTOP-HTU2IVD",[[1,4323,"中止"]],[4323,4323],[4325,4325]]],[1588924581315,["Wahaha@DESKTOP-HTU2IVD",[[-1,4322,"则中止"]],[4322,4325],[4322,4322]]],[1588924588308,["Wahaha@DESKTOP-HTU2IVD",[[1,4316,"仍"]],[4316,4316],[4317,4317]]],[1588924597796,["Wahaha@DESKTOP-HTU2IVD",[[1,4323,"，则返回"]],[4323,4323],[4327,4327]]],[1588924626662,["Wahaha@DESKTOP-HTU2IVD",[[1,4118,"23"]],[4118,4118],[4120,4120]]],[1588924686811,[null,[[-1,4160,"\n"],[1,4161,"-"],[1,4334,"\n"]],[4160,4160],[4335,4335]]],[1588924686811,[null,[[1,4160,"\n"],[-1,4160,"-"],[-1,4334,"\n"]],[4335,4335],[4160,4160]]],[1588924627154,["Wahaha@DESKTOP-HTU2IVD",[[1,4120,"."]],[4120,4120],[4121,4121]]],[1588924629826,["Wahaha@DESKTOP-HTU2IVD",[[-1,4335,"\n"],[1,4336,"#"]],[4335,4335],[4336,4336]]],[1588924632524,["Wahaha@DESKTOP-HTU2IVD",[[1,4336,"###３４"]],[4336,4336],[4341,4341]]],[1588924633654,["Wahaha@DESKTOP-HTU2IVD",[[-1,4339,"３４"]],[4341,4341],[4339,4339]]],[1588924639003,["Wahaha@DESKTOP-HTU2IVD",[[1,4339,"　24. ch"]],[4339,4339],[4346,4346]]],[1588924640710,["Wahaha@DESKTOP-HTU2IVD",[[-1,4338,"#　24. ch"]],[4346,4346],[4338,4338]]],[1588924644440,["Wahaha@DESKTOP-HTU2IVD",[[1,4338,"# cho"]],[4338,4338],[4343,4343]]],[1588924645314,["Wahaha@DESKTOP-HTU2IVD",[[-1,4340,"cho"]],[4343,4343],[4340,4340]]],[1588924664336,["Wahaha@DESKTOP-HTU2IVD",[[1,4340,"24.重入锁Reen="]],[4340,4340],[4351,4351]]],[1588924664970,["Wahaha@DESKTOP-HTU2IVD",[[-1,4348,"en="]],[4351,4351],[4348,4348]]],[1588924671619,["Wahaha@DESKTOP-HTU2IVD",[[1,4348,"nntrantl"]],[4348,4348],[4356,4356]]],[1588924672142,["Wahaha@DESKTOP-HTU2IVD",[[-1,4355,"l"]],[4356,4356],[4355,4355]]],[1588924673507,["Wahaha@DESKTOP-HTU2IVD",[[1,4355,"Lock "]],[4355,4355],[4360,4360]]],[1588924673914,["Wahaha@DESKTOP-HTU2IVD",[[1,4360,"\n\n"]],[4360,4360],[4361,4361]]]],null,"Wahaha@DESKTOP-HTU2IVD"],["76b36cda-23ef-42b4-952c-37b189eeba55",1589880378386,"# java面试题\n\n### 线程相关\n#### 1. 什么是进程\n进程是系统中正在运行的一个程序，程序一旦运行就是进程\n#### 2. 什么是线程\n是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务\n#### 3. 线程实现的方式\n  - 继承Thread类\n  - 实现runable接口\n  - 实现callable接口\n#### 4. Thread 类中的start() 和 run() 方法有什么区别?\n - start(): start方法来启动线程，真正实现了多线程运行，这时无需等待run方法体中的代码执行完毕而直接继续执行后续的代码。通过调用Thread类的 start()方法来启动一个线程，这时此线程处于就绪（可运行）状态，并没有运行，一旦得到cpu时间片，就开始执行run()方法，这里的run()方法 称为线程体，它包含了要执行的这个线程的内容，Run方法运行结束，此线程随即终止。\n - run(): run()方法只是类的一个普通方法而已，如果直接调用Run方法，程序中依然只有主线程这一个线程，其程序执行路径还是只有一条，还是要顺序执行，还是要等待run方法体执行完毕后才可继续执行下面的代码，这样就没有达到写线程的目的。\n - 调用start方法方可启动线程，而run方法只是thread类中的一个普通方法调用，还是在主线程里执行。\n#### 5. 线程的五种状态\n - 新建状态(NEW) 新建一个了线程\n - 可运行状态(RUNNABLE) 线程对象创建后，其他线程调用此对象的start()方法，该状态的线程位于可运行线程池中，等待被线程调度选中，获取cpu 的使用权 。\n - 运行(RUNNING)：可运行状态(runnable)的线程获得了cpu 时间片（timeslice）执行程序代码\n - 阻塞(BLOCKED)：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种：\n   + 等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。\n   + 同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。\n   + 其他阻塞：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。\n  - 死亡(DEAD)：线程run()、main() 方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生\n####  6. 如何知道代码段被哪个线程调用\n```\nSystem.out.println(Thread.currentThread().getName());\n```\n#### 7. sleep()方法\n方法sleep()的作用是在指定的毫秒数内让当前的“正在执行的线程”休眠（暂停执行\n#### 8. 停止线程\n1. run方法执行完成，自然终止。\n2. stop()方法，suspend()以及resume()都是过期作废方法，使用它们结果不可预期。\n\n大多数停止一个线程的操作使用Thread.interrupt()等于说给线程打一个停止的标记, 此方法不回去终止一个正\n在运行的线程，需要加入一个判断才能可以完成线程的停止\n#### 9. interrupted 和 isInterrupted\n\ninterrupted : 判断当前线程是否已经中断,会清除状态。\n\nisInterrupted ：判断线程是否已经中断，不会清除状态。\n\n#### 10.yield\n放弃当前cpu资源，将它让给其他的任务占用cpu执行时间。但放弃的时间不确定，有可能刚刚放弃，马上又获得cpu时间片\n\n#### 11.设置线程上下文类加载器\n1.  获取线程上下文类加载器\n```\nSystem.out.println(Thread.currentThread().getName());\n```\n2. ​ 设置线程类加载器（可以打破Java类加载器的父类委托机制）\n```\npublic  void  setContextClassLoader(ClassLoader cl)\n```\n\n#### 12. join\n join是指把指定的线程加入到当前线程，比如join某个线程a,会让当前线程b进入等待,直到a的生命周期结束，此期间b线程是处于blocked状态。\n\n#### 13. 什么是synchronized?\nsynchronized关键字可以时间一个简单的策略来防止线程干扰和内存一致性错误，如果一个对象是对多个线程可见的，那么对该对想的所有读写都将通过同步的方式来进行。\n\n#### 14. synchronized包括哪两个jvm重要的指令？\n monitor enter 和 monitor exit\n \n#### 15. synchronized关键字用法?\n 可以用于对代码块或方法的修饰\n \n#### 16. synchronized锁的是什么?\n普通同步方法 —————> 锁的是当前实力对象。\n\n静态同步方法—————> 锁的是当前类的Class对象。\n\n同步方法块 —————> 锁的是synchonized括号里配置的对象。\n\n#### 17. volatile关键字\nvolatile 是轻量级的synchronized,它在多处理器开发中保证了共享变量的“可见性“。\n\nJava允许线程访问共享变量，为了保证共享变量能准确和一致的更新，线程应该确保排它锁单独获得这个变量。如果一个字段被声明为volatile,Java线程内存模型所有线程看到这个变量的值是一致的。\n\n#### 18. 等待/通知机制\n一个线程修改了一个对象的值，而另一个线程感知到了变化，然后进行相应的操作。\n 等待\n```\n  synchronized(obj) { \n       while(条件不满足) { \n             obj.wait();\n           } \n         执行对应逻辑 \n  }\n```\n\n通知\n```\n  synchronized(obj){\n        改变条件\n            obj.notifyAll();\n\n  }\n```\n\n#### 19. notify\nnotify()也是Object类的通用方法，也要在同步方法或同步代码块内调用，该方法用来通知哪些可能灯光对象的对象锁的其他线程，如果有多个线程等待，则随机挑选出其中一个呈wait状态的线程，对其发出 通知 notify，并让它等待获取该对象的对象锁。\n\n#### 20. notify/notifyAll\nnotify等于说将等待队列中的一个线程移动到同步队列中，而notifyAll是将等待队列中的所有线程全部移动到同步队列中。\n\n#### 21.ThreadLocal\n\n主要解决每一个线程想绑定自己的值，存放线程的私有数据。\n  - ThreadLocal使用\n 获取当前的线程的值通过get(),设置set(T) 方式来设置值。\n```\n  public class XKThreadLocal {\n  \n      public static ThreadLocal threadLocal = new ThreadLocal();\n  \n      public static void main(String[] args) {\n          if (threadLocal.get() == null) {\n              System.out.println(\"未设置过值\");\n              threadLocal.set(\"线程学习\");\n          }\n          System.out.println(threadLocal.get());\n      }\n  \n  }\n```\n  print：\n```\n  未设置过值\n  线程学习\n```\n\n -  解决get()返回null问题\n通过继承重写initialValue()方法即可。\n```\n  public class ThreadLocalExt extends ThreadLocal{\n  \n      static ThreadLocalExt threadLocalExt = new ThreadLocalExt();\n  \n      @Override\n      protected Object initialValue() {\n          return \"线程学习\";\n      }\n  \n      public static void main(String[] args) {\n          System.out.println(threadLocalExt.get());\n      }\n  }\n```\nprint:\n```\n  线程学习\n```\n\n \n#### 22.lock接口\n锁可以防止多个线程同时共享资源。Java5前程序是靠synchronized实现锁功能。Java5之后，并发包新增Lock接口来实现锁功能。\n\n#### 23.lock接口提供synchronized不具备的主要特性\n\n特性|描述\n---|---\n  尝试非阻塞地获取锁 |   当前线程尝试获取锁，如果这一时刻锁没有被其他线程获取到，则成功获取并持有该锁\n 能被中断的获取锁|   与synchronized不同，获取到锁的线程能够响应中断，当获取到锁的线程被中断时，中断异常将会抛出，同时锁会被释放\n 超时获取锁|   在指定时间内获取锁，如果截止时间仍没有获取到锁，则返回\n   \n#### 24.重入锁RenntrantLock \n\n",[[1589880332799,["Wahaha@DESKTOP-HTU2IVD",[[1,4362,"\n"]],[4360,4360],[4361,4361]]],[1589880332927,["Wahaha@DESKTOP-HTU2IVD",[[1,4363,"\n"]],[4361,4361],[4362,4362]]],[1589880333102,["Wahaha@DESKTOP-HTU2IVD",[[1,4364,"\n"]],[4362,4362],[4363,4363]]],[1589880333278,["Wahaha@DESKTOP-HTU2IVD",[[1,4365,"\n"]],[4363,4363],[4364,4364]]],[1589880333445,["Wahaha@DESKTOP-HTU2IVD",[[1,4366,"\n"]],[4364,4364],[4365,4365]]],[1589880333598,["Wahaha@DESKTOP-HTU2IVD",[[1,4367,"\n"]],[4365,4365],[4366,4366]]],[1589880333778,["Wahaha@DESKTOP-HTU2IVD",[[1,4368,"\n"]],[4366,4366],[4367,4367]]],[1589880345610,["Wahaha@DESKTOP-HTU2IVD",[[1,4362,"1. 支持重进入的锁，它表示该锁能够支持一个线程对资源的重复加锁。除此之外，该锁的还支持获取锁时的公平和非公平性选择。"]],[4362,4362],[4421,4421]]],[1589880363117,["Wahaha@DESKTOP-HTU2IVD",[[1,4422,"2. \n"]],[4421,4421],[4425,4425]]],[1589880364478,["Wahaha@DESKTOP-HTU2IVD",[[1,4425,"重进入是指任意线程在获取到锁之后能够再次获锁而不被锁阻塞。\n\n该特性主要解决以下两个问题：\n\n一、锁需要去识别获取锁的线程是否为当前占据锁的线程，如果是则再次成功获取。\n\n二、所得最终释放。线程重复n次是获取了锁，随后在第n次释放该锁后，其他线程能够获取到该锁。\n\n作者：java小咖秀\n链接：https://juejin.im/post/5eaecf326fb9a043856f33d5\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[4425,4425],[4660,4660]]],[1589880370177,["Wahaha@DESKTOP-HTU2IVD",[[-1,4558,"作者：java小咖秀\n链接：https://juejin.im/post/5eaecf326fb9a043856f33d5\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[4558,4660],[4558,4558]]],[1589880375310,["Wahaha@DESKTOP-HTU2IVD",[[-1,4455,"\n"]],[4456,4456],[4455,4455]]],[1589880382200,["Wahaha@DESKTOP-HTU2IVD",[[-1,4471,"一、"],[1,4473,"="]],[4471,4471],[4472,4472]]],[1589880382744,["Wahaha@DESKTOP-HTU2IVD",[[-1,4471,"="]],[4472,4472],[4471,4471]]],[1589880383152,["Wahaha@DESKTOP-HTU2IVD",[[-1,4470,"\n"]],[4471,4471],[4470,4470]]],[1589880384632,["Wahaha@DESKTOP-HTU2IVD",[[1,4470,"- "]],[4470,4470],[4472,4472]]],[1589880387300,["Wahaha@DESKTOP-HTU2IVD",[[-1,4509,"二、"]],[4509,4511],[4509,4509]]],[1589880387963,["Wahaha@DESKTOP-HTU2IVD",[[-1,4508,"\n"]],[4509,4509],[4508,4508]]],[1589880389230,["Wahaha@DESKTOP-HTU2IVD",[[1,4508,"- "]],[4508,4508],[4510,4510]]],[1589880391942,["Wahaha@DESKTOP-HTU2IVD",[[1,4470,"  "],[1,4508,"  "]],[4470,4554],[4470,4558]]],[1589880402482,["Wahaha@DESKTOP-HTU2IVD",[[-1,4470,"  "]],[4472,4472],[4470,4470]]],[1589880403229,["Wahaha@DESKTOP-HTU2IVD",[[1,4470," "]],[4470,4470],[4471,4471]]],[1589880406698,["Wahaha@DESKTOP-HTU2IVD",[[-1,4510," "]],[4511,4511],[4510,4510]]],[1589880406963,["Wahaha@DESKTOP-HTU2IVD",[[1,4510," "]],[4510,4510],[4511,4511]]],[1589880410501,["Wahaha@DESKTOP-HTU2IVD",[[-1,4510," "]],[4511,4511],[4510,4510]]],[1589880413878,["Wahaha@DESKTOP-HTU2IVD",[[-1,4454,"\n"]],[4455,4455],[4454,4454]]],[1589880423166,["Wahaha@DESKTOP-HTU2IVD",[[1,4454,"\n"]],[4454,4454],[4455,4455]]],[1589880434182,["Wahaha@DESKTOP-HTU2IVD",[[1,4556," - \n"]],[4555,4555],[4559,4559]]],[1589880435664,["Wahaha@DESKTOP-HTU2IVD",[[-1,4557,"- "]],[4559,4559],[4557,4557]]],[1589880436276,["Wahaha@DESKTOP-HTU2IVD",[[-1,4556," "],[1,4557,"\n"]],[4557,4557],[4557,4557]]],[1589880442025,["Wahaha@DESKTOP-HTU2IVD",[[1,4425,"\n2. "]],[4421,4421],[4425,4425]]],[1589880443551,["Wahaha@DESKTOP-HTU2IVD",[[-1,4422,"2. "]],[4425,4425],[4422,4422]]],[1589880467786,["Wahaha@DESKTOP-HTU2IVD",[[1,4558,"3. RenntrantLock more"]],[4558,4558],[4579,4579]]],[1589880469066,["Wahaha@DESKTOP-HTU2IVD",[[-1,4575,"more"]],[4579,4579],[4575,4575]]],[1589880477356,["Wahaha@DESKTOP-HTU2IVD",[[1,4575,"默认为非公平锁"]],[4575,4575],[4582,4582]]],[1589880478180,["Wahaha@DESKTOP-HTU2IVD",[[1,4583,"4. \n"]],[4582,4582],[4586,4586]]],[1589880496016,["Wahaha@DESKTOP-HTU2IVD",[[1,4586,"公平性与否针对获取锁来说的，如果一个锁是公平的，那么锁的获取顺序就应该符合请求的绝对时间顺序，也就是FIFO。"]],[4586,4586],[4641,4641]]],[1589880498025,["Wahaha@DESKTOP-HTU2IVD",[[1,4642,"5. \n"]],[4641,4641],[4645,4645]]],[1589880498512,["Wahaha@DESKTOP-HTU2IVD",[[-1,4642,"5. "]],[4645,4645],[4643,4643]]],[1589880507298,["Wahaha@DESKTOP-HTU2IVD",[[1,4643,"##### 35"]],[4643,4643],[4651,4651]]],[1589880508161,["Wahaha@DESKTOP-HTU2IVD",[[-1,4649,"35"]],[4651,4651],[4649,4649]]],[1589880511644,["Wahaha@DESKTOP-HTU2IVD",[[1,4649,"25. dux"]],[4649,4649],[4656,4656]]],[1589880512698,["Wahaha@DESKTOP-HTU2IVD",[[-1,4653,"dux"]],[4656,4656],[4653,4653]]],[1589880514399,["Wahaha@DESKTOP-HTU2IVD",[[1,4653,"读写锁"]],[4653,4653],[4656,4656]]],[1589880514981,["Wahaha@DESKTOP-HTU2IVD",[[1,4664,"\n"]],[4656,4656],[4657,4657]]],[1589880535288,["Wahaha@DESKTOP-HTU2IVD",[[1,4657,"读写锁语序"]],[4657,4657],[4662,4662]]],[1589880536045,["Wahaha@DESKTOP-HTU2IVD",[[-1,4660,"语序"]],[4662,4662],[4660,4660]]],[1589880556862,["Wahaha@DESKTOP-HTU2IVD",[[1,4660,"允许同一时刻多个线程"]],[4660,4660],[4670,4670]]],[1589880616062,["Wahaha@DESKTOP-HTU2IVD",[[1,4670,"访问，但是写线程和其他写线程均被阻塞。读写锁"]],[4670,4670],[4692,4692]]],[1589880632097,["Wahaha@DESKTOP-HTU2IVD",[[1,4692,"维护一个读锁一个邪所"]],[4692,4692],[4702,4702]]],[1589880633052,["Wahaha@DESKTOP-HTU2IVD",[[-1,4700,"邪所"]],[4702,4702],[4700,4700]]],[1589880638930,["Wahaha@DESKTOP-HTU2IVD",[[1,4700,"写锁，"]],[4700,4700],[4703,4703]]],[1589880641795,["Wahaha@DESKTOP-HTU2IVD",[[1,4641,"电影学"]],[4641,4641],[4644,4644]]],[1589880643327,["Wahaha@DESKTOP-HTU2IVD",[[-1,4641,"电影学"]],[4644,4644],[4641,4641]]],[1589880660965,["Wahaha@DESKTOP-HTU2IVD",[[1,4703,"读写分离，并发性能得到提高"]],[4703,4703],[4716,4716]]],[1589880662177,["Wahaha@DESKTOP-HTU2IVD",[[1,4724,"\n"]],[4716,4716],[4717,4717]]],[1589880670938,["Wahaha@DESKTOP-HTU2IVD",[[1,4717,"jaca"]],[4717,4717],[4721,4721]]],[1589880671789,["Wahaha@DESKTOP-HTU2IVD",[[-1,4719,"ca"]],[4721,4721],[4719,4719]]],[1589880674197,["Wahaha@DESKTOP-HTU2IVD",[[1,4719,"va提送"]],[4719,4719],[4723,4723]]],[1589880675235,["Wahaha@DESKTOP-HTU2IVD",[[-1,4721,"提送"]],[4723,4723],[4721,4721]]],[1589880676308,["Wahaha@DESKTOP-HTU2IVD",[[1,4721,"提供"]],[4721,4721],[4723,4723]]],[1589880713294,["Wahaha@DESKTOP-HTU2IVD",[[1,4723,"实现读写锁的实现类是ReentrantReadWriteLock."]],[4723,4723],[4756,4756]]],[1589880714108,["Wahaha@DESKTOP-HTU2IVD",[[1,4764,"\n"]],[4756,4756],[4757,4757]]],[1589881209702,["Wahaha@DESKTOP-HTU2IVD",[[1,4765,"\n"]],[4758,4758],[4759,4759]]],[1589881211663,["Wahaha@DESKTOP-HTU2IVD",[[-1,4765,"\n"]],[4759,4759],[4758,4758]]],[1589881212903,["Wahaha@DESKTOP-HTU2IVD",[[1,4758,"1. "]],[4758,4758],[4761,4761]]],[1589881223661,["Wahaha@DESKTOP-HTU2IVD",[[1,4761,"提供了类似Object监视器方法，与 Lock配合使用实现等待/通知模式。"]],[4761,4761],[4798,4798]]],[1589881232287,["Wahaha@DESKTOP-HTU2IVD",[[1,4761,"#### Condition接口"]],[4761,4761],[4777,4777]]],[1589881237018,["Wahaha@DESKTOP-HTU2IVD",[[-1,4761,"#### "]],[4761,4766],[4761,4761]]],[1589881241377,["Wahaha@DESKTOP-HTU2IVD",[[1,4772,": "]],[4772,4772],[4774,4774]]],[1589881243805,["Wahaha@DESKTOP-HTU2IVD",[[1,4812,"2. \n"]],[4811,4811],[4815,4815]]],[1589881256045,["Wahaha@DESKTOP-HTU2IVD",[[1,4815,"ArrayBkic"]],[4815,4815],[4824,4824]]],[1589881256923,["Wahaha@DESKTOP-HTU2IVD",[[-1,4821,"kic"]],[4824,4824],[4821,4821]]],[1589881257211,["Wahaha@DESKTOP-HTU2IVD",[[1,4821,"k"]],[4821,4821],[4822,4822]]],[1589881257826,["Wahaha@DESKTOP-HTU2IVD",[[-1,4821,"k"]],[4822,4822],[4821,4821]]],[1589881265434,["Wahaha@DESKTOP-HTU2IVD",[[1,4821,"lockingQUE"]],[4821,4821],[4831,4831]]],[1589881266340,["Wahaha@DESKTOP-HTU2IVD",[[-1,4829,"UE"]],[4831,4831],[4829,4829]]],[1589881267126,["Wahaha@DESKTOP-HTU2IVD",[[1,4829,"UE"]],[4829,4829],[4831,4831]]],[1589881267747,["Wahaha@DESKTOP-HTU2IVD",[[-1,4829,"UE"]],[4831,4831],[4829,4829]]],[1589881274580,["Wahaha@DESKTOP-HTU2IVD",[[1,4829,"ueue: "]],[4829,4829],[4835,4835]]],[1589881285248,["Wahaha@DESKTOP-HTU2IVD",[[1,4835,"yig"]],[4835,4835],[4838,4838]]],[1589881286781,["Wahaha@DESKTOP-HTU2IVD",[[-1,4835,"yig"]],[4838,4838],[4835,4835]]],[1589881301368,["Wahaha@DESKTOP-HTU2IVD",[[1,4835,"一个由数据支持的游街"]],[4835,4835],[4845,4845]]],[1589881302354,["Wahaha@DESKTOP-HTU2IVD",[[-1,4843,"游街"]],[4845,4845],[4843,4843]]],[1589881316694,["Wahaha@DESKTOP-HTU2IVD",[[1,4843,"有界阻塞队列，次队列"]],[4843,4843],[4853,4853]]],[1589881319844,["Wahaha@DESKTOP-HTU2IVD",[[-1,4850,"次队列"]],[4853,4853],[4850,4850]]],[1589881323803,["Wahaha@DESKTOP-HTU2IVD",[[1,4850,"吃对了"]],[4850,4850],[4853,4853]]],[1589881324657,["Wahaha@DESKTOP-HTU2IVD",[[-1,4850,"吃对了"]],[4853,4853],[4850,4850]]],[1589881336231,["Wahaha@DESKTOP-HTU2IVD",[[1,4850,"此队列FIFO原则"]],[4850,4850],[4859,4859]]],[1589881347058,["Wahaha@DESKTOP-HTU2IVD",[[1,4859,"对元素惊醒"]],[4859,4859],[4864,4864]]],[1589881348115,["Wahaha@DESKTOP-HTU2IVD",[[-1,4862,"惊醒"]],[4864,4864],[4862,4862]]],[1589881353010,["Wahaha@DESKTOP-HTU2IVD",[[1,4862,"惊醒排序"]],[4862,4862],[4866,4866]]],[1589881354382,["Wahaha@DESKTOP-HTU2IVD",[[-1,4862,"惊醒排序"]],[4866,4866],[4862,4862]]],[1589881376059,["Wahaha@DESKTOP-HTU2IVD",[[1,4862,"进行排序。队列头部在队列中存在的时间最长，队列尾部存在时间最短。"]],[4862,4862],[4894,4894]]],[1589881379503,["Wahaha@DESKTOP-HTU2IVD",[[1,4895,"3. \n"]],[4894,4894],[4898,4898]]],[1589881388787,["Wahaha@DESKTOP-HTU2IVD",[[1,4898,"#### PriorityBlockingQueue?"]],[4898,4898],[4925,4925]]],[1589881392607,["Wahaha@DESKTOP-HTU2IVD",[[-1,4898,"#### "]],[4898,4903],[4898,4898]]],[1589881395990,["Wahaha@DESKTOP-HTU2IVD",[[-1,4919,"?"]],[4920,4920],[4919,4919]]],[1589881396154,["Wahaha@DESKTOP-HTU2IVD",[[1,4919," "]],[4919,4919],[4920,4920]]],[1589881396681,["Wahaha@DESKTOP-HTU2IVD",[[-1,4919," "]],[4920,4920],[4919,4919]]],[1589881404343,["Wahaha@DESKTOP-HTU2IVD",[[1,4919,": 一个支持优先级排序的无界阻塞队列，但它不会阻塞数据生产者，而只会在没有可消费的数据时，阻塞数据的消费者。"]],[4919,4919],[4973,4973]]],[1589881412194,["Wahaha@DESKTOP-HTU2IVD",[[1,4974,"4. \n"]],[4973,4973],[4977,4977]]],[1589881412844,["Wahaha@DESKTOP-HTU2IVD",[[1,4977,"#### DelayQueue"]],[4977,4977],[4992,4992]]],[1589881417228,["Wahaha@DESKTOP-HTU2IVD",[[-1,4977,"#### "]],[4977,4982],[4977,4977]]],[1589881427781,["Wahaha@DESKTOP-HTU2IVD",[[1,4987,": 是一个支持延时获取元素的使用优先级队列的实现的无界阻塞队列。队列中的元素必须实现Delayed接口和 Comparable接口，在创建元素时可以指定多久才能从队列中获取当前元素。"]],[4987,4987],[5078,5078]]],[1589881449697,["Wahaha@DESKTOP-HTU2IVD",[[1,5080,"#####"]],[5080,5080],[5085,5085]]],[1589881450647,["Wahaha@DESKTOP-HTU2IVD",[[-1,5084,"#"]],[5085,5085],[5084,5084]]],[1589881457866,["Wahaha@DESKTOP-HTU2IVD",[[-1,4647,"#"]],[4648,4648],[4647,4647]]],[1589881462317,["Wahaha@DESKTOP-HTU2IVD",[[1,5083," 26 ja"]],[5083,5083],[5089,5089]]],[1589881464253,["Wahaha@DESKTOP-HTU2IVD",[[-1,5086," ja"]],[5089,5089],[5086,5086]]],[1589881471266,["Wahaha@DESKTOP-HTU2IVD",[[1,5086,".Java并发容器"]],[5086,5086],[5095,5095]]],[1589881472796,["Wahaha@DESKTOP-HTU2IVD",[[1,5100,"\n"]],[5095,5095],[5096,5096]]],[1589881504075,["Wahaha@DESKTOP-HTU2IVD",[[1,5096,"1. currenthashmap, copyonwire"]],[5096,5096],[5125,5125]]],[1589881505027,["Wahaha@DESKTOP-HTU2IVD",[[-1,5122,"ire"]],[5125,5125],[5122,5122]]],[1589881506228,["Wahaha@DESKTOP-HTU2IVD",[[1,5122,"rie"]],[5122,5122],[5125,5125]]],[1589881506985,["Wahaha@DESKTOP-HTU2IVD",[[-1,5124,"e"]],[5125,5125],[5124,5124]]],[1589881512857,["Wahaha@DESKTOP-HTU2IVD",[[1,5124,"tearraylist"]],[5124,5124],[5135,5135]]],[1589881526534,["Wahaha@DESKTOP-HTU2IVD",[[1,5135,", CopyOnWe"]],[5135,5135],[5145,5145]]],[1589881527117,["Wahaha@DESKTOP-HTU2IVD",[[-1,5144,"e"]],[5145,5145],[5144,5144]]],[1589881542465,["Wahaha@DESKTOP-HTU2IVD",[[1,5144,"riteArraySet, Cuu"]],[5144,5144],[5161,5161]]],[1589881542935,["Wahaha@DESKTOP-HTU2IVD",[[-1,5160,"u"]],[5161,5161],[5160,5160]]],[1589881544695,["Wahaha@DESKTOP-HTU2IVD",[[1,5160,"rrent"]],[5160,5160],[5165,5165]]],[1589881553973,["Wahaha@DESKTOP-HTU2IVD",[[1,5100,"c"]],[5099,5099],[5100,5100]]],[1589881554571,["Wahaha@DESKTOP-HTU2IVD",[[1,5100,"on"]],[5100,5100],[5102,5102]]],[1589881558945,["Wahaha@DESKTOP-HTU2IVD",[[-1,5161,"Current"]],[5161,5168],[5161,5161]]],[1589881559574,["Wahaha@DESKTOP-HTU2IVD",[[1,5161,"cin"]],[5161,5161],[5164,5164]]],[1589881560663,["Wahaha@DESKTOP-HTU2IVD",[[-1,5161,"cin"]],[5164,5164],[5161,5161]]],[1589881562817,["Wahaha@DESKTOP-HTU2IVD",[[1,5161,"Concuu"]],[5161,5161],[5167,5167]]],[1589881563354,["Wahaha@DESKTOP-HTU2IVD",[[-1,5166,"u"]],[5167,5167],[5166,5166]]],[1589881564707,["Wahaha@DESKTOP-HTU2IVD",[[1,5166,"rrent "]],[5166,5166],[5172,5172]]],[1589881565338,["Wahaha@DESKTOP-HTU2IVD",[[-1,5171," "]],[5172,5172],[5171,5171]]],[1589881568723,["Wahaha@DESKTOP-HTU2IVD",[[1,5171,"Line"]],[5171,5171],[5175,5175]]],[1589881570732,["Wahaha@DESKTOP-HTU2IVD",[[-1,5172,"ine"]],[5175,5175],[5172,5172]]],[1589881577121,["Wahaha@DESKTOP-HTU2IVD",[[1,5172,"inkedQ"]],[5172,5172],[5178,5178]]],[1589881578790,["Wahaha@DESKTOP-HTU2IVD",[[1,5178,"ueue"]],[5178,5178],[5182,5182]]],[1589881580305,["Wahaha@DESKTOP-HTU2IVD",[[1,5183,"2. \n"]],[5182,5182],[5186,5186]]],[1589881596672,["Wahaha@DESKTOP-HTU2IVD",[[1,5186,"ConcurrentSkipListMap、ConcurrentSkipListSet、ArrayBlockingQueue、"]],[5186,5186],[5249,5249]]],[1589881606898,["Wahaha@DESKTOP-HTU2IVD",[[1,5250,"3. \n"]],[5249,5249],[5253,5253]]],[1589881607155,["Wahaha@DESKTOP-HTU2IVD",[[1,5253,"LinkedBlockingQueue、LinkedBlockingDeque、PriorityBlockingQueue、SynchronousQueue、\n\nLinkedTransferQueue、DelayQueue"]],[5253,5253],[5364,5364]]],[1589881610919,["Wahaha@DESKTOP-HTU2IVD",[[-1,5333,"\n"]],[5334,5334],[5333,5333]]],[1589881611559,["Wahaha@DESKTOP-HTU2IVD",[[-1,5332,"\n"]],[5333,5333],[5332,5332]]],[1589881615156,["Wahaha@DESKTOP-HTU2IVD",[[1,5367,"\n"]],[5363,5363],[5364,5364]]],[1589881624156,["Wahaha@DESKTOP-HTU2IVD",[[1,5364,"333"]],[5364,5364],[5367,5367]]],[1589881625485,["Wahaha@DESKTOP-HTU2IVD",[[-1,5364,"333"]],[5367,5367],[5364,5364]]],[1589881631169,["Wahaha@DESKTOP-HTU2IVD",[[1,5364,"#### 27。"]],[5364,5364],[5372,5372]]],[1589881631968,["Wahaha@DESKTOP-HTU2IVD",[[-1,5371,"。"]],[5372,5372],[5371,5371]]],[1589881633369,["Wahaha@DESKTOP-HTU2IVD",[[1,5371,". she"]],[5371,5371],[5376,5376]]],[1589881634185,["Wahaha@DESKTOP-HTU2IVD",[[-1,5373,"she"]],[5376,5376],[5373,5373]]],[1589881637025,["Wahaha@DESKTOP-HTU2IVD",[[1,5373,"什么是阻塞"]],[5373,5373],[5378,5378]]],[1589881639907,["Wahaha@DESKTOP-HTU2IVD",[[1,5378,"队列"]],[5378,5378],[5380,5380]]],[1589881640307,["Wahaha@DESKTOP-HTU2IVD",[[1,5384,"\n"]],[5380,5380],[5381,5381]]],[1589881640984,["Wahaha@DESKTOP-HTU2IVD",[[1,5385,"\n"]],[5381,5381],[5382,5382]]],[1589881641167,["Wahaha@DESKTOP-HTU2IVD",[[1,5386,"\n"]],[5382,5382],[5383,5383]]],[1589881641340,["Wahaha@DESKTOP-HTU2IVD",[[1,5387,"\n"]],[5383,5383],[5384,5384]]],[1589881641505,["Wahaha@DESKTOP-HTU2IVD",[[1,5388,"\n"]],[5384,5384],[5385,5385]]],[1589881650687,["Wahaha@DESKTOP-HTU2IVD",[[1,5381,"最色"]],[5381,5381],[5383,5383]]],[1589881652480,["Wahaha@DESKTOP-HTU2IVD",[[-1,5381,"最色"]],[5383,5383],[5381,5381]]],[1589881684420,["Wahaha@DESKTOP-HTU2IVD",[[1,5381,"阻塞队列是一个支持两个附加操作的队列,这个"]],[5381,5381],[5402,5402]]],[1589881685357,["Wahaha@DESKTOP-HTU2IVD",[[-1,5401,"个"]],[5402,5402],[5401,5401]]],[1589881688463,["Wahaha@DESKTOP-HTU2IVD",[[1,5401,"两个操作"]],[5401,5401],[5405,5405]]],[1589881707825,["Wahaha@DESKTOP-HTU2IVD",[[1,5405,"支持阻塞和插入"]],[5405,5405],[5412,5412]]],[1589881714023,["Wahaha@DESKTOP-HTU2IVD",[[-1,5409,"和"]],[5410,5410],[5409,5409]]],[1589881714526,["Wahaha@DESKTOP-HTU2IVD",[[1,5409,"的"]],[5409,5409],[5410,5410]]],[1589881718406,["Wahaha@DESKTOP-HTU2IVD",[[1,5412,"和一处"]],[5412,5412],[5415,5415]]],[1589881720057,["Wahaha@DESKTOP-HTU2IVD",[[-1,5413,"一处"]],[5415,5415],[5413,5413]]],[1589881722648,["Wahaha@DESKTOP-HTU2IVD",[[1,5413," "],[1,5416,"一处"]],[5417,5417],[5419,5419]]],[1589881723195,["Wahaha@DESKTOP-HTU2IVD",[[-1,5417,"一处"]],[5419,5419],[5417,5417]]],[1589881723359,["Wahaha@DESKTOP-HTU2IVD",[[-1,5421,"\n"]],[5417,5417],[5416,5416]]],[1589881723558,["Wahaha@DESKTOP-HTU2IVD",[[-1,5420,"\n"]],[5416,5416],[5415,5415]]],[1589881724242,["Wahaha@DESKTOP-HTU2IVD",[[-1,5419,"\n"]],[5415,5415],[5414,5414]]],[1589881728061,["Wahaha@DESKTOP-HTU2IVD",[[1,5414,"移除方法"]],[5414,5414],[5418,5418]]],[1589881740979,["Wahaha@DESKTOP-HTU2IVD",[[-1,5413," "]],[5414,5414],[5413,5413]]],[1589881746012,["Wahaha@DESKTOP-HTU2IVD",[[1,5403,"附加"]],[5403,5403],[5405,5405]]],[1589881748595,["Wahaha@DESKTOP-HTU2IVD",[[1,5424,"\n"]],[5419,5419],[5420,5420]]],[1589881752275,["Wahaha@DESKTOP-HTU2IVD",[[1,5420,"1. "]],[5420,5420],[5423,5423]]],[1589881801639,["Wahaha@DESKTOP-HTU2IVD",[[1,5423,"支持阻塞的插入方法：当队列满时，队列会阻塞插入的线程"]],[5423,5423],[5449,5449]]],[1589881807874,["Wahaha@DESKTOP-HTU2IVD",[[1,5446,"元素"]],[5446,5446],[5448,5448]]],[1589881814063,["Wahaha@DESKTOP-HTU2IVD",[[1,5451,"，知道"]],[5451,5451],[5454,5454]]],[1589881815195,["Wahaha@DESKTOP-HTU2IVD",[[-1,5452,"知道"]],[5454,5454],[5452,5452]]],[1589881821546,["Wahaha@DESKTOP-HTU2IVD",[[1,5452,"直到队列不慢"]],[5452,5452],[5458,5458]]],[1589881823359,["Wahaha@DESKTOP-HTU2IVD",[[-1,5457,"慢"]],[5458,5458],[5457,5457]]],[1589881826080,["Wahaha@DESKTOP-HTU2IVD",[[1,5457,"满。"]],[5457,5457],[5459,5459]]],[1589881826740,["Wahaha@DESKTOP-HTU2IVD",[[1,5460,"2. \n"]],[5459,5459],[5463,5463]]],[1589881860267,["Wahaha@DESKTOP-HTU2IVD",[[1,5463,"支持阻塞的一处方法：当队列为空是"]],[5463,5463],[5479,5479]]],[1589881861046,["Wahaha@DESKTOP-HTU2IVD",[[-1,5478,"是"]],[5479,5479],[5478,5478]]],[1589881863407,["Wahaha@DESKTOP-HTU2IVD",[[1,5478,"时，"]],[5478,5478],[5480,5480]]],[1589881907105,["Wahaha@DESKTOP-HTU2IVD",[[1,5480,"获取元素的线程会等待队列变为非空"]],[5480,5480],[5496,5496]]],[1589881908006,["Wahaha@DESKTOP-HTU2IVD",[[1,5497,"3. \n"]],[5496,5496],[5500,5500]]],[1589881909851,["Wahaha@DESKTOP-HTU2IVD",[[-1,5497,"3. "]],[5500,5500],[5497,5497]]],[1589881910325,["Wahaha@DESKTOP-HTU2IVD",[[1,5502,"\n"]],[5497,5497],[5498,5498]]],[1589881918217,["Wahaha@DESKTOP-HTU2IVD",[[1,5381,"- "]],[5381,5381],[5383,5383]]],[1589881922748,["Wahaha@DESKTOP-HTU2IVD",[[1,5422," "]],[5422,5422],[5423,5423]]],[1589881923810,["Wahaha@DESKTOP-HTU2IVD",[[1,5463," "]],[5463,5463],[5464,5464]]],[1589881926451,["Wahaha@DESKTOP-HTU2IVD",[[1,5501," 3. \n"]],[5500,5500],[5505,5505]]],[1589881929266,["Wahaha@DESKTOP-HTU2IVD",[[-1,5501," 3. "]],[5505,5505],[5501,5501]]],[1589881932753,["Wahaha@DESKTOP-HTU2IVD",[[-1,5380,"\n"]],[5381,5381],[5380,5380]]],[1589881933961,["Wahaha@DESKTOP-HTU2IVD",[[1,5380,"\n"]],[5380,5380],[5381,5381]]],[1589881955246,["Wahaha@DESKTOP-HTU2IVD",[[1,5501,"- 阻塞队列的常用应用场景 :"]],[5501,5501],[5516,5516]]],[1589881956215,["Wahaha@DESKTOP-HTU2IVD",[[1,5517,"- \n"]],[5516,5516],[5519,5519]]],[1589881957338,["Wahaha@DESKTOP-HTU2IVD",[[-1,5517,"- "]],[5519,5519],[5517,5517]]],[1589881957810,["Wahaha@DESKTOP-HTU2IVD",[[-1,5523,"\n"]],[5517,5517],[5516,5516]]],[1589881958064,["Wahaha@DESKTOP-HTU2IVD",[[-1,5515,":"]],[5516,5516],[5515,5515]]],[1589881959357,["Wahaha@DESKTOP-HTU2IVD",[[1,5515,"："]],[5515,5515],[5516,5516]]],[1589881959650,["Wahaha@DESKTOP-HTU2IVD",[[1,5517,"- \n"]],[5516,5516],[5519,5519]]],[1589881960673,["Wahaha@DESKTOP-HTU2IVD",[[-1,5517,"- "]],[5519,5519],[5517,5517]]],[1589881962381,["Wahaha@DESKTOP-HTU2IVD",[[1,5517," 1. "]],[5517,5517],[5521,5521]]],[1589881975720,["Wahaha@DESKTOP-HTU2IVD",[[-1,5517," 1. "]],[5517,5521],[5517,5517]]],[1589881987324,["Wahaha@DESKTOP-HTU2IVD",[[1,5517,"常用语生产者和消费者模式中，"]],[5517,5517],[5531,5531]]],[1589881991073,["Wahaha@DESKTOP-HTU2IVD",[[-1,5532,"\n"],[1,5533," "]],[5533,5533],[5532,5533]]],[1589881992527,["Wahaha@DESKTOP-HTU2IVD",[[-1,5532," "]],[5532,5532],[5532,5532]]],[1589881992959,["Wahaha@DESKTOP-HTU2IVD",[[-1,5536,"\n"]],[5532,5532],[5531,5531]]],[1589882006887,["Wahaha@DESKTOP-HTU2IVD",[[1,5531,"生产者是往队列中添加"]],[5531,5531],[5541,5541]]],[1589882009120,["Wahaha@DESKTOP-HTU2IVD",[[1,5521,"元素"],[1,5541," "]],[5521,5521],[5523,5523]]],[1589882014660,["Wahaha@DESKTOP-HTU2IVD",[[-1,5521,"元素"]],[5523,5523],[5521,5521]]],[1589882018106,["Wahaha@DESKTOP-HTU2IVD",[[-1,5519,"语"]],[5520,5520],[5519,5519]]],[1589882019998,["Wahaha@DESKTOP-HTU2IVD",[[1,5519,"与"]],[5519,5519],[5520,5520]]],[1589882020593,["Wahaha@DESKTOP-HTU2IVD",[[-1,5519,"与"]],[5520,5520],[5519,5519]]],[1589882021731,["Wahaha@DESKTOP-HTU2IVD",[[1,5519,"于"]],[5519,5519],[5520,5520]]],[1589882049247,["Wahaha@DESKTOP-HTU2IVD",[[1,5541,"元素，消费者是从队列中提取元素"]],[5541,5541],[5556,5556]]],[1589882063771,["Wahaha@DESKTOP-HTU2IVD",[[1,5543,"的线程"]],[5543,5543],[5546,5546]]],[1589882067134,["Wahaha@DESKTOP-HTU2IVD",[[1,5560,"的线程"]],[5560,5560],[5563,5563]]],[1589882069181,["Wahaha@DESKTOP-HTU2IVD",[[-1,5559," "]],[5560,5560],[5559,5559]]],[1589882080997,["Wahaha@DESKTOP-HTU2IVD",[[1,5562,"。最色"]],[5562,5562],[5565,5565]]],[1589882081685,["Wahaha@DESKTOP-HTU2IVD",[[-1,5563,"最色"]],[5565,5565],[5563,5563]]],[1589882104326,["Wahaha@DESKTOP-HTU2IVD",[[1,5563,"阻塞队列正好是生产者存放，消费者来获取的容器"]],[5563,5563],[5585,5585]]],[1589882105162,["Wahaha@DESKTOP-HTU2IVD",[[1,5590,"\n"]],[5585,5585],[5586,5586]]],[1589882146403,["Wahaha@DESKTOP-HTU2IVD",[[1,5591,"\n"]],[5585,5585],[5586,5586]]],[1589882146642,["Wahaha@DESKTOP-HTU2IVD",[[1,5592,"\n"]],[5586,5586],[5587,5587]]],[1589882148320,["Wahaha@DESKTOP-HTU2IVD",[[1,5587,"-。"]],[5587,5587],[5589,5589]]],[1589882149322,["Wahaha@DESKTOP-HTU2IVD",[[-1,5587,"-。"]],[5589,5589],[5587,5587]]],[1589882149896,["Wahaha@DESKTOP-HTU2IVD",[[-1,5592,"\n"]],[5587,5587],[5586,5586]]],[1589882158304,["Wahaha@DESKTOP-HTU2IVD",[[1,5586,"- javal"]],[5586,5586],[5593,5593]]],[1589882159423,["Wahaha@DESKTOP-HTU2IVD",[[-1,5592,"l"]],[5593,5593],[5592,5592]]],[1589882163175,["Wahaha@DESKTOP-HTU2IVD",[[1,5592,"里的阻塞队列"]],[5592,5592],[5598,5598]]],[1589882163787,["Wahaha@DESKTOP-HTU2IVD",[[1,5599,"- \n"]],[5598,5598],[5601,5601]]],[1589882165899,["Wahaha@DESKTOP-HTU2IVD",[[-1,5599,"- "]],[5601,5601],[5599,5599]]],[1589882170621,["Wahaha@DESKTOP-HTU2IVD",[[1,5599,"ArrayBlockingQueue： 数组结构组成的 |有界阻塞队列 LinkedBlockingQueue： 链表结构组成的|有界阻塞队列 PriorityBlockingQueue: 支持优先级排序|无界阻塞队列 DelayQueue： 优先级队列实现|无界阻塞队列 SynchronousQueue： 不存储元素| 阻塞队列 LinkedTransferQueue： 链表结构组成|无界阻塞队列 LinkedBlockingDeque： 链表结构组成|双向阻塞队列\n\n作者：java小咖秀\n链接：https://juejin.im/post/5eaecf326fb9a043856f33d5\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[5599,5599],[5939,5939]]],[1589882175104,["Wahaha@DESKTOP-HTU2IVD",[[1,5635,"\n"]],[5635,5635],[5636,5636]]],[1589882178605,["Wahaha@DESKTOP-HTU2IVD",[[1,5672,"\n"]],[5672,5672],[5673,5673]]],[1589882182117,["Wahaha@DESKTOP-HTU2IVD",[[1,5711,"\n"]],[5711,5711],[5712,5712]]],[1589882185368,["Wahaha@DESKTOP-HTU2IVD",[[1,5739,"\n"]],[5739,5739],[5740,5740]]],[1589882188194,["Wahaha@DESKTOP-HTU2IVD",[[1,5770,"\n"]],[5770,5770],[5771,5771]]],[1589882191168,["Wahaha@DESKTOP-HTU2IVD",[[1,5806,"\n"]],[5806,5806],[5807,5807]]],[1589882194467,["Wahaha@DESKTOP-HTU2IVD",[[-1,5843,"作者：java小咖秀\n链接：https://juejin.im/post/5eaecf326fb9a043856f33d5\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[5843,5945],[5843,5843]]],[1589882200812,["Wahaha@DESKTOP-HTU2IVD",[[-1,4757,"1. Condition接口: 提供了类似Object监视器方法，与 Lock配合使用实现等待/通知模式。\n2. ArrayBlockingQueue: 一个由数据支持的有界阻塞队列，此队列FIFO原则对元素进行排序。队列头部在队列中存在的时间最长，队列尾部存在时间最短。\n3. PriorityBlockingQueue: 一个支持优先级排序的无界阻塞队列，但它不会阻塞数据生产者，而只会在没有可消费的数据时，阻塞数据的消费者。\n4. DelayQueue: 是一个支持延时获取元素的使用优先级队列的实现的无界阻塞队列。队列中的元素必须实现Delayed接口和 Comparable接口，在创建元素时可以指定多久才能从队列中获取当前元素。\n"]],[4757,5078],[4757,4757]]],[1589882201420,["Wahaha@DESKTOP-HTU2IVD",[[-1,4757,"\n"]],[4757,4757],[4756,4756]]],[1589882223397,["Wahaha@DESKTOP-HTU2IVD",[[1,5527,"\n"]],[5519,5519],[5520,5520]]],[1589882224005,["Wahaha@DESKTOP-HTU2IVD",[[1,5528,"\n"]],[5520,5520],[5521,5521]]],[1589882231229,["Wahaha@DESKTOP-HTU2IVD",[[1,5521,"#### fork/join"]],[5521,5521],[5535,5535]]],[1589882301678,["Wahaha@DESKTOP-HTU2IVD",[[-1,5526,"fork/join"]],[5526,5535],[5526,5526]]],[1589882304602,["Wahaha@DESKTOP-HTU2IVD",[[1,5526,"28. we"]],[5526,5526],[5532,5532]]],[1589882305281,["Wahaha@DESKTOP-HTU2IVD",[[-1,5530,"we"]],[5532,5532],[5530,5530]]],[1589882314630,["Wahaha@DESKTOP-HTU2IVD",[[1,5530,"为什么使用线程池"]],[5530,5530],[5538,5538]]],[1589882315190,["Wahaha@DESKTOP-HTU2IVD",[[1,5546,"\n"]],[5538,5538],[5539,5539]]],[1589882334607,["Wahaha@DESKTOP-HTU2IVD",[[1,5539,"1. 降低系统小号"]],[5539,5539],[5548,5548]]],[1589882335258,["Wahaha@DESKTOP-HTU2IVD",[[-1,5546,"小号"]],[5548,5548],[5546,5546]]],[1589882343985,["Wahaha@DESKTOP-HTU2IVD",[[1,5546,"消耗: h"]],[5546,5546],[5551,5551]]],[1589882344555,["Wahaha@DESKTOP-HTU2IVD",[[-1,5550,"h"]],[5551,5551],[5550,5550]]],[1589882369088,["Wahaha@DESKTOP-HTU2IVD",[[1,5550,"重复利用已经创建的线程降低现场"]],[5550,5550],[5565,5565]]],[1589882370050,["Wahaha@DESKTOP-HTU2IVD",[[-1,5563,"现场"]],[5565,5565],[5563,5563]]],[1589882375838,["Wahaha@DESKTOP-HTU2IVD",[[1,5563,"线程创建和消耗"]],[5563,5563],[5570,5570]]],[1589882378886,["Wahaha@DESKTOP-HTU2IVD",[[-1,5568,"消耗"]],[5570,5570],[5568,5568]]],[1589882381511,["Wahaha@DESKTOP-HTU2IVD",[[1,5568,"销毁"]],[5568,5568],[5570,5570]]],[1589882388475,["Wahaha@DESKTOP-HTU2IVD",[[1,5570,"造成的资源小"]],[5570,5570],[5576,5576]]],[1589882388811,["Wahaha@DESKTOP-HTU2IVD",[[-1,5575,"小"]],[5576,5576],[5575,5575]]],[1589882390905,["Wahaha@DESKTOP-HTU2IVD",[[1,5575,"虽好"]],[5575,5575],[5577,5577]]],[1589882392786,["Wahaha@DESKTOP-HTU2IVD",[[-1,5575,"虽好"]],[5577,5577],[5575,5575]]],[1589882397597,["Wahaha@DESKTOP-HTU2IVD",[[1,5575,"损耗"]],[5575,5575],[5577,5577]]],[1589882398100,["Wahaha@DESKTOP-HTU2IVD",[[1,5578,"2. \n"]],[5577,5577],[5581,5581]]],[1589882406845,["Wahaha@DESKTOP-HTU2IVD",[[1,5581,"提高响应速度： "]],[5581,5581],[5589,5589]]],[1589882407817,["Wahaha@DESKTOP-HTU2IVD",[[-1,5588," "]],[5589,5589],[5588,5588]]],[1589882417730,["Wahaha@DESKTOP-HTU2IVD",[[1,5588,"当任务到时是"]],[5588,5588],[5594,5594]]],[1589882418438,["Wahaha@DESKTOP-HTU2IVD",[[-1,5591,"到时是"]],[5594,5594],[5591,5591]]],[1589882438442,["Wahaha@DESKTOP-HTU2IVD",[[1,5591,"到达时，任务不需要等待咸亨的"]],[5591,5591],[5605,5605]]],[1589882441745,["Wahaha@DESKTOP-HTU2IVD",[[-1,5602,"咸亨的"]],[5605,5605],[5602,5602]]],[1589882450949,["Wahaha@DESKTOP-HTU2IVD",[[1,5602,"线程的创建就可以里脊"]],[5602,5602],[5612,5612]]],[1589882452241,["Wahaha@DESKTOP-HTU2IVD",[[-1,5610,"里脊"]],[5612,5612],[5610,5610]]],[1589882455937,["Wahaha@DESKTOP-HTU2IVD",[[1,5610,"立即执行"]],[5610,5610],[5614,5614]]],[1589882456859,["Wahaha@DESKTOP-HTU2IVD",[[1,5615,"3. \n"]],[5614,5614],[5618,5618]]],[1589882465343,["Wahaha@DESKTOP-HTU2IVD",[[1,5618,"提供线程的可管理行"]],[5618,5618],[5627,5627]]],[1589882466294,["Wahaha@DESKTOP-HTU2IVD",[[-1,5626,"行"]],[5627,5627],[5626,5626]]],[1589882481476,["Wahaha@DESKTOP-HTU2IVD",[[1,5626,"性：同"]],[5626,5626],[5629,5629]]],[1589882482259,["Wahaha@DESKTOP-HTU2IVD",[[-1,5628,"同"]],[5629,5629],[5628,5628]]],[1589882488292,["Wahaha@DESKTOP-HTU2IVD",[[1,5628,"可以通过设立"]],[5628,5628],[5634,5634]]],[1589882489400,["Wahaha@DESKTOP-HTU2IVD",[[-1,5632,"设立"]],[5634,5634],[5632,5632]]],[1589882498227,["Wahaha@DESKTOP-HTU2IVD",[[1,5632,"设置合理分配‘"]],[5632,5632],[5639,5639]]],[1589882498926,["Wahaha@DESKTOP-HTU2IVD",[[-1,5638,"‘"]],[5639,5639],[5638,5638]]],[1589882499775,["Wahaha@DESKTOP-HTU2IVD",[[1,5638,"、"]],[5638,5638],[5639,5639]]],[1589882506703,["Wahaha@DESKTOP-HTU2IVD",[[1,5639,"调优。"]],[5639,5639],[5642,5642]]],[1589882507443,["Wahaha@DESKTOP-HTU2IVD",[[-1,5641,"。"]],[5642,5642],[5641,5641]]],[1589882510137,["Wahaha@DESKTOP-HTU2IVD",[[1,5641,"、监控"]],[5641,5641],[5644,5644]]],[1589882510860,["Wahaha@DESKTOP-HTU2IVD",[[1,5645,"4. \n"]],[5644,5644],[5648,5648]]],[1589882513353,["Wahaha@DESKTOP-HTU2IVD",[[-1,5645,"4. "]],[5648,5648],[5645,5645]]],[1589882513979,["Wahaha@DESKTOP-HTU2IVD",[[1,5653,"\n"]],[5645,5645],[5646,5646]]],[1589882540950,["Wahaha@DESKTOP-HTU2IVD",[[1,5646,"#### 29. 线程池的工作流程"]],[5646,5646],[5663,5663]]],[1589882541385,["Wahaha@DESKTOP-HTU2IVD",[[1,5671,"\n"]],[5663,5663],[5664,5664]]],[1589882561630,["Wahaha@DESKTOP-HTU2IVD",[[1,5664,"1. 判断核心线程池的"]],[5664,5664],[5675,5675]]],[1589882584166,["Wahaha@DESKTOP-HTU2IVD",[[1,5675,"线程是否都在执行任务，否-"]],[5675,5675],[5688,5688]]],[1589882586124,["Wahaha@DESKTOP-HTU2IVD",[[-1,5687,"-"]],[5688,5688],[5687,5687]]],[1589882595186,["Wahaha@DESKTOP-HTU2IVD",[[1,5687,"--->创建一个新的"]],[5687,5687],[5697,5697]]],[1589882600000,["Wahaha@DESKTOP-HTU2IVD",[[-1,5696,"的"]],[5697,5697],[5696,5696]]],[1589882602863,["Wahaha@DESKTOP-HTU2IVD",[[1,5696,"得"]],[5696,5696],[5697,5697]]],[1589882603950,["Wahaha@DESKTOP-HTU2IVD",[[-1,5696,"得"]],[5697,5697],[5696,5696]]],[1589882622300,["Wahaha@DESKTOP-HTU2IVD",[[1,5696,"的线程来执行任务。是---》"]],[5696,5696],[5710,5710]]],[1589882624011,["Wahaha@DESKTOP-HTU2IVD",[[-1,5706,"---》"]],[5710,5710],[5706,5706]]],[1589882631735,["Wahaha@DESKTOP-HTU2IVD",[[1,5706,"--->走下个流程"]],[5706,5706],[5715,5715]]],[1589882632790,["Wahaha@DESKTOP-HTU2IVD",[[1,5716,"2. \n"]],[5715,5715],[5719,5719]]],[1589882646251,["Wahaha@DESKTOP-HTU2IVD",[[1,5719,"判断工作队列是否一万"]],[5719,5719],[5729,5729]]],[1589882647167,["Wahaha@DESKTOP-HTU2IVD",[[-1,5727,"一万"]],[5729,5729],[5727,5727]]],[1589882649680,["Wahaha@DESKTOP-HTU2IVD",[[1,5715,"一满"]],[5715,5715],[5717,5717]]],[1589882651358,["Wahaha@DESKTOP-HTU2IVD",[[-1,5715,"一满"]],[5717,5717],[5715,5715]]],[1589882682163,["Wahaha@DESKTOP-HTU2IVD",[[1,5727,"已满: 否--->新任务储存到这个工作队列中"]],[5727,5727],[5749,5749]]],[1589882701706,["Wahaha@DESKTOP-HTU2IVD",[[1,5749,"， 是---> 走下个流程"]],[5749,5749],[5762,5762]]],[1589882702139,["Wahaha@DESKTOP-HTU2IVD",[[1,5763,"3. \n"]],[5762,5762],[5766,5766]]],[1589882728251,["Wahaha@DESKTOP-HTU2IVD",[[1,5766,"判断线程池里的线程是否都在工作换台"]],[5766,5766],[5783,5783]]],[1589882729210,["Wahaha@DESKTOP-HTU2IVD",[[-1,5781,"换台"]],[5783,5783],[5781,5781]]],[1589882731243,["Wahaha@DESKTOP-HTU2IVD",[[1,5781,"装阿泰"]],[5781,5781],[5784,5784]]],[1589882732364,["Wahaha@DESKTOP-HTU2IVD",[[-1,5781,"装阿泰"]],[5784,5784],[5781,5781]]],[1589882738976,["Wahaha@DESKTOP-HTU2IVD",[[1,5781,"状态: "]],[5781,5781],[5785,5785]]],[1589882755240,["Wahaha@DESKTOP-HTU2IVD",[[-1,5785,"\n"],[1,5786,"否--->创建一个新的线程来执行任务。是--->走下个流程4. \n"]],[5785,5786],[5818,5818]]],[1589882762390,["Wahaha@DESKTOP-HTU2IVD",[[1,5818,"按照设置的策略来处理无法执行的任务"]],[5818,5818],[5835,5835]]],[1589883248318,[null,[[1,5814,"\n"],[-1,5817,"\n"]],[5814,5814],[5817,5817]]],[1589883248318,[null,[[-1,5814,"\n"],[1,5818,"\n"]],[5817,5817],[5814,5814]]],[1589883214833,["Wahaha@DESKTOP-HTU2IVD",[[1,5842,"\n"]],[5836,5836],[5837,5837]]],[1589883217061,["Wahaha@DESKTOP-HTU2IVD",[[1,5837,"####v"]],[5837,5837],[5842,5842]]],[1589883217864,["Wahaha@DESKTOP-HTU2IVD",[[-1,5841,"v"]],[5842,5842],[5841,5841]]],[1589883219535,["Wahaha@DESKTOP-HTU2IVD",[[1,5841," 30 "]],[5841,5841],[5845,5845]]],[1589883220358,["Wahaha@DESKTOP-HTU2IVD",[[-1,5844," "]],[5845,5845],[5844,5844]]],[1589883221670,["Wahaha@DESKTOP-HTU2IVD",[[1,5844,". #### .创建线程池参数有哪些"]],[5844,5844],[5862,5862]]],[1589883225523,["Wahaha@DESKTOP-HTU2IVD",[[-1,5846,"#### ."]],[5846,5852],[5846,5846]]],[1589883227726,["Wahaha@DESKTOP-HTU2IVD",[[1,5862,"\n"]],[5856,5856],[5857,5857]]],[1589883228066,["Wahaha@DESKTOP-HTU2IVD",[[1,5863,"\n"]],[5857,5857],[5858,5858]]],[1589883229882,["Wahaha@DESKTOP-HTU2IVD",[[1,5858,"```"]],[5858,5858],[5861,5861]]],[1589883229925,["Wahaha@DESKTOP-HTU2IVD",[[1,5861,"language\n```\n"]],[5861,5861],[5861,5869]]],[1589883230634,["Wahaha@DESKTOP-HTU2IVD",[[-1,5861,"language"],[1,5869,"\n"]],[5861,5869],[5862,5862]]],[1589883231119,["Wahaha@DESKTOP-HTU2IVD",[[1,5863,"\n"]],[5862,5862],[5863,5863]]],[1589883231310,["Wahaha@DESKTOP-HTU2IVD",[[1,5864,"\n"]],[5863,5863],[5864,5864]]],[1589883231472,["Wahaha@DESKTOP-HTU2IVD",[[1,5865,"\n"]],[5864,5864],[5865,5865]]],[1589883237052,["Wahaha@DESKTOP-HTU2IVD",[[1,5862,"public ThreadPoolExecutor( int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue<Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler)\n\n作者：java小咖秀\n链接：https://juejin.im/post/5eaecf326fb9a043856f33d5\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[5862,5862],[6164,6164]]],[1589883241285,["Wahaha@DESKTOP-HTU2IVD",[[-1,6062,"作者：java小咖秀\n链接：https://juejin.im/post/5eaecf326fb9a043856f33d5\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[6062,6164],[6062,6062]]],[1589883241880,["Wahaha@DESKTOP-HTU2IVD",[[-1,6065,"\n"]],[6062,6062],[6061,6061]]],[1589883242511,["Wahaha@DESKTOP-HTU2IVD",[[-1,6064,"\n"]],[6061,6061],[6060,6060]]],[1589883244690,["Wahaha@DESKTOP-HTU2IVD",[[-1,6063,"\n"]],[6061,6061],[6060,6060]]],[1589883246221,["Wahaha@DESKTOP-HTU2IVD",[[-1,6062,"\n"]],[6061,6061],[6060,6060]]],[1589883308319,[null,[[1,5814,"\n"],[-1,5817,"\n"]],[5814,5814],[5817,5817]]],[1589883308319,[null,[[-1,5814,"\n"],[1,5818,"\n"]],[5817,5817],[5814,5814]]],[1589883249119,["Wahaha@DESKTOP-HTU2IVD",[[1,5907,"\n"]],[5907,5907],[5908,5908]]],[1589883253928,["Wahaha@DESKTOP-HTU2IVD",[[1,5908,"                            "]],[5908,5908],[5936,5936]]],[1589883255320,["Wahaha@DESKTOP-HTU2IVD",[[-1,5935," "]],[5936,5936],[5935,5935]]],[1589883259147,["Wahaha@DESKTOP-HTU2IVD",[[1,5956,"\n                           "]],[5956,5956],[5984,5984]]],[1589883263296,["Wahaha@DESKTOP-HTU2IVD",[[1,6054,"\n                           "]],[6054,6054],[6082,6082]]],[1589883267681,["Wahaha@DESKTOP-HTU2IVD",[[1,6019,"          "]],[6019,6019],[6029,6029]]],[1589883270126,["Wahaha@DESKTOP-HTU2IVD",[[1,6018,"\n                           "]],[6018,6018],[6046,6046]]],[1589883271854,["Wahaha@DESKTOP-HTU2IVD",[[-1,6056," "]],[6046,6046],[6046,6046]]],[1589883272271,["Wahaha@DESKTOP-HTU2IVD",[[-1,6055," "]],[6046,6046],[6046,6046]]],[1589883272461,["Wahaha@DESKTOP-HTU2IVD",[[-1,6054," "]],[6046,6046],[6046,6046]]],[1589883272623,["Wahaha@DESKTOP-HTU2IVD",[[-1,6053," "]],[6046,6046],[6046,6046]]],[1589883272777,["Wahaha@DESKTOP-HTU2IVD",[[-1,6052," "]],[6046,6046],[6046,6046]]],[1589883272946,["Wahaha@DESKTOP-HTU2IVD",[[-1,6051," "]],[6046,6046],[6046,6046]]],[1589883273110,["Wahaha@DESKTOP-HTU2IVD",[[-1,6050," "]],[6046,6046],[6046,6046]]],[1589883273263,["Wahaha@DESKTOP-HTU2IVD",[[-1,6049," "]],[6046,6046],[6046,6046]]],[1589883273430,["Wahaha@DESKTOP-HTU2IVD",[[-1,6048," "]],[6046,6046],[6046,6046]]],[1589883273602,["Wahaha@DESKTOP-HTU2IVD",[[-1,6047," "]],[6046,6046],[6046,6046]]],[1589883273779,["Wahaha@DESKTOP-HTU2IVD",[[-1,6046," "]],[6046,6046],[6046,6046]]],[1589883277029,["Wahaha@DESKTOP-HTU2IVD",[[1,6138,"      "]],[6138,6138],[6144,6144]]],[1589883279181,["Wahaha@DESKTOP-HTU2IVD",[[1,6138,"\n                           "]],[6138,6138],[6166,6166]]],[1589883280428,["Wahaha@DESKTOP-HTU2IVD",[[-1,6171," "]],[6166,6166],[6166,6166]]],[1589883280648,["Wahaha@DESKTOP-HTU2IVD",[[-1,6170," "]],[6166,6166],[6166,6166]]],[1589883280832,["Wahaha@DESKTOP-HTU2IVD",[[-1,6169," "]],[6166,6166],[6166,6166]]],[1589883281038,["Wahaha@DESKTOP-HTU2IVD",[[-1,6168," "]],[6166,6166],[6166,6166]]],[1589883281293,["Wahaha@DESKTOP-HTU2IVD",[[-1,6167," "]],[6166,6166],[6166,6166]]],[1589883281763,["Wahaha@DESKTOP-HTU2IVD",[[-1,6166," "]],[6166,6166],[6166,6166]]],[1589883289361,["Wahaha@DESKTOP-HTU2IVD",[[1,6206,"1.corePoolSize:核心线程池大小，当提交一个任务时，线程池会创建一个线程来执行任务，即使其他空闲的核心线程能够执行新任务也会创建，等待需要执行的任务数大于线程核心大小就不会继续创建。\n\n2.maximumPoolSize:线程池最大数，允许创建的最大线程数，如果队列满了，并且已经创建的线程数小于最大线程数，则会创建新的线程执行任务。如果是无界队列，这个参数基本没用。\n\n3.keepAliveTime: 线程保持活动时间，线程池工作线程空闲后，保持存活的时间，所以如果任务很多，并且每个任务执行时间较短，可以调大时间，提高线程利用率。\n\n4.unit: 线程保持活动时间单位，天（DAYS)、小时(HOURS)、分钟(MINUTES、毫秒MILLISECONDS)、微秒(MICROSECONDS)、纳秒(NANOSECONDS)\n\n5.workQueue: 任务队列，保存等待执行的任务的阻塞队列。\n\n作者：java小咖秀\n链接：https://juejin.im/post/5eaecf326fb9a043856f33d5\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[6206,6206],[6717,6717]]],[1589883293537,["Wahaha@DESKTOP-HTU2IVD",[[-1,6615,"作者：java小咖秀\n链接：https://juejin.im/post/5eaecf326fb9a043856f33d5\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n\n\n"]],[6614,6720],[6614,6614]]],[1589883304489,["Wahaha@DESKTOP-HTU2IVD",[[1,6614,"一般来说可以选择如下阻塞队列：\n\nArrayBlockingQueue:基于数组的有界阻塞队列。\n\nLinkedBlockingQueue:基于链表的阻塞队列。\n\nSynchronizedQueue:一个不存储元素的阻塞队列。\n\nPriorityBlockingQueue:一个具有优先级的阻塞队列。\n\n6.threadFactory：设置创建线程的工厂，可以通过线程工厂给每个创建出来的线程设置更有意义的名字。\n\n1.  handler: 饱和策略也叫拒绝策略。当队列和线程池都满了，即达到饱和状态。所以需要采取策略来处理新的任务。默认策略是AbortPolicy。\n\n    AbortPolicy:直接抛出异常。\n\n    CallerRunsPolicy: 调用者所在的线程来运行任务。\n\n    DiscardOldestPolicy:丢弃队列里最近的一个任务，并执行当前任务。\n\n    DiscardPolicy:不处理，直接丢掉。\n\n    当然可以根据自己的应用场景，实现RejectedExecutionHandler接口自定义策略。\n\n作者：java小咖秀\n链接：https://juejin.im/post/5eaecf326fb9a043856f33d5\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[6614,6614],[7195,7195]]],[1589883368332,[null,[[1,5814,"\n"],[-1,5817,"\n"]],[5814,5814],[5817,5817]]],[1589883368332,[null,[[-1,5814,"\n"],[1,5818,"\n"]],[5817,5817],[5814,5814]]],[1589883308997,["Wahaha@DESKTOP-HTU2IVD",[[-1,6822,"1."]],[6822,6824],[6822,6822]]],[1589883310915,["Wahaha@DESKTOP-HTU2IVD",[[-1,6823," "]],[6822,6822],[6822,6822]]],[1589883313643,["Wahaha@DESKTOP-HTU2IVD",[[1,6822,"7."]],[6822,6822],[6824,6824]]],[1589883316745,["Wahaha@DESKTOP-HTU2IVD",[[1,6582," "]],[6582,6582],[6583,6583]]],[1589883317892,["Wahaha@DESKTOP-HTU2IVD",[[1,6483," "]],[6483,6483],[6484,6484]]],[1589883319584,["Wahaha@DESKTOP-HTU2IVD",[[-1,6483," "]],[6484,6484],[6483,6483]]],[1589883321503,["Wahaha@DESKTOP-HTU2IVD",[[1,6484," "]],[6484,6484],[6485,6485]]],[1589883322818,["Wahaha@DESKTOP-HTU2IVD",[[1,6400," "]],[6400,6400],[6401,6401]]],[1589883324419,["Wahaha@DESKTOP-HTU2IVD",[[1,6307," "]],[6307,6307],[6308,6308]]],[1589883326057,["Wahaha@DESKTOP-HTU2IVD",[[1,6208," "]],[6208,6208],[6209,6209]]],[1589883331513,["Wahaha@DESKTOP-HTU2IVD",[[-1,7097,"作者：java小咖秀\n链接：https://juejin.im/post/5eaecf326fb9a043856f33d5\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n"]],[7097,7200],[7097,7097]]],[1589883336061,["Wahaha@DESKTOP-HTU2IVD",[[-1,6928,"\n"]],[6928,6928],[6927,6927]]],[1589883337918,["Wahaha@DESKTOP-HTU2IVD",[[-1,6965,"\n"]],[6965,6965],[6964,6964]]],[1589883339932,["Wahaha@DESKTOP-HTU2IVD",[[-1,7011,"\n"]],[7011,7011],[7010,7010]]],[1589883342480,["Wahaha@DESKTOP-HTU2IVD",[[-1,7039,"\n"]],[7039,7039],[7038,7038]]],[1589883348417,["Wahaha@DESKTOP-HTU2IVD",[[-1,6635,"\n"]],[6635,6635],[6634,6634]]],[1589883350981,["Wahaha@DESKTOP-HTU2IVD",[[-1,6667,"\n"]],[6667,6667],[6666,6666]]],[1589883352895,["Wahaha@DESKTOP-HTU2IVD",[[-1,6698,"\n"]],[6698,6698],[6697,6697]]],[1589883355021,["Wahaha@DESKTOP-HTU2IVD",[[-1,6730,"\n"]],[6730,6730],[6729,6729]]],[1589883361201,["Wahaha@DESKTOP-HTU2IVD",[[1,6769," "]],[6769,6769],[6770,6770]]],[1589883366465,["Wahaha@DESKTOP-HTU2IVD",[[-1,6902,"   "]],[6901,6904],[6901,6901]]],[1589883385098,[null,[[1,5814,"\n"],[-1,5817,"\n"]],[5814,5814],[5817,5817]]],[1589883385098,[null,[[-1,5814,"\n"],[1,5818,"\n"]],[5817,5817],[5814,5814]]],[1589883369386,["Wahaha@DESKTOP-HTU2IVD",[[-1,6900,"\n"]],[6901,6901],[6900,6900]]],[1589883373165,["Wahaha@DESKTOP-HTU2IVD",[[-1,6921,"    "]],[6925,6925],[6921,6921]]],[1589883376834,["Wahaha@DESKTOP-HTU2IVD",[[-1,6954,"    "]],[6954,6958],[6954,6954]]],[1589883379256,["Wahaha@DESKTOP-HTU2IVD",[[-1,6996,"    "]],[6996,7000],[6996,6996]]],[1589883383364,["Wahaha@DESKTOP-HTU2IVD",[[-1,7020,"    "]],[7020,7024],[7020,7020]]]],null,"Wahaha@DESKTOP-HTU2IVD"],["27f9ea38-82d8-45c4-95b8-6568ab637504",1590049670549,"# java面试题\n\n### 线程相关\n#### 1. 什么是进程\n进程是系统中正在运行的一个程序，程序一旦运行就是进程\n#### 2. 什么是线程\n是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务\n#### 3. 线程实现的方式\n  - 继承Thread类\n  - 实现runable接口\n  - 实现callable接口\n#### 4. Thread 类中的start() 和 run() 方法有什么区别?\n - start(): start方法来启动线程，真正实现了多线程运行，这时无需等待run方法体中的代码执行完毕而直接继续执行后续的代码。通过调用Thread类的 start()方法来启动一个线程，这时此线程处于就绪（可运行）状态，并没有运行，一旦得到cpu时间片，就开始执行run()方法，这里的run()方法 称为线程体，它包含了要执行的这个线程的内容，Run方法运行结束，此线程随即终止。\n - run(): run()方法只是类的一个普通方法而已，如果直接调用Run方法，程序中依然只有主线程这一个线程，其程序执行路径还是只有一条，还是要顺序执行，还是要等待run方法体执行完毕后才可继续执行下面的代码，这样就没有达到写线程的目的。\n - 调用start方法方可启动线程，而run方法只是thread类中的一个普通方法调用，还是在主线程里执行。\n#### 5. 线程的五种状态\n - 新建状态(NEW) 新建一个了线程\n - 可运行状态(RUNNABLE) 线程对象创建后，其他线程调用此对象的start()方法，该状态的线程位于可运行线程池中，等待被线程调度选中，获取cpu 的使用权 。\n - 运行(RUNNING)：可运行状态(runnable)的线程获得了cpu 时间片（timeslice）执行程序代码\n - 阻塞(BLOCKED)：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种：\n   + 等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。\n   + 同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。\n   + 其他阻塞：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。\n  - 死亡(DEAD)：线程run()、main() 方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生\n####  6. 如何知道代码段被哪个线程调用\n```\nSystem.out.println(Thread.currentThread().getName());\n```\n#### 7. sleep()方法\n方法sleep()的作用是在指定的毫秒数内让当前的“正在执行的线程”休眠（暂停执行\n#### 8. 停止线程\n1. run方法执行完成，自然终止。\n2. stop()方法，suspend()以及resume()都是过期作废方法，使用它们结果不可预期。\n\n大多数停止一个线程的操作使用Thread.interrupt()等于说给线程打一个停止的标记, 此方法不回去终止一个正\n在运行的线程，需要加入一个判断才能可以完成线程的停止\n#### 9. interrupted 和 isInterrupted\n\ninterrupted : 判断当前线程是否已经中断,会清除状态。\n\nisInterrupted ：判断线程是否已经中断，不会清除状态。\n\n#### 10.yield\n放弃当前cpu资源，将它让给其他的任务占用cpu执行时间。但放弃的时间不确定，有可能刚刚放弃，马上又获得cpu时间片\n\n#### 11.设置线程上下文类加载器\n1.  获取线程上下文类加载器\n```\nSystem.out.println(Thread.currentThread().getName());\n```\n2. ​ 设置线程类加载器（可以打破Java类加载器的父类委托机制）\n```\npublic  void  setContextClassLoader(ClassLoader cl)\n```\n\n#### 12. join\n join是指把指定的线程加入到当前线程，比如join某个线程a,会让当前线程b进入等待,直到a的生命周期结束，此期间b线程是处于blocked状态。\n\n#### 13. 什么是synchronized?\nsynchronized关键字可以时间一个简单的策略来防止线程干扰和内存一致性错误，如果一个对象是对多个线程可见的，那么对该对想的所有读写都将通过同步的方式来进行。\n\n#### 14. synchronized包括哪两个jvm重要的指令？\n monitor enter 和 monitor exit\n \n#### 15. synchronized关键字用法?\n 可以用于对代码块或方法的修饰\n \n#### 16. synchronized锁的是什么?\n普通同步方法 —————> 锁的是当前实力对象。\n\n静态同步方法—————> 锁的是当前类的Class对象。\n\n同步方法块 —————> 锁的是synchonized括号里配置的对象。\n\n#### 17. volatile关键字\nvolatile 是轻量级的synchronized,它在多处理器开发中保证了共享变量的“可见性“。\n\nJava允许线程访问共享变量，为了保证共享变量能准确和一致的更新，线程应该确保排它锁单独获得这个变量。如果一个字段被声明为volatile,Java线程内存模型所有线程看到这个变量的值是一致的。\n\n#### 18. 等待/通知机制\n一个线程修改了一个对象的值，而另一个线程感知到了变化，然后进行相应的操作。\n 等待\n```\n  synchronized(obj) { \n       while(条件不满足) { \n             obj.wait();\n           } \n         执行对应逻辑 \n  }\n```\n\n通知\n```\n  synchronized(obj){\n        改变条件\n            obj.notifyAll();\n\n  }\n```\n\n#### 19. notify\nnotify()也是Object类的通用方法，也要在同步方法或同步代码块内调用，该方法用来通知哪些可能灯光对象的对象锁的其他线程，如果有多个线程等待，则随机挑选出其中一个呈wait状态的线程，对其发出 通知 notify，并让它等待获取该对象的对象锁。\n\n#### 20. notify/notifyAll\nnotify等于说将等待队列中的一个线程移动到同步队列中，而notifyAll是将等待队列中的所有线程全部移动到同步队列中。\n\n#### 21.ThreadLocal\n\n主要解决每一个线程想绑定自己的值，存放线程的私有数据。\n  - ThreadLocal使用\n 获取当前的线程的值通过get(),设置set(T) 方式来设置值。\n```\n  public class XKThreadLocal {\n  \n      public static ThreadLocal threadLocal = new ThreadLocal();\n  \n      public static void main(String[] args) {\n          if (threadLocal.get() == null) {\n              System.out.println(\"未设置过值\");\n              threadLocal.set(\"线程学习\");\n          }\n          System.out.println(threadLocal.get());\n      }\n  \n  }\n```\n  print：\n```\n  未设置过值\n  线程学习\n```\n\n -  解决get()返回null问题\n通过继承重写initialValue()方法即可。\n```\n  public class ThreadLocalExt extends ThreadLocal{\n  \n      static ThreadLocalExt threadLocalExt = new ThreadLocalExt();\n  \n      @Override\n      protected Object initialValue() {\n          return \"线程学习\";\n      }\n  \n      public static void main(String[] args) {\n          System.out.println(threadLocalExt.get());\n      }\n  }\n```\nprint:\n```\n  线程学习\n```\n\n \n#### 22.lock接口\n锁可以防止多个线程同时共享资源。Java5前程序是靠synchronized实现锁功能。Java5之后，并发包新增Lock接口来实现锁功能。\n\n#### 23.lock接口提供synchronized不具备的主要特性\n\n特性|描述\n---|---\n  尝试非阻塞地获取锁 |   当前线程尝试获取锁，如果这一时刻锁没有被其他线程获取到，则成功获取并持有该锁\n 能被中断的获取锁|   与synchronized不同，获取到锁的线程能够响应中断，当获取到锁的线程被中断时，中断异常将会抛出，同时锁会被释放\n 超时获取锁|   在指定时间内获取锁，如果截止时间仍没有获取到锁，则返回\n   \n#### 24.重入锁RenntrantLock \n\n1. 支持重进入的锁，它表示该锁能够支持一个线程对资源的重复加锁。除此之外，该锁的还支持获取锁时的公平和非公平性选择。\n\n2. 重进入是指任意线程在获取到锁之后能够再次获锁而不被锁阻塞。\n该特性主要解决以下两个问题：\n - 锁需要去识别获取锁的线程是否为当前占据锁的线程，如果是则再次成功获取。\n - 所得最终释放。线程重复n次是获取了锁，随后在第n次释放该锁后，其他线程能够获取到该锁。\n\n3. RenntrantLock 默认为非公平锁\n4. 公平性与否针对获取锁来说的，如果一个锁是公平的，那么锁的获取顺序就应该符合请求的绝对时间顺序，也就是FIFO。\n\n#### 25. 读写锁\n读写锁允许同一时刻多个线程访问，但是写线程和其他写线程均被阻塞。读写锁维护一个读锁一个写锁，读写分离，并发性能得到提高\njava提供实现读写锁的实现类是ReentrantReadWriteLock.\n\n#### 26.Java并发容器\n1. concurrenthashmap, copyonwritearraylist, CopyOnWriteArraySet, ConcurrentLinkedQueue\n2. ConcurrentSkipListMap、ConcurrentSkipListSet、ArrayBlockingQueue、\n3. LinkedBlockingQueue、LinkedBlockingDeque、PriorityBlockingQueue、SynchronousQueue、LinkedTransferQueue、DelayQueue\n\n#### 27. 什么是阻塞队列\n- 阻塞队列是一个支持两个附加操作的队列,这两个附加操作支持阻塞的插入和移除方法\n 1. 支持阻塞的插入方法：当队列满时，队列会阻塞插入元素的线程，直到队列不满。\n 2. 支持阻塞的一处方法：当队列为空时，获取元素的线程会等待队列变为非空\n- 阻塞队列的常用应用场景 ：\n常用于生产者和消费者模式中，生产者是往队列中添加元素的线程，消费者是从队列中提取元素的线程。阻塞队列正好是生产者存放，消费者来获取的容器\n- java里的阻塞队列\nArrayBlockingQueue： 数组结构组成的 |有界阻塞队列 \nLinkedBlockingQueue： 链表结构组成的|有界阻塞队列 \nPriorityBlockingQueue: 支持优先级排序|无界阻塞队列 \nDelayQueue： 优先级队列实现|无界阻塞队列 \nSynchronousQueue： 不存储元素| 阻塞队列 \nLinkedTransferQueue： 链表结构组成|无界阻塞队列 \nLinkedBlockingDeque： 链表结构组成|双向阻塞队列\n\n#### 28. 为什么使用线程池\n1. 降低系统消耗: 重复利用已经创建的线程降低线程创建和销毁造成的资源损耗\n2. 提高响应速度：当任务到达时，任务不需要等待线程的创建就可以立即执行\n3. 提供线程的可管理性：可以通过设置合理分配、调优、监控\n\n#### 29. 线程池的工作流程\n1. 判断核心线程池的线程是否都在执行任务，否--->创建一个新的线程来执行任务。是--->走下个流程\n2. 判断工作队列是否已满: 否--->新任务储存到这个工作队列中， 是---> 走下个流程\n3. 判断线程池里的线程是否都在工作状态: 否--->创建一个新的线程来执行任务。是--->走下个流程\n4. 按照设置的策略来处理无法执行的任务\n\n#### 30. 创建线程池参数有哪些\n\n```\npublic ThreadPoolExecutor( int corePoolSize, \n                           int maximumPoolSize, \n                           long keepAliveTime, TimeUnit unit,\n                           BlockingQueue<Runnable> workQueue, \n                           ThreadFactory threadFactory, \n                           RejectedExecutionHandler handler)\n\n```\n\n1. corePoolSize:核心线程池大小，当提交一个任务时，线程池会创建一个线程来执行任务，即使其他空闲的核心线程能够执行新任务也会创建，等待需要执行的任务数大于线程核心大小就不会继续创建。\n\n2. maximumPoolSize:线程池最大数，允许创建的最大线程数，如果队列满了，并且已经创建的线程数小于最大线程数，则会创建新的线程执行任务。如果是无界队列，这个参数基本没用。\n\n3. keepAliveTime: 线程保持活动时间，线程池工作线程空闲后，保持存活的时间，所以如果任务很多，并且每个任务执行时间较短，可以调大时间，提高线程利用率。\n\n4. unit: 线程保持活动时间单位，天（DAYS)、小时(HOURS)、分钟(MINUTES、毫秒MILLISECONDS)、微秒(MICROSECONDS)、纳秒(NANOSECONDS)\n\n5. workQueue: 任务队列，保存等待执行的任务的阻塞队列。\n一般来说可以选择如下阻塞队列：\nArrayBlockingQueue:基于数组的有界阻塞队列。\nLinkedBlockingQueue:基于链表的阻塞队列。\nSynchronizedQueue:一个不存储元素的阻塞队列。\nPriorityBlockingQueue:一个具有优先级的阻塞队列。\n\n6. threadFactory：设置创建线程的工厂，可以通过线程工厂给每个创建出来的线程设置更有意义的名字。\n\n7. handler: 饱和策略也叫拒绝策略。当队列和线程池都满了，即达到饱和状态。所以需要采取策略来处理新的任务。默认策略是AbortPolicy。\n AbortPolicy:直接抛出异常。\nCallerRunsPolicy: 调用者所在的线程来运行任务。\nDiscardOldestPolicy:丢弃队列里最近的一个任务，并执行当前任务。\nDiscardPolicy:不处理，直接丢掉。\n当然可以根据自己的应用场景，实现RejectedExecutionHandler接口自定义策略。\n\n\n",[[1590049617745,["Wahaha@DESKTOP-HTU2IVD",[[1,7071,"\n"]],[7070,7070],[7071,7071]]],[1590049617988,["Wahaha@DESKTOP-HTU2IVD",[[1,7072,"\n"]],[7071,7071],[7072,7072]]],[1590049618188,["Wahaha@DESKTOP-HTU2IVD",[[1,7073,"\n"]],[7072,7072],[7073,7073]]],[1590049618371,["Wahaha@DESKTOP-HTU2IVD",[[1,7074,"\n"]],[7073,7073],[7074,7074]]],[1590049618533,["Wahaha@DESKTOP-HTU2IVD",[[1,7075,"\n"]],[7074,7074],[7075,7075]]],[1590049618703,["Wahaha@DESKTOP-HTU2IVD",[[1,7076,"\n"]],[7075,7075],[7076,7076]]],[1590049618871,["Wahaha@DESKTOP-HTU2IVD",[[1,7077,"\n"]],[7076,7076],[7077,7077]]],[1590049619048,["Wahaha@DESKTOP-HTU2IVD",[[1,7078,"\n"]],[7077,7077],[7078,7078]]],[1590049619220,["Wahaha@DESKTOP-HTU2IVD",[[1,7079,"\n"]],[7078,7078],[7079,7079]]],[1590049619397,["Wahaha@DESKTOP-HTU2IVD",[[1,7080,"\n"]],[7079,7079],[7080,7080]]],[1590049619578,["Wahaha@DESKTOP-HTU2IVD",[[1,7081,"\n"]],[7080,7080],[7081,7081]]],[1590049619754,["Wahaha@DESKTOP-HTU2IVD",[[1,7082,"\n"]],[7081,7081],[7082,7082]]],[1590049619929,["Wahaha@DESKTOP-HTU2IVD",[[1,7083,"\n"]],[7082,7082],[7083,7083]]],[1590049620128,["Wahaha@DESKTOP-HTU2IVD",[[1,7084,"\n"]],[7083,7083],[7084,7084]]],[1590049622792,["Wahaha@DESKTOP-HTU2IVD",[[-1,7084,"\n"]],[7077,7077],[7076,7076]]],[1590049623048,["Wahaha@DESKTOP-HTU2IVD",[[-1,7083,"\n"]],[7076,7076],[7075,7075]]],[1590049625758,["Wahaha@DESKTOP-HTU2IVD",[[-1,7082,"\n"]],[7075,7075],[7074,7074]]]],null,"Wahaha@DESKTOP-HTU2IVD"],["afc03257-9c86-483d-8430-5411c2b9788e",1590131473862,"# java面试题\n\n### 线程相关\n#### 1. 什么是进程\n进程是系统中正在运行的一个程序，程序一旦运行就是进程\n#### 2. 什么是线程\n是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务\n#### 3. 线程实现的方式\n  - 继承Thread类\n  - 实现runable接口\n  - 实现callable接口\n#### 4. Thread 类中的start() 和 run() 方法有什么区别?\n - start(): start方法来启动线程，真正实现了多线程运行，这时无需等待run方法体中的代码执行完毕而直接继续执行后续的代码。通过调用Thread类的 start()方法来启动一个线程，这时此线程处于就绪（可运行）状态，并没有运行，一旦得到cpu时间片，就开始执行run()方法，这里的run()方法 称为线程体，它包含了要执行的这个线程的内容，Run方法运行结束，此线程随即终止。\n - run(): run()方法只是类的一个普通方法而已，如果直接调用Run方法，程序中依然只有主线程这一个线程，其程序执行路径还是只有一条，还是要顺序执行，还是要等待run方法体执行完毕后才可继续执行下面的代码，这样就没有达到写线程的目的。\n - 调用start方法方可启动线程，而run方法只是thread类中的一个普通方法调用，还是在主线程里执行。\n#### 5. 线程的五种状态\n - 新建状态(NEW) 新建一个了线程\n - 可运行状态(RUNNABLE) 线程对象创建后，其他线程调用此对象的start()方法，该状态的线程位于可运行线程池中，等待被线程调度选中，获取cpu 的使用权 。\n - 运行(RUNNING)：可运行状态(runnable)的线程获得了cpu 时间片（timeslice）执行程序代码\n - 阻塞(BLOCKED)：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种：\n   + 等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。\n   + 同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。\n   + 其他阻塞：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。\n  - 死亡(DEAD)：线程run()、main() 方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生\n####  6. 如何知道代码段被哪个线程调用\n```\nSystem.out.println(Thread.currentThread().getName());\n```\n#### 7. sleep()方法\n方法sleep()的作用是在指定的毫秒数内让当前的“正在执行的线程”休眠（暂停执行\n#### 8. 停止线程\n1. run方法执行完成，自然终止。\n2. stop()方法，suspend()以及resume()都是过期作废方法，使用它们结果不可预期。\n\n大多数停止一个线程的操作使用Thread.interrupt()等于说给线程打一个停止的标记, 此方法不回去终止一个正\n在运行的线程，需要加入一个判断才能可以完成线程的停止\n#### 9. interrupted 和 isInterrupted\n\ninterrupted : 判断当前线程是否已经中断,会清除状态。\n\nisInterrupted ：判断线程是否已经中断，不会清除状态。\n\n#### 10.yield\n放弃当前cpu资源，将它让给其他的任务占用cpu执行时间。但放弃的时间不确定，有可能刚刚放弃，马上又获得cpu时间片\n\n#### 11.设置线程上下文类加载器\n1.  获取线程上下文类加载器\n```\nSystem.out.println(Thread.currentThread().getName());\n```\n2. ​ 设置线程类加载器（可以打破Java类加载器的父类委托机制）\n```\npublic  void  setContextClassLoader(ClassLoader cl)\n```\n\n#### 12. join\n join是指把指定的线程加入到当前线程，比如join某个线程a,会让当前线程b进入等待,直到a的生命周期结束，此期间b线程是处于blocked状态。\n\n#### 13. 什么是synchronized?\nsynchronized关键字可以时间一个简单的策略来防止线程干扰和内存一致性错误，如果一个对象是对多个线程可见的，那么对该对想的所有读写都将通过同步的方式来进行。\n\n#### 14. synchronized包括哪两个jvm重要的指令？\n monitor enter 和 monitor exit\n \n#### 15. synchronized关键字用法?\n 可以用于对代码块或方法的修饰\n \n#### 16. synchronized锁的是什么?\n普通同步方法 —————> 锁的是当前实力对象。\n\n静态同步方法—————> 锁的是当前类的Class对象。\n\n同步方法块 —————> 锁的是synchonized括号里配置的对象。\n\n#### 17. volatile关键字\nvolatile 是轻量级的synchronized,它在多处理器开发中保证了共享变量的“可见性“。\n\nJava允许线程访问共享变量，为了保证共享变量能准确和一致的更新，线程应该确保排它锁单独获得这个变量。如果一个字段被声明为volatile,Java线程内存模型所有线程看到这个变量的值是一致的。\n\n#### 18. 等待/通知机制\n一个线程修改了一个对象的值，而另一个线程感知到了变化，然后进行相应的操作。\n 等待\n```\n  synchronized(obj) { \n       while(条件不满足) { \n             obj.wait();\n           } \n         执行对应逻辑 \n  }\n```\n\n通知\n```\n  synchronized(obj){\n        改变条件\n            obj.notifyAll();\n\n  }\n```\n\n#### 19. notify\nnotify()也是Object类的通用方法，也要在同步方法或同步代码块内调用，该方法用来通知哪些可能灯光对象的对象锁的其他线程，如果有多个线程等待，则随机挑选出其中一个呈wait状态的线程，对其发出 通知 notify，并让它等待获取该对象的对象锁。\n\n#### 20. notify/notifyAll\nnotify等于说将等待队列中的一个线程移动到同步队列中，而notifyAll是将等待队列中的所有线程全部移动到同步队列中。\n\n#### 21.ThreadLocal\n\n主要解决每一个线程想绑定自己的值，存放线程的私有数据。\n  - ThreadLocal使用\n 获取当前的线程的值通过get(),设置set(T) 方式来设置值。\n```\n  public class XKThreadLocal {\n  \n      public static ThreadLocal threadLocal = new ThreadLocal();\n  \n      public static void main(String[] args) {\n          if (threadLocal.get() == null) {\n              System.out.println(\"未设置过值\");\n              threadLocal.set(\"线程学习\");\n          }\n          System.out.println(threadLocal.get());\n      }\n  \n  }\n```\n  print：\n```\n  未设置过值\n  线程学习\n```\n\n -  解决get()返回null问题\n通过继承重写initialValue()方法即可。\n```\n  public class ThreadLocalExt extends ThreadLocal{\n  \n      static ThreadLocalExt threadLocalExt = new ThreadLocalExt();\n  \n      @Override\n      protected Object initialValue() {\n          return \"线程学习\";\n      }\n  \n      public static void main(String[] args) {\n          System.out.println(threadLocalExt.get());\n      }\n  }\n```\nprint:\n```\n  线程学习\n```\n\n \n#### 22.lock接口\n锁可以防止多个线程同时共享资源。Java5前程序是靠synchronized实现锁功能。Java5之后，并发包新增Lock接口来实现锁功能。\n\n#### 23.lock接口提供synchronized不具备的主要特性\n\n特性|描述\n---|---\n  尝试非阻塞地获取锁 |   当前线程尝试获取锁，如果这一时刻锁没有被其他线程获取到，则成功获取并持有该锁\n 能被中断的获取锁|   与synchronized不同，获取到锁的线程能够响应中断，当获取到锁的线程被中断时，中断异常将会抛出，同时锁会被释放\n 超时获取锁|   在指定时间内获取锁，如果截止时间仍没有获取到锁，则返回\n   \n#### 24.重入锁RenntrantLock \n\n1. 支持重进入的锁，它表示该锁能够支持一个线程对资源的重复加锁。除此之外，该锁的还支持获取锁时的公平和非公平性选择。\n\n2. 重进入是指任意线程在获取到锁之后能够再次获锁而不被锁阻塞。\n该特性主要解决以下两个问题：\n - 锁需要去识别获取锁的线程是否为当前占据锁的线程，如果是则再次成功获取。\n - 所得最终释放。线程重复n次是获取了锁，随后在第n次释放该锁后，其他线程能够获取到该锁。\n\n3. RenntrantLock 默认为非公平锁\n4. 公平性与否针对获取锁来说的，如果一个锁是公平的，那么锁的获取顺序就应该符合请求的绝对时间顺序，也就是FIFO。\n\n#### 25. 读写锁\n读写锁允许同一时刻多个线程访问，但是写线程和其他写线程均被阻塞。读写锁维护一个读锁一个写锁，读写分离，并发性能得到提高\njava提供实现读写锁的实现类是ReentrantReadWriteLock.\n\n#### 26.Java并发容器\n1. concurrenthashmap, copyonwritearraylist, CopyOnWriteArraySet, ConcurrentLinkedQueue\n2. ConcurrentSkipListMap、ConcurrentSkipListSet、ArrayBlockingQueue、\n3. LinkedBlockingQueue、LinkedBlockingDeque、PriorityBlockingQueue、SynchronousQueue、LinkedTransferQueue、DelayQueue\n\n#### 27. 什么是阻塞队列\n- 阻塞队列是一个支持两个附加操作的队列,这两个附加操作支持阻塞的插入和移除方法\n 1. 支持阻塞的插入方法：当队列满时，队列会阻塞插入元素的线程，直到队列不满。\n 2. 支持阻塞的一处方法：当队列为空时，获取元素的线程会等待队列变为非空\n- 阻塞队列的常用应用场景 ：\n常用于生产者和消费者模式中，生产者是往队列中添加元素的线程，消费者是从队列中提取元素的线程。阻塞队列正好是生产者存放，消费者来获取的容器\n- java里的阻塞队列\nArrayBlockingQueue： 数组结构组成的 |有界阻塞队列 \nLinkedBlockingQueue： 链表结构组成的|有界阻塞队列 \nPriorityBlockingQueue: 支持优先级排序|无界阻塞队列 \nDelayQueue： 优先级队列实现|无界阻塞队列 \nSynchronousQueue： 不存储元素| 阻塞队列 \nLinkedTransferQueue： 链表结构组成|无界阻塞队列 \nLinkedBlockingDeque： 链表结构组成|双向阻塞队列\n\n#### 28. 为什么使用线程池\n1. 降低系统消耗: 重复利用已经创建的线程降低线程创建和销毁造成的资源损耗\n2. 提高响应速度：当任务到达时，任务不需要等待线程的创建就可以立即执行\n3. 提供线程的可管理性：可以通过设置合理分配、调优、监控\n\n#### 29. 线程池的工作流程\n1. 判断核心线程池的线程是否都在执行任务，否--->创建一个新的线程来执行任务。是--->走下个流程\n2. 判断工作队列是否已满: 否--->新任务储存到这个工作队列中， 是---> 走下个流程\n3. 判断线程池里的线程是否都在工作状态: 否--->创建一个新的线程来执行任务。是--->走下个流程\n4. 按照设置的策略来处理无法执行的任务\n\n#### 30. 创建线程池参数有哪些\n\n```\npublic ThreadPoolExecutor( int corePoolSize, \n                           int maximumPoolSize, \n                           long keepAliveTime, TimeUnit unit,\n                           BlockingQueue<Runnable> workQueue, \n                           ThreadFactory threadFactory, \n                           RejectedExecutionHandler handler)\n\n```\n\n1. corePoolSize:核心线程池大小，当提交一个任务时，线程池会创建一个线程来执行任务，即使其他空闲的核心线程能够执行新任务也会创建，等待需要执行的任务数大于线程核心大小就不会继续创建。\n\n2. maximumPoolSize:线程池最大数，允许创建的最大线程数，如果队列满了，并且已经创建的线程数小于最大线程数，则会创建新的线程执行任务。如果是无界队列，这个参数基本没用。\n\n3. keepAliveTime: 线程保持活动时间，线程池工作线程空闲后，保持存活的时间，所以如果任务很多，并且每个任务执行时间较短，可以调大时间，提高线程利用率。\n\n4. unit: 线程保持活动时间单位，天（DAYS)、小时(HOURS)、分钟(MINUTES、毫秒MILLISECONDS)、微秒(MICROSECONDS)、纳秒(NANOSECONDS)\n\n5. workQueue: 任务队列，保存等待执行的任务的阻塞队列。\n一般来说可以选择如下阻塞队列：\nArrayBlockingQueue:基于数组的有界阻塞队列。\nLinkedBlockingQueue:基于链表的阻塞队列。\nSynchronizedQueue:一个不存储元素的阻塞队列。\nPriorityBlockingQueue:一个具有优先级的阻塞队列。\n\n6. threadFactory：设置创建线程的工厂，可以通过线程工厂给每个创建出来的线程设置更有意义的名字。\n\n7. handler: 饱和策略也叫拒绝策略。当队列和线程池都满了，即达到饱和状态。所以需要采取策略来处理新的任务。默认策略是AbortPolicy。\n AbortPolicy:直接抛出异常。\nCallerRunsPolicy: 调用者所在的线程来运行任务。\nDiscardOldestPolicy:丢弃队列里最近的一个任务，并执行当前任务。\nDiscardPolicy:不处理，直接丢掉。\n当然可以根据自己的应用场景，实现RejectedExecutionHandler接口自定义策略。\n\n\n\n\n\n\n\n\n\n\n\n\n\n",[[1590131458876,["Wahaha@DESKTOP-HTU2IVD",[[1,7070,"#### 31.线程池提交的方式"]],[7070,7070],[7086,7086]]],[1590131459520,["Wahaha@DESKTOP-HTU2IVD",[[1,7098,"\n"]],[7086,7086],[7087,7087]]],[1590131466874,["Wahaha@DESKTOP-HTU2IVD",[[1,7087,"excuse"]],[7087,7087],[7093,7093]]],[1590131468347,["Wahaha@DESKTOP-HTU2IVD",[[-1,7091,"se"]],[7093,7093],[7091,7091]]],[1590131471737,["Wahaha@DESKTOP-HTU2IVD",[[1,7091,"te()"]],[7091,7091],[7095,7095]]],[1590131478345,["Wahaha@DESKTOP-HTU2IVD",[[1,7097," submit()"]],[7097,7097],[7106,7106]]],[1590131489768,["Wahaha@DESKTOP-HTU2IVD",[[1,7107,"excute(): wu"]],[7107,7107],[7119,7119]]],[1590131490407,["Wahaha@DESKTOP-HTU2IVD",[[-1,7117,"wu"]],[7119,7119],[7117,7117]]],[1590131495064,["Wahaha@DESKTOP-HTU2IVD",[[1,7117,"无返回值，"]],[7117,7117],[7122,7122]]],[1590131592786,[null,[[-1,7095,"\n\n"],[1,7097,", "],[1,7122,"\n\n"]],[7095,7095],[7124,7124]]],[1590131592786,[null,[[1,7095,"\n\n"],[-1,7095,", "],[-1,7122,"\n\n"]],[7124,7124],[7095,7095]]],[1590131584101,["Wahaha@DESKTOP-HTU2IVD",[[1,7122,"所以无法判断任务石头"]],[7122,7122],[7132,7132]]],[1590131585128,["Wahaha@DESKTOP-HTU2IVD",[[-1,7130,"石头"]],[7132,7132],[7130,7130]]],[1590131588215,["Wahaha@DESKTOP-HTU2IVD",[[1,7130,"是否成功"]],[7130,7130],[7134,7134]]],[1590131589121,["Wahaha@DESKTOP-HTU2IVD",[[1,7145,"\n"]],[7134,7134],[7135,7135]]],[1590131592591,["Wahaha@DESKTOP-HTU2IVD",[[1,7135,"submit()"]],[7135,7135],[7143,7143]]],[1590131652784,[null,[[-1,7095,"\n\n"],[1,7097,", "],[1,7143,"\n\n"]],[7095,7095],[7145,7145]]],[1590131652784,[null,[[1,7095,"\n\n"],[-1,7095,", "],[-1,7143,"\n\n"]],[7145,7145],[7095,7095]]],[1590131594184,["Wahaha@DESKTOP-HTU2IVD",[[1,7143,"： "]],[7143,7143],[7145,7145]]],[1590131596772,["Wahaha@DESKTOP-HTU2IVD",[[-1,7142,")： "]],[7145,7145],[7142,7142]]],[1590131601162,["Wahaha@DESKTOP-HTU2IVD",[[1,7142,")： "]],[7142,7142],[7145,7145]]],[1590131601875,["Wahaha@DESKTOP-HTU2IVD",[[-1,7144," "]],[7145,7145],[7144,7144]]],[1590131614310,["Wahaha@DESKTOP-HTU2IVD",[[1,7144,"用于提交需要有返回值得"]],[7144,7144],[7155,7155]]],[1590131618601,["Wahaha@DESKTOP-HTU2IVD",[[-1,7154,"得"]],[7155,7155],[7154,7154]]],[1590131652577,["Wahaha@DESKTOP-HTU2IVD",[[1,7154,"的任务，线程池返回一个future类型对象，通过future对象可以"]],[7154,7154],[7188,7188]]],[1590131712790,[null,[[-1,7095,"\n\n"],[1,7097,", "],[1,7188,"\n\n"]],[7095,7095],[7190,7190]]],[1590131712790,[null,[[1,7095,"\n\n"],[-1,7095,", "],[-1,7188,"\n\n"]],[7190,7190],[7095,7095]]],[1590131658646,["Wahaha@DESKTOP-HTU2IVD",[[1,7188,"判断任务石头"]],[7188,7188],[7194,7194]]],[1590131660089,["Wahaha@DESKTOP-HTU2IVD",[[-1,7192,"石头"]],[7194,7194],[7192,7192]]],[1590131674293,["Wahaha@DESKTOP-HTU2IVD",[[1,7192,"是否执行成功，并且同过"]],[7192,7192],[7203,7203]]],[1590131674931,["Wahaha@DESKTOP-HTU2IVD",[[-1,7201,"同过"]],[7203,7203],[7201,7201]]],[1590131686692,["Wahaha@DESKTOP-HTU2IVD",[[1,7201,"通过future的get(0"]],[7201,7201],[7215,7215]]],[1590131687260,["Wahaha@DESKTOP-HTU2IVD",[[-1,7214,"0"]],[7215,7215],[7214,7214]]],[1590131708216,["Wahaha@DESKTOP-HTU2IVD",[[1,7214,")来获取返回值，get()fang"]],[7214,7214],[7231,7231]]],[1590131709519,["Wahaha@DESKTOP-HTU2IVD",[[-1,7227,"fang"]],[7231,7231],[7227,7227]]],[1590131710902,["Wahaha@DESKTOP-HTU2IVD",[[1,7227,"方法"]],[7227,7227],[7229,7229]]],[1590131772794,[null,[[-1,7095,"\n\n"],[1,7097,", "],[1,7229,"\n\n"]],[7095,7095],[7231,7231]]],[1590131772794,[null,[[1,7095,"\n\n"],[-1,7095,", "],[-1,7229,"\n\n"]],[7231,7231],[7095,7095]]],[1590131726033,["Wahaha@DESKTOP-HTU2IVD",[[1,7229,"会阻塞当前线程知道任务完成， "]],[7229,7229],[7244,7244]]],[1590131727550,["Wahaha@DESKTOP-HTU2IVD",[[-1,7242,"， "]],[7244,7244],[7242,7242]]],[1590131741731,["Wahaha@DESKTOP-HTU2IVD",[[1,7242,"。get(long timeout,TimeUnit unit)可以设置超市时间。"]],[7242,7242],[7283,7283]]],[1590131743540,["Wahaha@DESKTOP-HTU2IVD",[[1,7294,"\n"]],[7283,7283],[7284,7284]]],[1590131744703,["Wahaha@DESKTOP-HTU2IVD",[[1,7295,"\n"]],[7284,7284],[7285,7285]]],[1590131757250,["Wahaha@DESKTOP-HTU2IVD",[[1,7285,"#### 32. 线程池关闭方式"]],[7285,7285],[7301,7301]]],[1590131758086,["Wahaha@DESKTOP-HTU2IVD",[[1,7312,"\n"]],[7301,7301],[7302,7302]]],[1590131771912,["Wahaha@DESKTOP-HTU2IVD",[[1,7302,"可以通过shutdown(0"]],[7302,7302],[7316,7316]]],[1590131832817,[null,[[-1,7095,"\n\n"],[1,7097,", "],[1,7316,"\n\n"]],[7095,7095],[7318,7318]]],[1590131832817,[null,[[1,7095,"\n\n"],[-1,7095,", "],[-1,7316,"\n\n"]],[7318,7318],[7095,7095]]],[1590131782284,["Wahaha@DESKTOP-HTU2IVD",[[1,7316,"或shutdownnot"]],[7316,7316],[7328,7328]]],[1590131783098,["Wahaha@DESKTOP-HTU2IVD",[[-1,7327,"t"]],[7328,7328],[7327,7327]]],[1590131801824,["Wahaha@DESKTOP-HTU2IVD",[[1,7327,"w()来关闭县城次。他们"]],[7327,7327],[7339,7339]]],[1590131807440,["Wahaha@DESKTOP-HTU2IVD",[[-1,7331,"关闭县城次。他们"]],[7339,7339],[7331,7331]]],[1590131830547,["Wahaha@DESKTOP-HTU2IVD",[[1,7331,"关闭线程池。他们的工作原理是通过遍历县城里的"]],[7331,7331],[7353,7353]]],[1590131831457,["Wahaha@DESKTOP-HTU2IVD",[[-1,7349,"县城里的"]],[7353,7353],[7349,7349]]],[1590131892815,[null,[[-1,7095,"\n\n"],[1,7097,", "],[1,7349,"\n\n"]],[7095,7095],[7351,7351]]],[1590131892815,[null,[[1,7095,"\n\n"],[-1,7095,", "],[-1,7349,"\n\n"]],[7351,7351],[7095,7095]]],[1590131890698,["Wahaha@DESKTOP-HTU2IVD",[[1,7349,"线程池的工作线程，然后逐个调用线程的interrupt来中断线程，所以"]],[7349,7349],[7384,7384]]],[1590131952802,[null,[[-1,7095,"\n\n"],[1,7097,", "],[1,7384,"\n\n"]],[7095,7095],[7386,7386]]],[1590131952802,[null,[[1,7095,"\n\n"],[-1,7095,", "],[-1,7384,"\n\n"]],[7386,7386],[7095,7095]]],[1590131897906,["Wahaha@DESKTOP-HTU2IVD",[[1,7384,"无法响应终端的人"]],[7384,7384],[7392,7392]]],[1590131898764,["Wahaha@DESKTOP-HTU2IVD",[[-1,7391,"人"]],[7392,7392],[7391,7391]]],[1590131912619,["Wahaha@DESKTOP-HTU2IVD",[[1,7391,"任务可能永远无他定制"]],[7391,7391],[7401,7401]]],[1590131915100,["Wahaha@DESKTOP-HTU2IVD",[[-1,7397,"无他定制"]],[7401,7401],[7397,7397]]],[1590131917461,["Wahaha@DESKTOP-HTU2IVD",[[1,7397,"停止。"]],[7397,7397],[7400,7400]]],[1590133152830,[null,[[-1,7095,"\n\n"],[1,7097,", "],[1,7400,"\n\n"]],[7095,7095],[7402,7402]]],[1590133152830,[null,[[1,7095,"\n\n"],[-1,7095,", "],[-1,7400,"\n\n"]],[7402,7402],[7095,7095]]],[1590133101339,["Wahaha@DESKTOP-HTU2IVD",[[1,7411,"\n"]],[7400,7400],[7401,7401]]],[1590133150353,["Wahaha@DESKTOP-HTU2IVD",[[1,7401,"shutdownnow首先将线程池状态设置为stop，然后尝试停止所有正在"]],[7401,7401],[7438,7438]]],[1590133212854,[null,[[-1,7095,"\n\n"],[1,7097,", "],[1,7438,"\n\n"]],[7095,7095],[7440,7440]]],[1590133212854,[null,[[1,7095,"\n\n"],[-1,7095,", "],[-1,7438,"\n\n"]],[7440,7440],[7095,7095]]],[1590133169391,["Wahaha@DESKTOP-HTU2IVD",[[1,7438,"执行或者暂停的线程，"]],[7438,7438],[7448,7448]]],[1590133169682,["Wahaha@DESKTOP-HTU2IVD",[[1,7459,"\n"]],[7448,7448],[7449,7449]]],[1590133170859,["Wahaha@DESKTOP-HTU2IVD",[[-1,7459,"\n"]],[7449,7449],[7448,7448]]],[1590133181783,["Wahaha@DESKTOP-HTU2IVD",[[1,7448,"并返回等待执行的列表"]],[7448,7448],[7458,7458]]],[1590133182190,["Wahaha@DESKTOP-HTU2IVD",[[1,7469,"\n"]],[7458,7458],[7459,7459]]],[1590133196047,["Wahaha@DESKTOP-HTU2IVD",[[1,7459,"shutdownzhis"]],[7459,7459],[7471,7471]]],[1590133197461,["Wahaha@DESKTOP-HTU2IVD",[[-1,7467,"zhis"]],[7471,7471],[7467,7467]]],[1590133212689,["Wahaha@DESKTOP-HTU2IVD",[[1,7467,"只是将线程池的状态设置为shut"]],[7467,7467],[7483,7483]]],[1590133272848,[null,[[-1,7095,"\n\n"],[1,7097,", "],[1,7483,"\n"]],[7095,7095],[7484,7484]]],[1590133272848,[null,[[1,7095,"\n\n"],[-1,7095,", "],[-1,7483,"\n"]],[7484,7484],[7095,7095]]],[1590133234553,["Wahaha@DESKTOP-HTU2IVD",[[1,7483,"down状态，然后终端所有没有正在执行的"]],[7483,7483],[7503,7503]]],[1590133235541,["Wahaha@DESKTOP-HTU2IVD",[[-1,7502,"的"]],[7503,7503],[7502,7502]]],[1590133241512,["Wahaha@DESKTOP-HTU2IVD",[[1,7502,"任务的线程。"]],[7502,7502],[7508,7508]]],[1590133338561,[null,[[-1,7095,"\n\n"],[1,7097,", "],[1,7508,"\n"]],[7095,7095],[7509,7509]]],[1590133338561,[null,[[1,7095,"\n\n"],[-1,7095,", "],[-1,7508,"\n"]],[7509,7509],[7095,7095]]],[1590133337711,["Wahaha@DESKTOP-HTU2IVD",[[1,7509,"只要调用两者之一，isShutdown就会返回true,当所有任务都已关闭，isTerminaed就会返回true。\n\n一般来说调用shutdown方法来关闭线程池，如果任务不一定要执行完，可以直接调用shutdownNow方法。"]],[7509,7509],[7624,7624]]],[1590133340465,[null,[[-1,7095,"\n\n"],[1,7097,", "],[1,7624,"\n"]],[7095,7095],[7625,7625]]],[1590133340465,[null,[[1,7095,"\n\n"],[-1,7095,", "],[-1,7624,"\n"]],[7625,7625],[7095,7095]]],[1590133340062,["Wahaha@DESKTOP-HTU2IVD",[[1,7509,"\n"]],[7508,7508],[7509,7509]]],[1590133400485,[null,[[-1,7095,"\n\n"],[1,7097,", "],[1,7625,"\n"]],[7095,7095],[7626,7626]]],[1590133400485,[null,[[1,7095,"\n\n"],[-1,7095,", "],[-1,7625,"\n"]],[7626,7626],[7095,7095]]],[1590133386825,["Wahaha@DESKTOP-HTU2IVD",[[1,7635,"\n"]],[7626,7626],[7627,7627]]],[1590133387097,["Wahaha@DESKTOP-HTU2IVD",[[1,7636,"\n"]],[7627,7627],[7628,7628]]],[1590133399376,["Wahaha@DESKTOP-HTU2IVD",[[1,7628,"#### 33. Excutor"]],[7628,7628],[7644,7644]]],[1590133400160,["Wahaha@DESKTOP-HTU2IVD",[[1,7653,"\n"]],[7644,7644],[7645,7645]]],[1590133460486,[null,[[-1,7095,"\n\n"],[1,7097,", "],[1,7644,"\n"]],[7095,7095],[7645,7645]]],[1590133460486,[null,[[1,7095,"\n\n"],[-1,7095,", "],[-1,7644,"\n"]],[7645,7645],[7095,7095]]],[1590133403061,["Wahaha@DESKTOP-HTU2IVD",[[1,7645,"cong"]],[7645,7645],[7649,7649]]],[1590133404086,["Wahaha@DESKTOP-HTU2IVD",[[-1,7645,"cong"]],[7649,7649],[7645,7645]]],[1590133411040,["Wahaha@DESKTOP-HTU2IVD",[[1,7645,"1. 从JDK1.4"]],[7645,7645],[7655,7655]]],[1590133411447,["Wahaha@DESKTOP-HTU2IVD",[[-1,7654,"4"]],[7655,7655],[7654,7654]]],[1590133457173,["Wahaha@DESKTOP-HTU2IVD",[[1,7654,"5开始，把工作单元和执行机制分开。工作单元包括Runable和callable，er"]],[7654,7654],[7696,7696]]],[1590133458143,["Wahaha@DESKTOP-HTU2IVD",[[-1,7694,"er"]],[7696,7696],[7694,7694]]],[1590133460195,["Wahaha@DESKTOP-HTU2IVD",[[1,7694,"而自行"]],[7694,7694],[7697,7697]]],[1590133520490,[null,[[-1,7095,"\n\n"],[1,7097,", "],[1,7697,"\n"]],[7095,7095],[7698,7698]]],[1590133520490,[null,[[1,7095,"\n\n"],[-1,7095,", "],[-1,7697,"\n"]],[7698,7698],[7095,7095]]],[1590133461979,["Wahaha@DESKTOP-HTU2IVD",[[-1,7695,"自行"]],[7697,7697],[7695,7695]]],[1590133467465,["Wahaha@DESKTOP-HTU2IVD",[[1,7695,"执行机制有R"]],[7695,7695],[7701,7701]]],[1590133468213,["Wahaha@DESKTOP-HTU2IVD",[[-1,7700,"R"]],[7701,7701],[7700,7700]]],[1590133484778,["Wahaha@DESKTOP-HTU2IVD",[[1,7700,"Executor框架提供。"]],[7700,7700],[7713,7713]]],[1590133485306,["Wahaha@DESKTOP-HTU2IVD",[[1,7714,"2. \n"]],[7713,7713],[7717,7717]]],[1590133940562,[null,[[-1,7095,"\n\n"],[1,7097,", "],[1,7717,"\n"]],[7095,7095],[7718,7718]]],[1590133940562,[null,[[1,7095,"\n\n"],[-1,7095,", "],[-1,7717,"\n"]],[7718,7718],[7095,7095]]],[1590133928031,["Wahaha@DESKTOP-HTU2IVD",[[1,7717,"E"]],[7717,7717],[7718,7718]]],[1590133930529,["Wahaha@DESKTOP-HTU2IVD",[[-1,7717,"E"]],[7718,7718],[7717,7717]]],[1590133940125,["Wahaha@DESKTOP-HTU2IVD",[[1,7717,"executor框架的"]],[7717,7717],[7728,7728]]],[1590134000503,[null,[[-1,7095,"\n\n"],[1,7097,", "],[1,7728,"\n"]],[7095,7095],[7729,7729]]],[1590134000503,[null,[[1,7095,"\n\n"],[-1,7095,", "],[-1,7728,"\n"]],[7729,7729],[7095,7095]]],[1590133943234,["Wahaha@DESKTOP-HTU2IVD",[[1,7728,"主要成员"]],[7728,7728],[7732,7732]]],[1590133944502,["Wahaha@DESKTOP-HTU2IVD",[[1,7733,"3. \n"]],[7732,7732],[7736,7736]]],[1590133945829,["Wahaha@DESKTOP-HTU2IVD",[[-1,7733,"3. "]],[7736,7736],[7733,7733]]],[1590133946531,["Wahaha@DESKTOP-HTU2IVD",[[1,7733,"ThreadPoolExecutor :可以通过工厂类Executors来创建。\n\n可以创建3种类型的ThreadPoolExecutor：SingleThreadExecutor、FixedThreadPool、CachedThreadPool。\n\nScheduledThreadPoolExecutor ：可以通过工厂类Executors来创建。\n\n可以创建2中类型的ScheduledThreadPoolExecutor：ScheduledThreadPoolExecutor、SingleThreadScheduledExecutor\n\nFuture接口:Future和实现Future接口的FutureTask类来表示异步计算的结果。\n\nRunnable和Callable:它们的接口实现类都可以被ThreadPoolExecutor或ScheduledThreadPoolExecutor执行。Runnable不能返回结果，Callable可以返回结果。\n\n作者：java小咖秀\n链接：https://juejin.im/post/5eaecf326fb9a043856f33d5\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。"]],[7733,7733],[8270,8270]]],[1590133956236,["Wahaha@DESKTOP-HTU2IVD",[[-1,8168,"作者：java小咖秀\n链接：https://juejin.im/post/5eaecf326fb9a043856f33d5\n来源：掘金\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n\n"]],[8167,8271],[8167,8167]]],[1590133971011,["Wahaha@DESKTOP-HTU2IVD",[[-1,7732,"\n"]],[7733,7733],[7732,7732]]],[1590133971822,["Wahaha@DESKTOP-HTU2IVD",[[1,7732,"\n"]],[7732,7732],[7733,7733]]],[1590133975576,["Wahaha@DESKTOP-HTU2IVD",[[-1,7774,"\n"]],[7775,7775],[7774,7774]]],[1590133980700,["Wahaha@DESKTOP-HTU2IVD",[[1,7733," - "]],[7733,7733],[7736,7736]]],[1590133985222,["Wahaha@DESKTOP-HTU2IVD",[[1,7777," - "]],[7777,7777],[7780,7780]]],[1590133988544,["Wahaha@DESKTOP-HTU2IVD",[[1,7845,"- "]],[7845,7845],[7847,7847]]],[1590133990012,["Wahaha@DESKTOP-HTU2IVD",[[-1,7845,"- "]],[7847,7847],[7845,7845]]],[1590133992894,["Wahaha@DESKTOP-HTU2IVD",[[-1,7863,"\n"]],[7864,7864],[7863,7863]]],[1590133994998,["Wahaha@DESKTOP-HTU2IVD",[[1,7863,"- "]],[7863,7863],[7865,7865]]],[1590134060509,[null,[[-1,7095,"\n\n"],[1,7097,", "],[1,8172,"\n"]],[7095,7095],[8173,8173]]],[1590134060509,[null,[[1,7095,"\n\n"],[-1,7095,", "],[-1,8172,"\n"]],[8173,8173],[7095,7095]]],[1590134002099,["Wahaha@DESKTOP-HTU2IVD",[[1,7916,"- "]],[7916,7916],[7918,7918]]],[1590134004965,["Wahaha@DESKTOP-HTU2IVD",[[1,8014,"- "]],[8014,8014],[8016,8016]]],[1590134008657,["Wahaha@DESKTOP-HTU2IVD",[[1,8067,"- "]],[8067,8067],[8069,8069]]],[1590137600605,[null,[[-1,7095,"\n\n"],[1,7097,", "],[1,8178,"\n"]],[7095,7095],[8179,8179]]],[1590137600605,[null,[[1,7095,"\n\n"],[-1,7095,", "],[-1,8178,"\n"]],[8179,8179],[7095,7095]]],[1590137580037,["Wahaha@DESKTOP-HTU2IVD",[[-1,8186,"\n"]],[8181,8181],[8180,8180]]],[1590137580892,["Wahaha@DESKTOP-HTU2IVD",[[1,8186,"\n"]],[8180,8180],[8181,8181]]],[1590137583167,["Wahaha@DESKTOP-HTU2IVD",[[1,8181,"####"]],[8181,8181],[8185,8185]]],[1590137583780,["Wahaha@DESKTOP-HTU2IVD",[[-1,8184,"#"]],[8185,8185],[8184,8184]]],[1590137588543,["Wahaha@DESKTOP-HTU2IVD",[[1,8184," java基础"]],[8184,8184],[8191,8191]]],[1590137589401,["Wahaha@DESKTOP-HTU2IVD",[[1,8197,"\n"]],[8191,8191],[8192,8192]]],[1590137591458,["Wahaha@DESKTOP-HTU2IVD",[[1,8192,"1. "]],[8192,8192],[8195,8195]]],[1590137592675,["Wahaha@DESKTOP-HTU2IVD",[[-1,8192,"1. "]],[8195,8195],[8192,8192]]],[1590137595603,["Wahaha@DESKTOP-HTU2IVD",[[1,8192,"#####"]],[8192,8192],[8197,8197]]],[1590137596543,["Wahaha@DESKTOP-HTU2IVD",[[-1,8196,"#"]],[8197,8197],[8196,8196]]],[1590137596784,["Wahaha@DESKTOP-HTU2IVD",[[1,8196," "]],[8196,8196],[8197,8197]]],[1590137597602,["Wahaha@DESKTOP-HTU2IVD",[[1,8203,"\n"]],[8197,8197],[8198,8198]]],[1590137598617,["Wahaha@DESKTOP-HTU2IVD",[[-1,8203,"\n"]],[8198,8198],[8197,8197]]],[1590137660586,[null,[[-1,7095,"\n\n"],[1,7097,", "]],[7095,7095],[7099,7099]]],[1590137660586,[null,[[1,7095,"\n\n"],[-1,7095,", "]],[7099,7099],[7095,7095]]],[1590137603539,["Wahaha@DESKTOP-HTU2IVD",[[1,8197,"1. "]],[8197,8197],[8200,8200]]],[1590137608231,["Wahaha@DESKTOP-HTU2IVD",[[1,8192,"\n"]],[8191,8191],[8192,8192]]],[1590138200598,[null,[[-1,7095,"\n\n"],[1,7097,", "]],[7095,7095],[7099,7099]]],[1590138200598,[null,[[1,7095,"\n\n"],[-1,7095,", "]],[7099,7099],[7095,7095]]],[1590138197742,["Wahaha@DESKTOP-HTU2IVD",[[1,8201,"**JDK 和 JRE 有什么区别**"]],[8201,8201],[8220,8220]]],[1590138200047,["Wahaha@DESKTOP-HTU2IVD",[[-1,8218,"**"]],[8220,8220],[8218,8218]]],[1590138260601,[null,[[-1,7095,"\n\n"],[1,7097,", "]],[7095,7095],[7099,7099]]],[1590138260601,[null,[[1,7095,"\n\n"],[-1,7095,", "]],[7099,7099],[7095,7095]]],[1590138203455,["Wahaha@DESKTOP-HTU2IVD",[[-1,8201,"**"]],[8203,8203],[8201,8201]]],[1590138205343,["Wahaha@DESKTOP-HTU2IVD",[[1,8222,"\n"]],[8216,8216],[8217,8217]]],[1590138212559,["Wahaha@DESKTOP-HTU2IVD",[[1,8217,"- JDK：Java Development Kit 的简称，java 开发工具包，提供了 java 的开发环境和运行环境。"]],[8217,8217],[8279,8279]]],[1590138213970,["Wahaha@DESKTOP-HTU2IVD",[[1,8280,"- \n"]],[8279,8279],[8282,8282]]],[1590138224744,["Wahaha@DESKTOP-HTU2IVD",[[1,8282,"JRE：Java Runtime Environment 的简称，java 运行环境，为 java 的运行提供了所需环境。"]],[8282,8282],[8343,8343]]],[1590138225487,["Wahaha@DESKTOP-HTU2IVD",[[1,8344,"- \n"]],[8343,8343],[8346,8346]]],[1590138227075,["Wahaha@DESKTOP-HTU2IVD",[[-1,8344,"- "]],[8346,8346],[8344,8344]]],[1590138234359,["Wahaha@DESKTOP-HTU2IVD",[[1,8344,"具体来说 JDK 其实包含了 JRE，同时还包含了编译 java 源码的编译器 javac，还包含了很多 java 程序调试和分析的工具。简单来说：如果你需要运行 java 程序，只需安装 JRE 就可以了，如果你需要编写 java 程序，需要安装 JDK。"]],[8344,8344],[8473,8473]]],[1590138238776,["Wahaha@DESKTOP-HTU2IVD",[[1,8344,"- \n"]],[8343,8343],[8346,8346]]],[1590138240634,["Wahaha@DESKTOP-HTU2IVD",[[-1,8344,"- "]],[8346,8346],[8344,8344]]],[1590138241209,["Wahaha@DESKTOP-HTU2IVD",[[-1,8344,"\n"]],[8344,8344],[8343,8343]]],[1590138242817,["Wahaha@DESKTOP-HTU2IVD",[[1,8344,"- \n"]],[8343,8343],[8346,8346]]],[1590138243984,["Wahaha@DESKTOP-HTU2IVD",[[-1,8344,"- "]],[8346,8346],[8344,8344]]],[1590138248028,["Wahaha@DESKTOP-HTU2IVD",[[1,8480,"\n"]],[8474,8474],[8475,8475]]],[1590138248253,["Wahaha@DESKTOP-HTU2IVD",[[1,8481,"\n"]],[8475,8475],[8476,8476]]],[1590138252602,["Wahaha@DESKTOP-HTU2IVD",[[1,8476,"#### 2. "]],[8476,8476],[8484,8484]]],[1590138257042,["Wahaha@DESKTOP-HTU2IVD",[[-1,8483," "]],[8484,8484],[8483,8483]]],[1590138258403,["Wahaha@DESKTOP-HTU2IVD",[[1,8483,"=="]],[8483,8483],[8485,8485]]],[1590138258980,["Wahaha@DESKTOP-HTU2IVD",[[-1,8483,"=="]],[8485,8485],[8483,8483]]],[1590138259873,["Wahaha@DESKTOP-HTU2IVD",[[1,8483," == "]],[8483,8483],[8487,8487]]],[1590138320602,[null,[[-1,7095,"\n\n"],[1,7097,", "]],[7095,7095],[7099,7099]]],[1590138320602,[null,[[1,7095,"\n\n"],[-1,7095,", "]],[7099,7099],[7095,7095]]],[1590138261404,["Wahaha@DESKTOP-HTU2IVD",[[1,8487,"yu"]],[8487,8487],[8489,8489]]],[1590138262175,["Wahaha@DESKTOP-HTU2IVD",[[-1,8487,"yu"]],[8489,8489],[8487,8487]]],[1590138266847,["Wahaha@DESKTOP-HTU2IVD",[[1,8487,"和equlas"]],[8487,8487],[8494,8494]]],[1590138271571,["Wahaha@DESKTOP-HTU2IVD",[[-1,8491,"las"]],[8494,8494],[8491,8491]]],[1590138272771,["Wahaha@DESKTOP-HTU2IVD",[[1,8491,"als"]],[8491,8491],[8494,8494]]],[1590138273288,["Wahaha@DESKTOP-HTU2IVD",[[1,8500,"\n"]],[8494,8494],[8495,8495]]],[1590138303469,["Wahaha@DESKTOP-HTU2IVD",[[1,8495,"== 对于基本类型来说是值比较，对于引用类型来说是比较的是引用；而 equals 默认情况下是引用比较，只是很多类重新了 equals 方法，比如 String、Integer 等把它变成了值比较，所以一般情况下 equals 比较的是值是否相等。"]],[8495,8495],[8619,8619]]],[1590138308981,["Wahaha@DESKTOP-HTU2IVD",[[1,8527,"\n"]],[8527,8527],[8528,8528]]],[1590138312337,["Wahaha@DESKTOP-HTU2IVD",[[-1,8528,"而 "]],[8528,8530],[8528,8528]]],[1590138320326,["Wahaha@DESKTOP-HTU2IVD",[[1,8495,"1. "]],[8495,8495],[8498,8498]]],[1590138380608,[null,[[-1,7095,"\n\n"],[1,7097,", "]],[7095,7095],[7099,7099]]],[1590138380608,[null,[[1,7095,"\n\n"],[-1,7095,", "]],[7099,7099],[7095,7095]]],[1590138322435,["Wahaha@DESKTOP-HTU2IVD",[[1,8531,"2. "]],[8531,8531],[8534,8534]]],[1590138500872,[null,[[-1,7095,"\n\n"],[1,7097,", "]],[7095,7095],[7099,7099]]],[1590138500872,[null,[[1,7095,"\n\n"],[-1,7095,", "]],[7099,7099],[7095,7095]]],[1590138456307,["Wahaha@DESKTOP-HTU2IVD",[[1,8630,"\n"]],[8625,8625],[8626,8626]]],[1590138469842,["Wahaha@DESKTOP-HTU2IVD",[[1,8626,"#### 3. liang"]],[8626,8626],[8639,8639]]],[1590138471553,["Wahaha@DESKTOP-HTU2IVD",[[-1,8632,". liang"]],[8639,8639],[8632,8632]]],[1590138475540,["Wahaha@DESKTOP-HTU2IVD",[[1,8632,". liangge "]],[8632,8632],[8642,8642]]],[1590138478372,["Wahaha@DESKTOP-HTU2IVD",[[-1,8632,". liangge "]],[8642,8642],[8632,8632]]],[1590138488114,["Wahaha@DESKTOP-HTU2IVD",[[1,8632,". 两个对象的hashcon"]],[8632,8632],[8646,8646]]],[1590138488546,["Wahaha@DESKTOP-HTU2IVD",[[-1,8645,"n"]],[8646,8646],[8645,8645]]],[1590138498451,["Wahaha@DESKTOP-HTU2IVD",[[1,8645,"de值相同，则"]],[8645,8645],[8652,8652]]],[1590138560634,[null,[[-1,7095,"\n\n"],[1,7097,", "]],[7095,7095],[7099,7099]]],[1590138560634,[null,[[1,7095,"\n\n"],[-1,7095,", "]],[7099,7099],[7095,7095]]],[1590138511355,["Wahaha@DESKTOP-HTU2IVD",[[1,8652,"equals的以为"]],[8652,8652],[8661,8661]]],[1590138512078,["Wahaha@DESKTOP-HTU2IVD",[[-1,8659,"以为"]],[8661,8661],[8659,8659]]],[1590138517791,["Wahaha@DESKTOP-HTU2IVD",[[1,8659,"一定为trule"]],[8659,8659],[8667,8667]]],[1590138518756,["Wahaha@DESKTOP-HTU2IVD",[[-1,8665,"le"]],[8667,8667],[8665,8665]]],[1590138521670,["Wahaha@DESKTOP-HTU2IVD",[[1,8665,"e 对面"]],[8665,8665],[8669,8669]]],[1590138523179,["Wahaha@DESKTOP-HTU2IVD",[[-1,8667,"对面"]],[8669,8669],[8667,8667]]],[1590138526526,["Wahaha@DESKTOP-HTU2IVD",[[1,8667,"对吗？"]],[8667,8667],[8670,8670]]],[1590138526850,["Wahaha@DESKTOP-HTU2IVD",[[1,8675,"\n"]],[8670,8670],[8671,8671]]],[1590138557302,["Wahaha@DESKTOP-HTU2IVD",[[1,8671,"不对，，因为在散列表中，hashCode()相等即两个键值对的哈希值相等，然而哈希值相等，并不一定能得出键值对相等。"]],[8671,8671],[8729,8729]]],[1590138620614,[null,[[-1,7095,"\n\n"],[1,7097,", "]],[7095,7095],[7099,7099]]],[1590138620614,[null,[[1,7095,"\n\n"],[-1,7095,", "]],[7099,7099],[7095,7095]]],[1590138598668,["Wahaha@DESKTOP-HTU2IVD",[[1,8734,"\n"]],[8729,8729],[8730,8730]]],[1590138599564,["Wahaha@DESKTOP-HTU2IVD",[[1,8735,"\n"]],[8730,8730],[8731,8731]]],[1590138601153,["Wahaha@DESKTOP-HTU2IVD",[[1,8731,"4."]],[8731,8731],[8733,8733]]],[1590138602251,["Wahaha@DESKTOP-HTU2IVD",[[-1,8731,"4."]],[8733,8733],[8731,8731]]],[1590138602606,["Wahaha@DESKTOP-HTU2IVD",[[1,8731,"**4\\. final 在 java 中有什么作用？**\n\n*   final 修饰的类叫最终类，该类不能被继承。\n\n*   final 修饰的方法不能被重写。\n\n*   final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。"]],[8731,8731],[8853,8853]]],[1590138605274,["Wahaha@DESKTOP-HTU2IVD",[[-1,8731,"**"]],[8731,8733],[8731,8731]]],[1590138607950,["Wahaha@DESKTOP-HTU2IVD",[[-1,8755,"**"]],[8757,8757],[8755,8755]]],[1590138611086,["Wahaha@DESKTOP-HTU2IVD",[[-1,8732,"\\"]],[8733,8733],[8732,8732]]],[1590138617483,["Wahaha@DESKTOP-HTU2IVD",[[-1,8807,"\n"]],[8807,8807],[8806,8806]]],[1590138619092,["Wahaha@DESKTOP-HTU2IVD",[[-1,8784,"\n"]],[8784,8784],[8783,8783]]],[1590138920636,[null,[[-1,7095,"\n\n"],[1,7097,", "]],[7095,7095],[7099,7099]]],[1590138920636,[null,[[1,7095,"\n\n"],[-1,7095,", "]],[7099,7099],[7095,7095]]],[1590138873075,["Wahaha@DESKTOP-HTU2IVD",[[1,8847,"* \n"]],[8846,8846],[8849,8849]]],[1590138874697,["Wahaha@DESKTOP-HTU2IVD",[[-1,8847,"* "]],[8849,8849],[8847,8847]]],[1590138875226,["Wahaha@DESKTOP-HTU2IVD",[[1,8852,"\n"]],[8847,8847],[8848,8848]]],[1590138899439,["Wahaha@DESKTOP-HTU2IVD",[[1,8848,"5. ** java 中的 Math.round(-1.5) 等于多少？**"]],[8848,8848],[8886,8886]]],[1590138901822,["Wahaha@DESKTOP-HTU2IVD",[[-1,8850," **"]],[8850,8853],[8850,8850]]],[1590138905264,["Wahaha@DESKTOP-HTU2IVD",[[-1,8880,"？**"]],[8883,8883],[8880,8880]]],[1590138908280,["Wahaha@DESKTOP-HTU2IVD",[[-1,8850," "],[1,8851,"  "]],[8850,8850],[8851,8851]]],[1590138910357,["Wahaha@DESKTOP-HTU2IVD",[[1,8882,"6. \n"]],[8881,8881],[8885,8885]]],[1590138914368,["Wahaha@DESKTOP-HTU2IVD",[[1,8882,"\n"]],[8882,8882],[8883,8883]]],[1590138980645,[null,[[-1,7095,"\n\n"],[1,7097,", "]],[7095,7095],[7099,7099]]],[1590138980645,[null,[[1,7095,"\n\n"],[-1,7095,", "]],[7099,7099],[7095,7095]]],[1590138942142,["Wahaha@DESKTOP-HTU2IVD",[[1,8882,"等于 -1，因为在数轴上取值时，中间值（0.5）向右取整，所以正 0.5 是往上取整，负 0.5 是直接舍弃。"]],[8882,8882],[8937,8937]]],[1590139160676,[null,[[-1,7095,"\n\n"],[1,7097,", "]],[7095,7095],[7099,7099]]],[1590139160676,[null,[[1,7095,"\n\n"],[-1,7095,", "]],[7099,7099],[7095,7095]]],[1590139109330,["Wahaha@DESKTOP-HTU2IVD",[[1,8941,"**String 属于基础的数据类型吗？**\n\nString 不属于基础类型，基础类型有 8 种：byte、boolean、char、short、int、float、long、double，而 String 属于对象。"]],[8941,8941],[9050,9050]]],[1590139112468,["Wahaha@DESKTOP-HTU2IVD",[[-1,8941,"**"]],[8941,8943],[8941,8941]]],[1590139114947,["Wahaha@DESKTOP-HTU2IVD",[[-1,8959,"**"]],[8961,8961],[8959,8959]]],[1590139122462,["Wahaha@DESKTOP-HTU2IVD",[[-1,8960,"\n"]],[8960,8960],[8959,8959]]],[1590139127856,["Wahaha@DESKTOP-HTU2IVD",[[1,9046,"7. "]],[9046,9046],[9049,9049]]],[1590139130542,["Wahaha@DESKTOP-HTU2IVD",[[1,8938,"\n"]],[8937,8937],[8938,8938]]],[1590139133309,["Wahaha@DESKTOP-HTU2IVD",[[1,9047,"\n"]],[9046,9046],[9047,9047]]],[1590139148059,["Wahaha@DESKTOP-HTU2IVD",[[1,9051,"**java 中操作字符串都有哪些类？它们之间有什么区别？**"]],[9051,9051],[9082,9082]]],[1590139150003,["Wahaha@DESKTOP-HTU2IVD",[[-1,9051,"**"]],[9053,9053],[9051,9051]]],[1590139152438,["Wahaha@DESKTOP-HTU2IVD",[[-1,9078,"**"]],[9080,9080],[9078,9078]]],[1590139220627,[null,[[-1,7095,"\n\n"],[1,7097,", "]],[7095,7095],[7099,7099]]],[1590139220627,[null,[[1,7095,"\n\n"],[-1,7095,", "]],[7099,7099],[7095,7095]]],[1590139203328,["Wahaha@DESKTOP-HTU2IVD",[[1,9079,"操作字符串的类有：String、StringBuffer、StringBuilder。\n\nString 和 StringBuffer、StringBuilder 的区别在于 String 声明的是不可变的对象，每次操作都会生成新的 String 对象，然后将指针指向新的 String 对象，而 StringBuffer、StringBuilder 可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下最好不要使用 String。\n\nStringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以在单线程环境下推荐使用 StringBuilder，多线程环境下推荐使用 StringBuffer。"]],[9079,9079],[9471,9471]]],[1590139207371,["Wahaha@DESKTOP-HTU2IVD",[[1,9079,"8. \n"]],[9078,9078],[9082,9082]]],[1590139209137,["Wahaha@DESKTOP-HTU2IVD",[[-1,9079,"8. "]],[9082,9082],[9079,9079]]],[1590139213322,["Wahaha@DESKTOP-HTU2IVD",[[-1,9079,"\n"]],[9079,9079],[9078,9078]]],[1590139216231,["Wahaha@DESKTOP-HTU2IVD",[[-1,9123,"\n"]],[9123,9123],[9122,9122]]],[1590139218640,["Wahaha@DESKTOP-HTU2IVD",[[-1,9300,"\n"]],[9300,9300],[9299,9299]]],[1590139280667,[null,[[-1,7095,"\n\n"],[1,7097,", "]],[7095,7095],[7099,7099]]],[1590139280667,[null,[[1,7095,"\n\n"],[-1,7095,", "]],[7099,7099],[7095,7095]]],[1590139221913,["Wahaha@DESKTOP-HTU2IVD",[[1,9079,"- "]],[9079,9079],[9081,9081]]],[1590139224984,["Wahaha@DESKTOP-HTU2IVD",[[1,9125,"- "]],[9125,9125],[9127,9127]]],[1590139227652,["Wahaha@DESKTOP-HTU2IVD",[[1,9304,"- "]],[9304,9304],[9306,9306]]],[1590139230777,["Wahaha@DESKTOP-HTU2IVD",[[1,9478,"\n"]],[9476,9476],[9477,9477]]],[1590139230884,["Wahaha@DESKTOP-HTU2IVD",[[1,9479,"\n"]],[9477,9477],[9478,9478]]],[1590139248597,["Wahaha@DESKTOP-HTU2IVD",[[1,9477,"8. **8\\. String str=\"i\"与 String str=new String(\"i\")一样吗？**"]],[9477,9477],[9534,9534]]],[1590139252391,["Wahaha@DESKTOP-HTU2IVD",[[-1,9480,"**8\\. "]],[9480,9486],[9480,9480]]],[1590139254382,["Wahaha@DESKTOP-HTU2IVD",[[-1,9526,"**"]],[9528,9528],[9526,9526]]],[1590139259352,["Wahaha@DESKTOP-HTU2IVD",[[1,9527,"9. \n9. \n"]],[9526,9526],[9530,9530]]],[1590139261331,["Wahaha@DESKTOP-HTU2IVD",[[-1,9527,"9. "]],[9530,9530],[9527,9527]]],[1590139261804,["Wahaha@DESKTOP-HTU2IVD",[[1,9527,"不一样，因为内存的分配方式不一样。String str=\"i\"的方式，java 虚拟机会将其分配到常量池中；而 String str=new String(\"i\") 则会被分到堆内存中。"]],[9527,9527],[9620,9620]]],[1590139265611,["Wahaha@DESKTOP-HTU2IVD",[[1,9621,"\n"]],[9620,9620],[9621,9621]]],[1590139278576,["Wahaha@DESKTOP-HTU2IVD",[[1,9625,"如何"]],[9625,9625],[9627,9627]]],[1590139340694,[null,[[-1,7095,"\n\n"],[1,7097,", "]],[7095,7095],[7099,7099]]],[1590139340694,[null,[[1,7095,"\n\n"],[-1,7095,", "]],[7099,7099],[7095,7095]]],[1590139283714,["Wahaha@DESKTOP-HTU2IVD",[[1,9627,"将字符串反转"]],[9627,9627],[9633,9633]]],[1590139284433,["Wahaha@DESKTOP-HTU2IVD",[[1,9634,"10. \n"]],[9633,9633],[9638,9638]]],[1590139285741,["Wahaha@DESKTOP-HTU2IVD",[[-1,9634,"10. "]],[9638,9638],[9634,9634]]],[1590139303233,["Wahaha@DESKTOP-HTU2IVD",[[1,9634,"使用stringbuilderhu"]],[9634,9634],[9651,9651]]],[1590139303753,["Wahaha@DESKTOP-HTU2IVD",[[-1,9649,"hu"]],[9651,9651],[9649,9649]]],[1590139311960,["Wahaha@DESKTOP-HTU2IVD",[[1,9649," 或者stringbufferde "]],[9649,9649],[9667,9667]]],[1590139313207,["Wahaha@DESKTOP-HTU2IVD",[[-1,9664,"de "]],[9667,9667],[9664,9664]]],[1590139313774,["Wahaha@DESKTOP-HTU2IVD",[[1,9664,"de "]],[9664,9664],[9667,9667]]],[1590139314538,["Wahaha@DESKTOP-HTU2IVD",[[-1,9664,"de "]],[9667,9667],[9664,9664]]],[1590139324183,["Wahaha@DESKTOP-HTU2IVD",[[1,9664,"的reverse（）"]],[9664,9664],[9674,9674]]],[1590139324777,["Wahaha@DESKTOP-HTU2IVD",[[-1,9672,"（）"]],[9674,9674],[9672,9672]]],[1590139330058,["Wahaha@DESKTOP-HTU2IVD",[[1,9672,"()方法"]],[9672,9672],[9676,9676]]],[1590139330546,["Wahaha@DESKTOP-HTU2IVD",[[1,9679,"\n"]],[9676,9676],[9677,9677]]],[1590139331196,["Wahaha@DESKTOP-HTU2IVD",[[1,9680,"\n"]],[9677,9677],[9678,9678]]],[1590139340001,["Wahaha@DESKTOP-HTU2IVD",[[1,9678,"10. string"]],[9678,9678],[9688,9688]]],[1590139400638,[null,[[-1,7095,"\n\n"],[1,7097,", "]],[7095,7095],[7099,7099]]],[1590139400638,[null,[[1,7095,"\n\n"],[-1,7095,", "]],[7099,7099],[7095,7095]]],[1590139344951,["Wahaha@DESKTOP-HTU2IVD",[[1,9688,"类的常用方法"]],[9688,9688],[9694,9694]]],[1590139345441,["Wahaha@DESKTOP-HTU2IVD",[[1,9695,"11. \n"]],[9694,9694],[9699,9699]]],[1590139346797,["Wahaha@DESKTOP-HTU2IVD",[[-1,9695,"11. "]],[9699,9699],[9695,9695]]],[1590139352232,["Wahaha@DESKTOP-HTU2IVD",[[1,9695,"*   indexOf()：返回指定字符的索引。\n\n*   charAt()：返回指定索引处的字符。\n\n*   replace()：字符串替换。\n\n*   trim()：去除字符串两端空白。\n\n*   split()：分割字符串，返回一个分割后的字符串数组。\n\n*   getBytes()：返回字符串的 byte 类型数组。\n\n*   length()：返回字符串长度。\n\n*   toLowerCase()：将字符串转成小写字母。\n\n*   toUpperCase()：将字符串转成大写字符。\n\n*   substring()：截取字符串。\n\n*   equals()：字符串比较。"]],[9695,9695],[9988,9988]]],[1590139358095,["Wahaha@DESKTOP-HTU2IVD",[[-1,9695,"*"]],[9696,9696],[9695,9695]]],[1590139358410,["Wahaha@DESKTOP-HTU2IVD",[[1,9695,"-"]],[9695,9695],[9696,9696]]],[1590139361512,["Wahaha@DESKTOP-HTU2IVD",[[-1,9721,"*"],[1,9722,"-"]],[9721,9721],[9722,9722]]],[1590139364266,["Wahaha@DESKTOP-HTU2IVD",[[-1,9747,"*"],[1,9748,"-"]],[9747,9747],[9748,9748]]],[1590139366541,["Wahaha@DESKTOP-HTU2IVD",[[-1,9769,"*"],[1,9770,"-"]],[9769,9769],[9770,9770]]],[1590139369481,["Wahaha@DESKTOP-HTU2IVD",[[-1,9792,"*"],[1,9793,"-"]],[9792,9792],[9793,9793]]],[1590139372232,["Wahaha@DESKTOP-HTU2IVD",[[-1,9826,"*"]],[9827,9827],[9826,9826]]],[1590139372767,["Wahaha@DESKTOP-HTU2IVD",[[1,9826,"-"]],[9826,9826],[9827,9827]]],[1590139375219,["Wahaha@DESKTOP-HTU2IVD",[[-1,9860,"*"],[1,9861,"-"]],[9860,9860],[9861,9861]]],[1590139377549,["Wahaha@DESKTOP-HTU2IVD",[[-1,9883,"*"],[1,9884,"-"]],[9883,9883],[9884,9884]]],[1590139379832,["Wahaha@DESKTOP-HTU2IVD",[[-1,9914,"*"],[1,9915,"-"]],[9914,9914],[9915,9915]]],[1590139382659,["Wahaha@DESKTOP-HTU2IVD",[[-1,9945,"*"],[1,9946,"-"]],[9945,9945],[9946,9946]]],[1590139384927,["Wahaha@DESKTOP-HTU2IVD",[[-1,9969,"*"],[1,9970,"-"]],[9969,9969],[9970,9970]]],[1590139387284,["Wahaha@DESKTOP-HTU2IVD",[[-1,9720,"\n"]],[9720,9720],[9719,9719]]],[1590139388047,["Wahaha@DESKTOP-HTU2IVD",[[-1,9745,"\n"]],[9745,9745],[9744,9744]]],[1590139388812,["Wahaha@DESKTOP-HTU2IVD",[[-1,9766,"\n"]],[9766,9766],[9765,9765]]],[1590139389594,["Wahaha@DESKTOP-HTU2IVD",[[-1,9788,"\n"]],[9788,9788],[9787,9787]]],[1590139390214,["Wahaha@DESKTOP-HTU2IVD",[[-1,9821,"\n"]],[9821,9821],[9820,9820]]],[1590139390971,["Wahaha@DESKTOP-HTU2IVD",[[-1,9854,"\n"]],[9854,9854],[9853,9853]]],[1590139391608,["Wahaha@DESKTOP-HTU2IVD",[[-1,9876,"\n"]],[9876,9876],[9875,9875]]],[1590139392295,["Wahaha@DESKTOP-HTU2IVD",[[-1,9906,"\n"]],[9906,9906],[9905,9905]]],[1590139393185,["Wahaha@DESKTOP-HTU2IVD",[[-1,9936,"\n"]],[9936,9936],[9935,9935]]],[1590139393871,["Wahaha@DESKTOP-HTU2IVD",[[-1,9959,"\n"]],[9959,9959],[9958,9958]]],[1590139397108,["Wahaha@DESKTOP-HTU2IVD",[[1,9981,"\n"]],[9979,9979],[9980,9980]]],[1590139398852,["Wahaha@DESKTOP-HTU2IVD",[[1,9980,"11. "]],[9980,9980],[9984,9984]]],[1590139460750,[null,[[-1,7095,"\n\n"],[1,7097,", "]],[7095,7095],[7099,7099]]],[1590139460750,[null,[[1,7095,"\n\n"],[-1,7095,", "]],[7099,7099],[7095,7095]]],[1590139415329,["Wahaha@DESKTOP-HTU2IVD",[[1,9984,"抽象类必须要有抽象方法吗？"]],[9984,9984],[9997,9997]]],[1590139415634,["Wahaha@DESKTOP-HTU2IVD",[[1,9998,"12. \n"]],[9997,9997],[10002,10002]]],[1590139417100,["Wahaha@DESKTOP-HTU2IVD",[[-1,9998,"12. "]],[10002,10002],[9998,9998]]],[1590139419184,["Wahaha@DESKTOP-HTU2IVD",[[1,9998,"不需要"]],[9998,9998],[10001,10001]]],[1590139428555,["Wahaha@DESKTOP-HTU2IVD",[[1,10003,"\n"]],[10001,10001],[10002,10002]]],[1590139429121,["Wahaha@DESKTOP-HTU2IVD",[[1,10004,"\n"]],[10002,10002],[10003,10003]]],[1590139429971,["Wahaha@DESKTOP-HTU2IVD",[[1,10003,"2"]],[10003,10003],[10004,10004]]],[1590139430608,["Wahaha@DESKTOP-HTU2IVD",[[-1,10003,"2"]],[10004,10004],[10003,10003]]],[1590139431909,["Wahaha@DESKTOP-HTU2IVD",[[1,10003,"12 。 "]],[10003,10003],[10008,10008]]],[1590139432980,["Wahaha@DESKTOP-HTU2IVD",[[-1,10005," 。 "]],[10008,10008],[10005,10005]]],[1590139434996,["Wahaha@DESKTOP-HTU2IVD",[[1,10005,". pu"]],[10005,10005],[10009,10009]]],[1590139435721,["Wahaha@DESKTOP-HTU2IVD",[[-1,10007,"pu"]],[10009,10009],[10007,10007]]],[1590139442881,["Wahaha@DESKTOP-HTU2IVD",[[1,10007,"普通类和抽象类的区别"]],[10007,10007],[10017,10017]]],[1590139443143,["Wahaha@DESKTOP-HTU2IVD",[[1,10018,"13. \n"]],[10017,10017],[10022,10022]]],[1590139448847,["Wahaha@DESKTOP-HTU2IVD",[[-1,10018,"13. "]],[10018,10022],[10018,10018]]],[1590139459441,["Wahaha@DESKTOP-HTU2IVD",[[1,10018,"- 普通类不能包含抽象方法"]],[10018,10018],[10031,10031]]],[1590139459884,["Wahaha@DESKTOP-HTU2IVD",[[1,10032,"- \n"]],[10031,10031],[10034,10034]]],[1590139520702,[null,[[-1,7095,"\n\n"],[1,7097,", "]],[7095,7095],[7099,7099]]],[1590139520702,[null,[[1,7095,"\n\n"],[-1,7095,", "]],[7099,7099],[7095,7095]]],[1590139467178,["Wahaha@DESKTOP-HTU2IVD",[[1,10034,"抽象类不性能"]],[10034,10034],[10040,10040]]],[1590139469366,["Wahaha@DESKTOP-HTU2IVD",[[-1,10038,"性能"]],[10040,10040],[10038,10038]]],[1590139479866,["Wahaha@DESKTOP-HTU2IVD",[[1,10038,"能实例化，普通类"]],[10038,10038],[10046,10046]]],[1590139484060,["Wahaha@DESKTOP-HTU2IVD",[[-1,10042,"，普通类"]],[10046,10046],[10042,10042]]],[1590139760714,[null,[[-1,7095,"\n\n"],[1,7097,", "]],[7095,7095],[7099,7099]]],[1590139760714,[null,[[1,7095,"\n\n"],[-1,7095,", "]],[7099,7099],[7095,7095]]],[1590139726780,["Wahaha@DESKTOP-HTU2IVD",[[1,10043,"- \n"]],[10042,10042],[10045,10045]]],[1590139727838,["Wahaha@DESKTOP-HTU2IVD",[[-1,10043,"- "]],[10045,10045],[10043,10043]]],[1590139728280,["Wahaha@DESKTOP-HTU2IVD",[[1,10045,"\n"]],[10043,10043],[10044,10044]]],[1590139748429,["Wahaha@DESKTOP-HTU2IVD",[[1,10044,"13. 抽象类可以用finalxiushi"]],[10044,10044],[10065,10065]]],[1590139750398,["Wahaha@DESKTOP-HTU2IVD",[[-1,10059,"xiushi"]],[10065,10065],[10059,10059]]],[1590139752470,["Wahaha@DESKTOP-HTU2IVD",[[1,10059,"修饰吗？"]],[10059,10059],[10063,10063]]],[1590139752822,["Wahaha@DESKTOP-HTU2IVD",[[1,10064,"14. \n"]],[10063,10063],[10068,10068]]],[1590139754397,["Wahaha@DESKTOP-HTU2IVD",[[-1,10064,"14. "]],[10068,10068],[10064,10064]]],[1590139755939,["Wahaha@DESKTOP-HTU2IVD",[[1,10064,"bunen"]],[10064,10064],[10069,10069]]],[1590139757014,["Wahaha@DESKTOP-HTU2IVD",[[-1,10064,"bunen"]],[10069,10069],[10064,10064]]],[1590139760078,["Wahaha@DESKTOP-HTU2IVD",[[1,10064,"不能，"]],[10064,10064],[10067,10067]]],[1590139820715,[null,[[-1,7095,"\n\n"],[1,7097,", "]],[7095,7095],[7099,7099]]],[1590139820715,[null,[[1,7095,"\n\n"],[-1,7095,", "]],[7099,7099],[7095,7095]]],[1590139769209,["Wahaha@DESKTOP-HTU2IVD",[[1,10067,"抽象类贝莱"]],[10067,10067],[10072,10072]]],[1590139770671,["Wahaha@DESKTOP-HTU2IVD",[[-1,10070,"贝莱"]],[10072,10072],[10070,10070]]],[1590139780593,["Wahaha@DESKTOP-HTU2IVD",[[1,10070,"本来就是用来被继承的"]],[10070,10070],[10080,10080]]],[1590139791057,["Wahaha@DESKTOP-HTU2IVD",[[1,10082,"\n"]],[10080,10080],[10081,10081]]],[1590139791574,["Wahaha@DESKTOP-HTU2IVD",[[1,10083,"\n"]],[10081,10081],[10082,10082]]],[1590139800687,["Wahaha@DESKTOP-HTU2IVD",[[1,10082,"14. 接口和抽象类有什么区别"]],[10082,10082],[10097,10097]]],[1590139800986,["Wahaha@DESKTOP-HTU2IVD",[[1,10098,"15. \n"]],[10097,10097],[10102,10102]]],[1590139802237,["Wahaha@DESKTOP-HTU2IVD",[[-1,10098,"15. "]],[10102,10102],[10098,10098]]],[1590139815298,["Wahaha@DESKTOP-HTU2IVD",[[1,10098,"*   实现：抽象类的子类使用 extends 来继承；接口必须使用 implements 来实现接口。\n\n*   构造函数：抽象类可以有构造函数；接口不能有。\n\n*   main 方法：抽象类可以有 main 方法，并且我们能运行它；接口不能有 main 方法。\n\n*   实现数量：类可以实现很多个接口；但是只能继承一个抽象类。\n\n*   访问修饰符：接口中的方法默认使用 public 修饰；抽象类中的方法可以是任意访问修饰符"]],[10098,10098],[10314,10314]]],[1590139880725,[null,[[-1,7095,"\n\n"],[1,7097,", "]],[7095,7095],[7099,7099]]],[1590139880725,[null,[[1,7095,"\n\n"],[-1,7095,", "]],[7099,7099],[7095,7095]]],[1590139822321,["Wahaha@DESKTOP-HTU2IVD",[[-1,10098,"*   实现：抽象类的子类使用 extends 来继承；接口必须使用 implements 来实现接口。\n\n*   构造函数：抽象类可以有构造函数；接口不能有。\n\n*   main 方法：抽象类可以有 main 方法，并且我们能运行它；接口不能有 main 方法。\n\n*   实现数量：类可以实现很多个接口；但是只能继承一个抽象类。\n\n*   访问修饰符：接口中的方法默认使用 public 修饰；抽象类中的方法可以是任意访问修饰符\n"]],[10098,10315],[10098,10098]]],[1590139823904,["Wahaha@DESKTOP-HTU2IVD",[[-1,10098,"\n"],[1,10099,"-"]],[10098,10098],[10099,10099]]],[1590139830924,["Wahaha@DESKTOP-HTU2IVD",[[1,10099," 抽象了"]],[10099,10099],[10103,10103]]],[1590139831489,["Wahaha@DESKTOP-HTU2IVD",[[-1,10102,"了"]],[10103,10103],[10102,10102]]],[1590139832508,["Wahaha@DESKTOP-HTU2IVD",[[1,10102,"列"]],[10102,10102],[10103,10103]]],[1590139833678,["Wahaha@DESKTOP-HTU2IVD",[[-1,10102,"列"]],[10103,10103],[10102,10102]]],[1590139841514,["Wahaha@DESKTOP-HTU2IVD",[[1,10102,"类的子类用extendlai"]],[10102,10102],[10116,10116]]],[1590139842320,["Wahaha@DESKTOP-HTU2IVD",[[-1,10113,"lai"]],[10116,10116],[10113,10113]]],[1590139845164,["Wahaha@DESKTOP-HTU2IVD",[[1,10113,"来接"]],[10113,10113],[10115,10115]]],[1590139847487,["Wahaha@DESKTOP-HTU2IVD",[[-1,10114,"接"]],[10115,10115],[10114,10114]]],[1590139854861,["Wahaha@DESKTOP-HTU2IVD",[[1,10114,"继承， 接口的实现"]],[10114,10114],[10123,10123]]],[1590139860925,["Wahaha@DESKTOP-HTU2IVD",[[-1,10120,"的实现"]],[10123,10123],[10120,10120]]],[1590139863201,["Wahaha@DESKTOP-HTU2IVD",[[1,10120,"必须要"]],[10120,10120],[10123,10123]]],[1590139864117,["Wahaha@DESKTOP-HTU2IVD",[[-1,10122,"要"]],[10123,10123],[10122,10122]]],[1590139867045,["Wahaha@DESKTOP-HTU2IVD",[[1,10122,"用imtem"]],[10122,10122],[10128,10128]]],[1590139870534,["Wahaha@DESKTOP-HTU2IVD",[[-1,10125,"tem"]],[10128,10128],[10125,10125]]],[1590139880463,["Wahaha@DESKTOP-HTU2IVD",[[1,10125,"plements来实现接口\n- "]],[10125,10125],[10141,10141]]],[1590139940716,[null,[[-1,7095,"\n\n"],[1,7097,", "]],[7095,7095],[7099,7099]]],[1590139940716,[null,[[1,7095,"\n\n"],[-1,7095,", "]],[7099,7099],[7095,7095]]],[1590139907720,["Wahaha@DESKTOP-HTU2IVD",[[1,10141,"抽象类可以有构造函数， 接口不可以\n- 卖你"]],[10141,10141],[10163,10163]]],[1590139908618,["Wahaha@DESKTOP-HTU2IVD",[[-1,10161,"卖你"]],[10163,10163],[10161,10161]]],[1590139939834,["Wahaha@DESKTOP-HTU2IVD",[[1,10161,"main 抽象类可以有main方法， 接口不可以\n- 类可以实现多个"]],[10161,10161],[10195,10195]]],[1590140000724,[null,[[-1,7095,"\n\n"],[1,7097,", "]],[7095,7095],[7099,7099]]],[1590140000724,[null,[[1,7095,"\n\n"],[-1,7095,", "]],[7099,7099],[7095,7095]]],[1590139953147,["Wahaha@DESKTOP-HTU2IVD",[[1,10195,"接口，但只能继承一个抽象了"]],[10195,10195],[10208,10208]]],[1590139954124,["Wahaha@DESKTOP-HTU2IVD",[[-1,10207,"了"]],[10208,10208],[10207,10207]]],[1590139962756,["Wahaha@DESKTOP-HTU2IVD",[[1,10207,"类 \n- 解耦"]],[10207,10207],[10214,10214]]],[1590139963563,["Wahaha@DESKTOP-HTU2IVD",[[-1,10211," 解耦"]],[10214,10214],[10211,10211]]],[1590139975271,["Wahaha@DESKTOP-HTU2IVD",[[1,10211," 接口的方法默认使用public "]],[10211,10211],[10228,10228]]],[1590139979613,["Wahaha@DESKTOP-HTU2IVD",[[-1,10227," "]],[10228,10228],[10227,10227]]],[1590139984492,["Wahaha@DESKTOP-HTU2IVD",[[1,10227,", chouxi"]],[10227,10227],[10235,10235]]],[1590139985660,["Wahaha@DESKTOP-HTU2IVD",[[-1,10229,"chouxi"]],[10235,10235],[10229,10229]]],[1590139991649,["Wahaha@DESKTOP-HTU2IVD",[[1,10229,"抽象类可以使用"]],[10229,10229],[10236,10236]]],[1590140060732,[null,[[-1,7095,"\n\n"],[1,7097,", "]],[7095,7095],[7099,7099]]],[1590140060732,[null,[[1,7095,"\n\n"],[-1,7095,", "]],[7099,7099],[7095,7095]]],[1590140007949,["Wahaha@DESKTOP-HTU2IVD",[[1,10236,"任意修饰符\n- "]],[10236,10236],[10244,10244]]],[1590140008435,["Wahaha@DESKTOP-HTU2IVD",[[-1,10242,"- "],[1,10244,"\n\n"]],[10244,10244],[10243,10243]]],[1590140013747,["Wahaha@DESKTOP-HTU2IVD",[[-1,10243,"\n"],[1,10244,"1"]],[10243,10243],[10244,10244]]],[1590140022413,["Wahaha@DESKTOP-HTU2IVD",[[1,10244,"5. java中流分几种\n16. "]],[10244,10244],[10261,10261]]],[1590140023668,["Wahaha@DESKTOP-HTU2IVD",[[-1,10258,"6. "]],[10261,10261],[10258,10258]]],[1590140024111,["Wahaha@DESKTOP-HTU2IVD",[[-1,10257,"1"],[1,10258,"\n"]],[10258,10258],[10257,10257]]],[1590140024892,["Wahaha@DESKTOP-HTU2IVD",[[-1,10257,"\n"],[1,10258,"-"]],[10257,10257],[10258,10258]]],[1590140025106,["Wahaha@DESKTOP-HTU2IVD",[[1,10258," "]],[10258,10258],[10259,10259]]],[1590140035215,["Wahaha@DESKTOP-HTU2IVD",[[-1,10257,"- "]],[10257,10257],[0,0]]],[1590140036164,["Wahaha@DESKTOP-HTU2IVD",[[1,0,"\n"]],[0,0],[1,1]]],[1590140042093,["Wahaha@DESKTOP-HTU2IVD",[[1,10258,"16. \n"]],[10257,10257],[10262,10262]]],[1590140043869,["Wahaha@DESKTOP-HTU2IVD",[[-1,10258,"16. "]],[10262,10262],[10258,10258]]],[1590140044793,["Wahaha@DESKTOP-HTU2IVD",[[-1,10258,"\n"],[1,10259,"-"]],[10258,10258],[10259,10259]]],[1590140048546,["Wahaha@DESKTOP-HTU2IVD",[[1,10259," 按功能分 "]],[10259,10259],[10265,10265]]],[1590140049180,["Wahaha@DESKTOP-HTU2IVD",[[-1,10264," "]],[10265,10265],[10264,10264]]],[1590140056334,["Wahaha@DESKTOP-HTU2IVD",[[1,10264," ： hu"]],[10264,10264],[10269,10269]]],[1590140057169,["Wahaha@DESKTOP-HTU2IVD",[[-1,10267,"hu"]],[10269,10269],[10267,10267]]],[1590140059686,["Wahaha@DESKTOP-HTU2IVD",[[1,10267,"输入流"]],[10267,10267],[10270,10270]]],[1590140120728,[null,[[-1,7096,"\n\n"],[1,7098,", "]],[7096,7096],[7100,7100]]],[1590140120728,[null,[[1,7096,"\n\n"],[-1,7096,", "]],[7100,7100],[7096,7096]]],[1590140061015,["Wahaha@DESKTOP-HTU2IVD",[[1,10270,"， "]],[10270,10270],[10272,10272]]],[1590140062870,["Wahaha@DESKTOP-HTU2IVD",[[-1,10269,"流， "]],[10272,10272],[10269,10269]]],[1590140065905,["Wahaha@DESKTOP-HTU2IVD",[[1,10269,"流（0"]],[10269,10269],[10272,10272]]],[1590140067264,["Wahaha@DESKTOP-HTU2IVD",[[-1,10269,"流（0"]],[10272,10272],[10269,10269]]],[1590140089316,["Wahaha@DESKTOP-HTU2IVD",[[1,10269,"流、 输出流\n- 按类型分： 字节流 "]],[10269,10269],[10288,10288]]],[1590140090150,["Wahaha@DESKTOP-HTU2IVD",[[-1,10287," "]],[10288,10288],[10287,10287]]],[1590140093907,["Wahaha@DESKTOP-HTU2IVD",[[1,10287,"、 字符流\n- "]],[10287,10287],[10295,10295]]],[1590140100137,["Wahaha@DESKTOP-HTU2IVD",[[-1,10294," "]],[10295,10295],[10294,10294]]],[1590140100418,["Wahaha@DESKTOP-HTU2IVD",[[-1,10293,"-"],[1,10294,"\n"]],[10294,10294],[10293,10293]]],[1590140101610,["Wahaha@DESKTOP-HTU2IVD",[[-1,10293,"\n"]],[10293,10293],[0,0]]],[1590140101820,["Wahaha@DESKTOP-HTU2IVD",[[1,10292," "]],[0,0],[10292,10293]]],[1590140103637,["Wahaha@DESKTOP-HTU2IVD",[[-1,10292," "],[1,10293,"子接口"]],[10292,10292],[10295,10295]]],[1590140104539,["Wahaha@DESKTOP-HTU2IVD",[[-1,10292,"子接口"]],[10295,10295],[10292,10292]]],[1590140105130,["Wahaha@DESKTOP-HTU2IVD",[[1,10293,"- \n"]],[10292,10292],[10295,10295]]],[1590140106595,["Wahaha@DESKTOP-HTU2IVD",[[-1,10293,"- "]],[10295,10295],[10293,10293]]],[1590140112592,["Wahaha@DESKTOP-HTU2IVD",[[-1,10293,"\n"],[1,10294,"字节流"]],[10293,10293],[10296,10296]]],[1590140117805,["Wahaha@DESKTOP-HTU2IVD",[[1,10296,"和字符流的区别"]],[10296,10296],[10303,10303]]],[1590140180725,[null,[[-1,7096,"\n\n"],[1,7098,", "]],[7096,7096],[7100,7100]]],[1590140180725,[null,[[1,7096,"\n\n"],[-1,7096,", "]],[7100,7100],[7096,7096]]],[1590140144401,["Wahaha@DESKTOP-HTU2IVD",[[1,10303,"： 字节流按8位位传输单位出入"]],[10303,10303],[10318,10318]]],[1590140145247,["Wahaha@DESKTOP-HTU2IVD",[[-1,10316,"出入"]],[10318,10318],[10316,10316]]],[1590140168856,["Wahaha@DESKTOP-HTU2IVD",[[1,10316,"输入输出数据，字符流按16位为输出出入"]],[10316,10316],[10335,10335]]],[1590140170262,["Wahaha@DESKTOP-HTU2IVD",[[-1,10333,"出入"]],[10335,10335],[10333,10333]]],[1590140178868,["Wahaha@DESKTOP-HTU2IVD",[[1,10333,"输入单位"]],[10333,10333],[10337,10337]]],[1590140240730,[null,[[-1,7096,"\n\n"],[1,7098,", "]],[7096,7096],[7100,7100]]],[1590140240730,[null,[[1,7096,"\n\n"],[-1,7096,", "]],[7100,7100],[7096,7096]]],[1590140183303,["Wahaha@DESKTOP-HTU2IVD",[[-1,10311,"位"],[1,10312,"为"]],[10311,10311],[10312,10312]]],[1590140188730,["Wahaha@DESKTOP-HTU2IVD",[[1,10337,"\n\n"]],[10337,10337],[10338,10338]]],[1590140189334,["Wahaha@DESKTOP-HTU2IVD",[[1,10339,"\n"]],[10338,10338],[10339,10339]]],[1590140190620,["Wahaha@DESKTOP-HTU2IVD",[[-1,10339,"\n"],[1,10340,"1"]],[10339,10339],[10340,10340]]],[1590140191249,["Wahaha@DESKTOP-HTU2IVD",[[1,10340,"6 "]],[10340,10340],[10342,10342]]],[1590140192834,["Wahaha@DESKTOP-HTU2IVD",[[-1,10341," "]],[10342,10342],[10341,10341]]],[1590140193390,["Wahaha@DESKTOP-HTU2IVD",[[1,10341,"。 "]],[10341,10341],[10343,10343]]],[1590140194308,["Wahaha@DESKTOP-HTU2IVD",[[-1,10341,"。 "]],[10343,10343],[10341,10341]]],[1590140201712,["Wahaha@DESKTOP-HTU2IVD",[[1,10341,". BIO/"]],[10341,10341],[10347,10347]]],[1590140202695,["Wahaha@DESKTOP-HTU2IVD",[[-1,10346,"/"]],[10347,10347],[10346,10346]]],[1590140209702,["Wahaha@DESKTOP-HTU2IVD",[[1,10346," NIO AIO 的求别"]],[10346,10346],[10358,10358]]],[1590140211034,["Wahaha@DESKTOP-HTU2IVD",[[-1,10356,"求别"]],[10358,10358],[10356,10356]]],[1590140213001,["Wahaha@DESKTOP-HTU2IVD",[[1,10356,"区别\n17. "]],[10356,10356],[10363,10363]]],[1590140214176,["Wahaha@DESKTOP-HTU2IVD",[[-1,10360,"7. "]],[10363,10363],[10360,10360]]],[1590140214401,["Wahaha@DESKTOP-HTU2IVD",[[-1,10359,"1"],[1,10360,"\n"]],[10360,10360],[10359,10359]]],[1590140220321,["Wahaha@DESKTOP-HTU2IVD",[[1,10359,"*   BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。\n\n*   NIO：New IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。\n\n*   AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。"]],[10359,10359],[10568,10568]]],[1590140223286,["Wahaha@DESKTOP-HTU2IVD",[[-1,10359,"*"],[1,10360,"-"]],[10359,10359],[10360,10360]]],[1590140224497,["Wahaha@DESKTOP-HTU2IVD",[[-1,10362," "]],[10360,10360],[10360,10360]]],[1590140229339,["Wahaha@DESKTOP-HTU2IVD",[[-1,10361," "]],[10360,10360],[10360,10360]]],[1590140232326,["Wahaha@DESKTOP-HTU2IVD",[[-1,10422,"*"],[1,10423,"-"]],[10422,10422],[10423,10423]]],[1590140233530,["Wahaha@DESKTOP-HTU2IVD",[[-1,10425," "]],[10423,10423],[10423,10423]]],[1590140234357,["Wahaha@DESKTOP-HTU2IVD",[[-1,10424," "]],[10423,10423],[10423,10423]]],[1590140238052,["Wahaha@DESKTOP-HTU2IVD",[[-1,10490,"*"],[1,10491,"-"]],[10490,10490],[10491,10491]]],[1590140240187,["Wahaha@DESKTOP-HTU2IVD",[[-1,10493," "]],[10491,10491],[10491,10491]]],[1590140300732,[null,[[-1,7096,"\n\n"],[1,7098,", "]],[7096,7096],[7100,7100]]],[1590140300732,[null,[[1,7096,"\n\n"],[-1,7096,", "]],[7100,7100],[7096,7096]]],[1590140243338,["Wahaha@DESKTOP-HTU2IVD",[[-1,10421,"\n"]],[10421,10421],[10420,10420]]],[1590140245542,["Wahaha@DESKTOP-HTU2IVD",[[-1,10488,"\n"]],[10488,10488],[10487,10487]]],[1590140298153,["Wahaha@DESKTOP-HTU2IVD",[[1,10561,"- \n"]],[10560,10560],[10563,10563]]],[1590140298608,["Wahaha@DESKTOP-HTU2IVD",[[-1,10561,"- "]],[10563,10563],[10562,10562]]],[1590140299360,["Wahaha@DESKTOP-HTU2IVD",[[1,10562,"\n"]],[10562,10562],[10563,10563]]],[1590140360732,[null,[[-1,7096,"\n\n"],[1,7098,", "],[-1,10489," "]],[7096,7096],[10489,10489]]],[1590140360732,[null,[[1,7096,"\n\n"],[-1,7096,", "],[1,10489," "]],[10489,10489],[7096,7096]]],[1590140307174,["Wahaha@DESKTOP-HTU2IVD",[[-1,10562,"\n"],[1,10563,"F"]],[10563,10563],[10563,10563]]],[1590140309134,["Wahaha@DESKTOP-HTU2IVD",[[-1,10562,"F"],[1,10563,"\n"]],[10563,10563],[10562,10562]]],[1590140309875,["Wahaha@DESKTOP-HTU2IVD",[[-1,10562,"\n"],[1,10563,"1"]],[10562,10562],[10563,10563]]],[1590140318703,["Wahaha@DESKTOP-HTU2IVD",[[1,10563,"7. file得"]],[10563,10563],[10571,10571]]],[1590140319649,["Wahaha@DESKTOP-HTU2IVD",[[-1,10570,"得"]],[10571,10571],[10570,10570]]],[1590140322892,["Wahaha@DESKTOP-HTU2IVD",[[1,10570,"的常用方法\n18. "]],[10570,10570],[10580,10580]]],[1590140323994,["Wahaha@DESKTOP-HTU2IVD",[[-1,10577,"8. "]],[10580,10580],[10577,10577]]],[1590140324184,["Wahaha@DESKTOP-HTU2IVD",[[-1,10576,"1"],[1,10577,"\n"]],[10577,10577],[10576,10576]]],[1590140330009,["Wahaha@DESKTOP-HTU2IVD",[[1,10576,"*   Files.exists()：检测文件路径是否存在。\n\n*   Files.createFile()：创建文件。\n\n*   Files.createDirectory()：创建文件夹。\n\n*   Files.delete()：删除一个文件或目录。\n\n*   Files.copy()：复制文件。\n\n*   Files.move()：移动文件。\n\n*   Files.size()：查看文件个数。\n\n*   Files.read()：读取文件。\n\n*   Files.write()：写入文件。"]],[10576,10576],[10826,10826]]],[1590140333818,["Wahaha@DESKTOP-HTU2IVD",[[-1,10576,"*"],[1,10577,"-"]],[10576,10576],[10577,10577]]],[1590140334576,["Wahaha@DESKTOP-HTU2IVD",[[-1,10579," "]],[10577,10577],[10577,10577]]],[1590140334797,["Wahaha@DESKTOP-HTU2IVD",[[-1,10578," "]],[10577,10577],[10577,10577]]],[1590140338961,["Wahaha@DESKTOP-HTU2IVD",[[-1,10605,"\n*"],[1,10607,"-"]],[10605,10605],[10606,10606]]],[1590140343184,["Wahaha@DESKTOP-HTU2IVD",[[-1,10635,"*"],[1,10636,"-"]],[10635,10635],[10636,10636]]],[1590140345924,["Wahaha@DESKTOP-HTU2IVD",[[-1,10671,"*"],[1,10672,"-"]],[10671,10671],[10672,10672]]],[1590140348166,["Wahaha@DESKTOP-HTU2IVD",[[-1,10702,"*"],[1,10703,"-"]],[10702,10702],[10703,10703]]],[1590140350615,["Wahaha@DESKTOP-HTU2IVD",[[-1,10726,"*"],[1,10727,"-"]],[10726,10726],[10727,10727]]],[1590140352861,["Wahaha@DESKTOP-HTU2IVD",[[-1,10750,"*"],[1,10751,"-"]],[10750,10750],[10751,10751]]],[1590140355705,["Wahaha@DESKTOP-HTU2IVD",[[-1,10776,"*"],[1,10777,"-"]],[10776,10776],[10777,10777]]],[1590140358661,["Wahaha@DESKTOP-HTU2IVD",[[-1,10800,"*"],[1,10801,"-"]],[10800,10800],[10801,10801]]],[1590140420743,[null,[[-1,7096,"\n\n"],[1,7098,", "],[-1,10490," "],[1,10561,"\n"],[-1,10824,"\n"]],[7096,7096],[10824,10824]]],[1590140420743,[null,[[1,7096,"\n\n"],[-1,7096,", "],[1,10490," "],[-1,10560,"\n"],[1,10824,"\n"]],[10824,10824],[7096,7096]]],[1590140361005,["Wahaha@DESKTOP-HTU2IVD",[[-1,10799,"\n"]],[10799,10799],[10798,10798]]],[1590140362704,["Wahaha@DESKTOP-HTU2IVD",[[-1,10775,"\n"]],[10775,10775],[10774,10774]]],[1590140364369,["Wahaha@DESKTOP-HTU2IVD",[[-1,10749,"\n"]],[10749,10749],[10748,10748]]],[1590140366056,["Wahaha@DESKTOP-HTU2IVD",[[-1,10725,"\n"]],[10725,10725],[10724,10724]]],[1590140368234,["Wahaha@DESKTOP-HTU2IVD",[[-1,10701,"\n"]],[10701,10701],[10700,10700]]],[1590140369872,["Wahaha@DESKTOP-HTU2IVD",[[-1,10670,"\n"]],[10670,10670],[10669,10669]]],[1590140371776,["Wahaha@DESKTOP-HTU2IVD",[[-1,10634,"\n"]],[10634,10634],[10633,10633]]],[1590140375045,["Wahaha@DESKTOP-HTU2IVD",[[1,10578,"  "]],[10578,10578],[10580,10580]]],[1590140413502,["Wahaha@DESKTOP-HTU2IVD",[[1,10819,"- \n"]],[10818,10818],[10821,10821]]],[1590140413816,["Wahaha@DESKTOP-HTU2IVD",[[-1,10819,"- "]],[10821,10821],[10820,10820]]],[1590140414477,["Wahaha@DESKTOP-HTU2IVD",[[1,10820,"\n"]],[10820,10820],[10821,10821]]],[1590140480749,[null,[[-1,7096,"\n\n"],[1,7098,", "],[-1,10490," "],[1,10561,"\n"],[-1,10818,"\n"]],[7096,7096],[10818,10818]]],[1590140480749,[null,[[1,7096,"\n\n"],[-1,7096,", "],[1,10490," "],[-1,10560,"\n"],[1,10818,"\n"]],[10818,10818],[7096,7096]]],[1590140424446,["Wahaha@DESKTOP-HTU2IVD",[[-1,10820,"\n"],[1,10821," "]],[10821,10821],[10820,10821]]],[1590140425403,["Wahaha@DESKTOP-HTU2IVD",[[-1,10820," "],[1,10821,"java"]],[10820,10820],[10824,10824]]],[1590140426166,["Wahaha@DESKTOP-HTU2IVD",[[-1,10821,"ava"]],[10824,10824],[10821,10821]]],[1590140426352,["Wahaha@DESKTOP-HTU2IVD",[[-1,10820,"j"],[1,10821,"\n"]],[10821,10821],[10820,10820]]],[1590140427205,["Wahaha@DESKTOP-HTU2IVD",[[-1,10820,"\n"],[1,10821,"1"]],[10820,10820],[10821,10821]]],[1590140430244,["Wahaha@DESKTOP-HTU2IVD",[[1,10821,"8. java de "]],[10821,10821],[10832,10832]]],[1590140430955,["Wahaha@DESKTOP-HTU2IVD",[[-1,10829,"de "]],[10832,10832],[10829,10829]]],[1590140435716,["Wahaha@DESKTOP-HTU2IVD",[[1,10829,"的容器用那些\n19. "]],[10829,10829],[10840,10840]]],[1590140437653,["Wahaha@DESKTOP-HTU2IVD",[[-1,10837,"9. "]],[10840,10840],[10837,10837]]],[1590140437965,["Wahaha@DESKTOP-HTU2IVD",[[-1,10836,"1"],[1,10837,"\n"]],[10837,10837],[10836,10836]]],[1590140438147,["Wahaha@DESKTOP-HTU2IVD",[[-1,10836,"\n"]],[10836,10836],[10835,10835]]],[1590140439309,["Wahaha@DESKTOP-HTU2IVD",[[-1,10832,"用那些"]],[10835,10835],[10832,10832]]],[1590140441560,["Wahaha@DESKTOP-HTU2IVD",[[1,10832,"有哪些"]],[10832,10832],[10835,10835]]],[1590140441904,["Wahaha@DESKTOP-HTU2IVD",[[1,10836,"19. \n"]],[10835,10835],[10840,10840]]],[1590140443896,["Wahaha@DESKTOP-HTU2IVD",[[-1,10836,"19. "]],[10840,10840],[10836,10836]]]],null,"Wahaha@DESKTOP-HTU2IVD"],["9726362f-2540-4793-a4d8-b268d50a0e81",1591604048083,"\n# java面试题\n\n### 线程相关\n#### 1. 什么是进程\n进程是系统中正在运行的一个程序，程序一旦运行就是进程\n#### 2. 什么是线程\n是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务\n#### 3. 线程实现的方式\n  - 继承Thread类\n  - 实现runable接口\n  - 实现callable接口\n#### 4. Thread 类中的start() 和 run() 方法有什么区别?\n - start(): start方法来启动线程，真正实现了多线程运行，这时无需等待run方法体中的代码执行完毕而直接继续执行后续的代码。通过调用Thread类的 start()方法来启动一个线程，这时此线程处于就绪（可运行）状态，并没有运行，一旦得到cpu时间片，就开始执行run()方法，这里的run()方法 称为线程体，它包含了要执行的这个线程的内容，Run方法运行结束，此线程随即终止。\n - run(): run()方法只是类的一个普通方法而已，如果直接调用Run方法，程序中依然只有主线程这一个线程，其程序执行路径还是只有一条，还是要顺序执行，还是要等待run方法体执行完毕后才可继续执行下面的代码，这样就没有达到写线程的目的。\n - 调用start方法方可启动线程，而run方法只是thread类中的一个普通方法调用，还是在主线程里执行。\n#### 5. 线程的五种状态\n - 新建状态(NEW) 新建一个了线程\n - 可运行状态(RUNNABLE) 线程对象创建后，其他线程调用此对象的start()方法，该状态的线程位于可运行线程池中，等待被线程调度选中，获取cpu 的使用权 。\n - 运行(RUNNING)：可运行状态(runnable)的线程获得了cpu 时间片（timeslice）执行程序代码\n - 阻塞(BLOCKED)：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种：\n   + 等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。\n   + 同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。\n   + 其他阻塞：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。\n  - 死亡(DEAD)：线程run()、main() 方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生\n####  6. 如何知道代码段被哪个线程调用\n```\nSystem.out.println(Thread.currentThread().getName());\n```\n#### 7. sleep()方法\n方法sleep()的作用是在指定的毫秒数内让当前的“正在执行的线程”休眠（暂停执行\n#### 8. 停止线程\n1. run方法执行完成，自然终止。\n2. stop()方法，suspend()以及resume()都是过期作废方法，使用它们结果不可预期。\n\n大多数停止一个线程的操作使用Thread.interrupt()等于说给线程打一个停止的标记, 此方法不回去终止一个正\n在运行的线程，需要加入一个判断才能可以完成线程的停止\n#### 9. interrupted 和 isInterrupted\n\ninterrupted : 判断当前线程是否已经中断,会清除状态。\n\nisInterrupted ：判断线程是否已经中断，不会清除状态。\n\n#### 10.yield\n放弃当前cpu资源，将它让给其他的任务占用cpu执行时间。但放弃的时间不确定，有可能刚刚放弃，马上又获得cpu时间片\n\n#### 11.设置线程上下文类加载器\n1.  获取线程上下文类加载器\n```\nSystem.out.println(Thread.currentThread().getName());\n```\n2. ​ 设置线程类加载器（可以打破Java类加载器的父类委托机制）\n```\npublic  void  setContextClassLoader(ClassLoader cl)\n```\n\n#### 12. join\n join是指把指定的线程加入到当前线程，比如join某个线程a,会让当前线程b进入等待,直到a的生命周期结束，此期间b线程是处于blocked状态。\n\n#### 13. 什么是synchronized?\nsynchronized关键字可以时间一个简单的策略来防止线程干扰和内存一致性错误，如果一个对象是对多个线程可见的，那么对该对想的所有读写都将通过同步的方式来进行。\n\n#### 14. synchronized包括哪两个jvm重要的指令？\n monitor enter 和 monitor exit\n \n#### 15. synchronized关键字用法?\n 可以用于对代码块或方法的修饰\n \n#### 16. synchronized锁的是什么?\n普通同步方法 —————> 锁的是当前实力对象。\n\n静态同步方法—————> 锁的是当前类的Class对象。\n\n同步方法块 —————> 锁的是synchonized括号里配置的对象。\n\n#### 17. volatile关键字\nvolatile 是轻量级的synchronized,它在多处理器开发中保证了共享变量的“可见性“。\n\nJava允许线程访问共享变量，为了保证共享变量能准确和一致的更新，线程应该确保排它锁单独获得这个变量。如果一个字段被声明为volatile,Java线程内存模型所有线程看到这个变量的值是一致的。\n\n#### 18. 等待/通知机制\n一个线程修改了一个对象的值，而另一个线程感知到了变化，然后进行相应的操作。\n 等待\n```\n  synchronized(obj) { \n       while(条件不满足) { \n             obj.wait();\n           } \n         执行对应逻辑 \n  }\n```\n\n通知\n```\n  synchronized(obj){\n        改变条件\n            obj.notifyAll();\n\n  }\n```\n\n#### 19. notify\nnotify()也是Object类的通用方法，也要在同步方法或同步代码块内调用，该方法用来通知哪些可能灯光对象的对象锁的其他线程，如果有多个线程等待，则随机挑选出其中一个呈wait状态的线程，对其发出 通知 notify，并让它等待获取该对象的对象锁。\n\n#### 20. notify/notifyAll\nnotify等于说将等待队列中的一个线程移动到同步队列中，而notifyAll是将等待队列中的所有线程全部移动到同步队列中。\n\n#### 21.ThreadLocal\n\n主要解决每一个线程想绑定自己的值，存放线程的私有数据。\n  - ThreadLocal使用\n 获取当前的线程的值通过get(),设置set(T) 方式来设置值。\n```\n  public class XKThreadLocal {\n  \n      public static ThreadLocal threadLocal = new ThreadLocal();\n  \n      public static void main(String[] args) {\n          if (threadLocal.get() == null) {\n              System.out.println(\"未设置过值\");\n              threadLocal.set(\"线程学习\");\n          }\n          System.out.println(threadLocal.get());\n      }\n  \n  }\n```\n  print：\n```\n  未设置过值\n  线程学习\n```\n\n -  解决get()返回null问题\n通过继承重写initialValue()方法即可。\n```\n  public class ThreadLocalExt extends ThreadLocal{\n  \n      static ThreadLocalExt threadLocalExt = new ThreadLocalExt();\n  \n      @Override\n      protected Object initialValue() {\n          return \"线程学习\";\n      }\n  \n      public static void main(String[] args) {\n          System.out.println(threadLocalExt.get());\n      }\n  }\n```\nprint:\n```\n  线程学习\n```\n\n \n#### 22.lock接口\n锁可以防止多个线程同时共享资源。Java5前程序是靠synchronized实现锁功能。Java5之后，并发包新增Lock接口来实现锁功能。\n\n#### 23.lock接口提供synchronized不具备的主要特性\n\n特性|描述\n---|---\n  尝试非阻塞地获取锁 |   当前线程尝试获取锁，如果这一时刻锁没有被其他线程获取到，则成功获取并持有该锁\n 能被中断的获取锁|   与synchronized不同，获取到锁的线程能够响应中断，当获取到锁的线程被中断时，中断异常将会抛出，同时锁会被释放\n 超时获取锁|   在指定时间内获取锁，如果截止时间仍没有获取到锁，则返回\n   \n#### 24.重入锁RenntrantLock \n\n1. 支持重进入的锁，它表示该锁能够支持一个线程对资源的重复加锁。除此之外，该锁的还支持获取锁时的公平和非公平性选择。\n\n2. 重进入是指任意线程在获取到锁之后能够再次获锁而不被锁阻塞。\n该特性主要解决以下两个问题：\n - 锁需要去识别获取锁的线程是否为当前占据锁的线程，如果是则再次成功获取。\n - 所得最终释放。线程重复n次是获取了锁，随后在第n次释放该锁后，其他线程能够获取到该锁。\n\n3. RenntrantLock 默认为非公平锁\n4. 公平性与否针对获取锁来说的，如果一个锁是公平的，那么锁的获取顺序就应该符合请求的绝对时间顺序，也就是FIFO。\n\n#### 25. 读写锁\n读写锁允许同一时刻多个线程访问，但是写线程和其他写线程均被阻塞。读写锁维护一个读锁一个写锁，读写分离，并发性能得到提高\njava提供实现读写锁的实现类是ReentrantReadWriteLock.\n\n#### 26.Java并发容器\n1. concurrenthashmap, copyonwritearraylist, CopyOnWriteArraySet, ConcurrentLinkedQueue\n2. ConcurrentSkipListMap、ConcurrentSkipListSet、ArrayBlockingQueue、\n3. LinkedBlockingQueue、LinkedBlockingDeque、PriorityBlockingQueue、SynchronousQueue、LinkedTransferQueue、DelayQueue\n\n#### 27. 什么是阻塞队列\n- 阻塞队列是一个支持两个附加操作的队列,这两个附加操作支持阻塞的插入和移除方法\n 1. 支持阻塞的插入方法：当队列满时，队列会阻塞插入元素的线程，直到队列不满。\n 2. 支持阻塞的一处方法：当队列为空时，获取元素的线程会等待队列变为非空\n- 阻塞队列的常用应用场景 ：\n常用于生产者和消费者模式中，生产者是往队列中添加元素的线程，消费者是从队列中提取元素的线程。阻塞队列正好是生产者存放，消费者来获取的容器\n- java里的阻塞队列\nArrayBlockingQueue： 数组结构组成的 |有界阻塞队列 \nLinkedBlockingQueue： 链表结构组成的|有界阻塞队列 \nPriorityBlockingQueue: 支持优先级排序|无界阻塞队列 \nDelayQueue： 优先级队列实现|无界阻塞队列 \nSynchronousQueue： 不存储元素| 阻塞队列 \nLinkedTransferQueue： 链表结构组成|无界阻塞队列 \nLinkedBlockingDeque： 链表结构组成|双向阻塞队列\n\n#### 28. 为什么使用线程池\n1. 降低系统消耗: 重复利用已经创建的线程降低线程创建和销毁造成的资源损耗\n2. 提高响应速度：当任务到达时，任务不需要等待线程的创建就可以立即执行\n3. 提供线程的可管理性：可以通过设置合理分配、调优、监控\n\n#### 29. 线程池的工作流程\n1. 判断核心线程池的线程是否都在执行任务，否--->创建一个新的线程来执行任务。是--->走下个流程\n2. 判断工作队列是否已满: 否--->新任务储存到这个工作队列中， 是---> 走下个流程\n3. 判断线程池里的线程是否都在工作状态: 否--->创建一个新的线程来执行任务。是--->走下个流程\n4. 按照设置的策略来处理无法执行的任务\n\n#### 30. 创建线程池参数有哪些\n\n```\npublic ThreadPoolExecutor( int corePoolSize, \n                           int maximumPoolSize, \n                           long keepAliveTime, TimeUnit unit,\n                           BlockingQueue<Runnable> workQueue, \n                           ThreadFactory threadFactory, \n                           RejectedExecutionHandler handler)\n\n```\n\n1. corePoolSize:核心线程池大小，当提交一个任务时，线程池会创建一个线程来执行任务，即使其他空闲的核心线程能够执行新任务也会创建，等待需要执行的任务数大于线程核心大小就不会继续创建。\n\n2. maximumPoolSize:线程池最大数，允许创建的最大线程数，如果队列满了，并且已经创建的线程数小于最大线程数，则会创建新的线程执行任务。如果是无界队列，这个参数基本没用。\n\n3. keepAliveTime: 线程保持活动时间，线程池工作线程空闲后，保持存活的时间，所以如果任务很多，并且每个任务执行时间较短，可以调大时间，提高线程利用率。\n\n4. unit: 线程保持活动时间单位，天（DAYS)、小时(HOURS)、分钟(MINUTES、毫秒MILLISECONDS)、微秒(MICROSECONDS)、纳秒(NANOSECONDS)\n\n5. workQueue: 任务队列，保存等待执行的任务的阻塞队列。\n一般来说可以选择如下阻塞队列：\nArrayBlockingQueue:基于数组的有界阻塞队列。\nLinkedBlockingQueue:基于链表的阻塞队列。\nSynchronizedQueue:一个不存储元素的阻塞队列。\nPriorityBlockingQueue:一个具有优先级的阻塞队列。\n\n6. threadFactory：设置创建线程的工厂，可以通过线程工厂给每个创建出来的线程设置更有意义的名字。\n\n7. handler: 饱和策略也叫拒绝策略。当队列和线程池都满了，即达到饱和状态。所以需要采取策略来处理新的任务。默认策略是AbortPolicy。\n AbortPolicy:直接抛出异常。\nCallerRunsPolicy: 调用者所在的线程来运行任务。\nDiscardOldestPolicy:丢弃队列里最近的一个任务，并执行当前任务。\nDiscardPolicy:不处理，直接丢掉。\n当然可以根据自己的应用场景，实现RejectedExecutionHandler接口自定义策略。\n\n#### 31.线程池提交的方式\nexcute(),  submit()\nexcute(): 无返回值，所以无法判断任务是否成功\nsubmit()：用于提交需要有返回值的任务，线程池返回一个future类型对象，通过future对象可以判断任务是否执行成功，并且通过future的get()来获取返回值，get()方法会阻塞当前线程知道任务完成。get(long timeout,TimeUnit unit)可以设置超市时间。\n\n#### 32. 线程池关闭方式\n可以通过shutdown(0或shutdownnow()来关闭线程池。他们的工作原理是通过遍历线程池的工作线程，然后逐个调用线程的interrupt来中断线程，所以无法响应终端的任务可能永远停止。\nshutdownnow首先将线程池状态设置为stop，然后尝试停止所有正在执行或者暂停的线程，并返回等待执行的列表\nshutdown只是将线程池的状态设置为shutdown状态，然后终端所有没有正在执行任务的线程。\n\n只要调用两者之一，isShutdown就会返回true,当所有任务都已关闭，isTerminaed就会返回true。\n\n一般来说调用shutdown方法来关闭线程池，如果任务不一定要执行完，可以直接调用shutdownNow方法。\n\n\n#### 33. Excutor\n1. 从JDK1.5开始，把工作单元和执行机制分开。工作单元包括Runable和callable，而执行机制有Executor框架提供。\n2. executor框架的主要成员\n - ThreadPoolExecutor :可以通过工厂类Executors来创建。\n - 可以创建3种类型的ThreadPoolExecutor：SingleThreadExecutor、FixedThreadPool、CachedThreadPool。\n- ScheduledThreadPoolExecutor ：可以通过工厂类Executors来创建。\n\n- 可以创建2中类型的ScheduledThreadPoolExecutor：ScheduledThreadPoolExecutor、SingleThreadScheduledExecutor\n\n- Future接口:Future和实现Future接口的FutureTask类来表示异步计算的结果。\n\n- Runnable和Callable:它们的接口实现类都可以被ThreadPoolExecutor或ScheduledThreadPoolExecutor执行。Runnable不能返回结果，Callable可以返回结果。\n\n\n### java基础\n\n#### 1. JDK 和 JRE 有什么区别\n- JDK：Java Development Kit 的简称，java 开发工具包，提供了 java 的开发环境和运行环境。\n- JRE：Java Runtime Environment 的简称，java 运行环境，为 java 的运行提供了所需环境。\n\n具体来说 JDK 其实包含了 JRE，同时还包含了编译 java 源码的编译器 javac，还包含了很多 java 程序调试和分析的工具。简单来说：如果你需要运行 java 程序，只需安装 JRE 就可以了，如果你需要编写 java 程序，需要安装 JDK。\n\n#### 2. == 和equals\n1. == 对于基本类型来说是值比较，对于引用类型来说是比较的是引用；\n2. equals 默认情况下是引用比较，只是很多类重新了 equals 方法，比如 String、Integer 等把它变成了值比较，所以一般情况下 equals 比较的是值是否相等。\n\n#### 3. 两个对象的hashcode值相同，则equals的一定为true 对吗？\n不对，，因为在散列表中，hashCode()相等即两个键值对的哈希值相等，然而哈希值相等，并不一定能得出键值对相等。\n\n4. final 在 java 中有什么作用？\n\n*   final 修饰的类叫最终类，该类不能被继承。\n*   final 修饰的方法不能被重写。\n*   final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。\n\n5.  java 中的 Math.round(-1.5) 等于多少\n等于 -1，因为在数轴上取值时，中间值（0.5）向右取整，所以正 0.5 是往上取整，负 0.5 是直接舍弃。\n\n6. String 属于基础的数据类型吗？\nString 不属于基础类型，基础类型有 8 种：byte、boolean、char、short、int、float、long、double，而 String 属于对象。\n\n7. java 中操作字符串都有哪些类？它们之间有什么区别？\n- 操作字符串的类有：String、StringBuffer、StringBuilder。\n- String 和 StringBuffer、StringBuilder 的区别在于 String 声明的是不可变的对象，每次操作都会生成新的 String 对象，然后将指针指向新的 String 对象，而 StringBuffer、StringBuilder 可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下最好不要使用 String。\n- StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以在单线程环境下推荐使用 StringBuilder，多线程环境下推荐使用 StringBuffer。\n\n8. String str=\"i\"与 String str=new String(\"i\")一样吗？\n不一样，因为内存的分配方式不一样。String str=\"i\"的方式，java 虚拟机会将其分配到常量池中；而 String str=new String(\"i\") 则会被分到堆内存中。\n\n9. 如何将字符串反转\n使用stringbuilder 或者stringbuffer的reverse()方法\n\n10. string类的常用方法\n-   indexOf()：返回指定字符的索引。\n-   charAt()：返回指定索引处的字符。\n-   replace()：字符串替换。\n-   trim()：去除字符串两端空白。\n-   split()：分割字符串，返回一个分割后的字符串数组。\n-   getBytes()：返回字符串的 byte 类型数组。\n-   length()：返回字符串长度。\n-   toLowerCase()：将字符串转成小写字母。\n-   toUpperCase()：将字符串转成大写字符。\n-   substring()：截取字符串。\n-   equals()：字符串比较。\n\n11. 抽象类必须要有抽象方法吗？\n不需要\n\n12. 普通类和抽象类的区别\n- 普通类不能包含抽象方法\n- 抽象类不能实例化\n\n13. 抽象类可以用final修饰吗？\n不能，抽象类本来就是用来被继承的\n\n14. 接口和抽象类有什么区别\n- 抽象类的子类用extend来继承， 接口必须用implements来实现接口\n- 抽象类可以有构造函数， 接口不可以\n- main 抽象类可以有main方法， 接口不可以\n- 类可以实现多个接口，但只能继承一个抽象类 \n- 接口的方法默认使用public, 抽象类可以使用任意修饰符\n\n15. java中流分几种\n- 按功能分 ： 输入流、 输出流\n- 按类型分： 字节流、 字符流\n字节流和字符流的区别： 字节流按8位为传输单位输入输出数据，字符流按16位为输出输入单位\n\n16. BIO NIO AIO 的区别\n- BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。\n- NIO：New IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。\n- AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。\n\n17. file的常用方法\n-   Files.exists()：检测文件路径是否存在。\n-   Files.createFile()：创建文件。\n-   Files.createDirectory()：创建文件夹。\n-   Files.delete()：删除一个文件或目录。\n-   Files.copy()：复制文件。\n-   Files.move()：移动文件。\n-   Files.size()：查看文件个数。\n-   Files.read()：读取文件。\n-   Files.write()：写入文件。\n\n18. java 的容器有哪些\n\n",[[1591604043865,["Wahaha@DESKTOP-HTU2IVD",[[1,10836,"19. \n"]],[10835,10835],[10840,10840]]],[1591604045513,["Wahaha@DESKTOP-HTU2IVD",[[-1,10836,"19. "]],[10840,10840],[10836,10836]]],[1591604055996,["Wahaha@DESKTOP-HTU2IVD",[[1,10836,"！"]],[10836,10836],[10837,10837]]],[1591604056839,["Wahaha@DESKTOP-HTU2IVD",[[-1,10836,"！"]],[10837,10837],[10836,10836]]],[1591604057154,["Wahaha@DESKTOP-HTU2IVD",[[-1,10837,"\n"]],[10836,10836],[10835,10835]]],[1591604057959,["Wahaha@DESKTOP-HTU2IVD",[[1,10836,"19. \n"]],[10835,10835],[10840,10840]]],[1591604059056,["Wahaha@DESKTOP-HTU2IVD",[[-1,10836,"19. "]],[10840,10840],[10836,10836]]],[1591604060312,["Wahaha@DESKTOP-HTU2IVD",[[1,10836,"！"]],[10836,10836],[10837,10837]]],[1591604060996,["Wahaha@DESKTOP-HTU2IVD",[[-1,10836,"！"]],[10837,10837],[10836,10836]]],[1591604063519,["Wahaha@DESKTOP-HTU2IVD",[[1,10836,"![]"]],[10836,10836],[10839,10839]]],[1591604067957,["Wahaha@DESKTOP-HTU2IVD",[[1,10838,"java容器"]],[10838,10838],[10844,10844]]],[1591604070414,["Wahaha@DESKTOP-HTU2IVD",[[1,10845,"（）"]],[10845,10845],[10847,10847]]],[1591604071947,["Wahaha@DESKTOP-HTU2IVD",[[1,10846,"https://raw.githubusercontent.com/FuLaMeiEr/java-learn-md/master/report/picture/java%E5%AE%B9%E5%99%A8.png"]],[10846,10846],[10952,10952]]],[1591604079791,["Wahaha@DESKTOP-HTU2IVD",[[-1,10845,"（"]],[10845,10845],[10845,10845]]],[1591604081251,["Wahaha@DESKTOP-HTU2IVD",[[1,10845,"（"]],[10845,10845],[10846,10846]]],[1591604083335,["Wahaha@DESKTOP-HTU2IVD",[[-1,10845,"（"]],[10846,10846],[10845,10845]]],[1591604085437,["Wahaha@DESKTOP-HTU2IVD",[[-1,10951,"）"]],[10952,10952],[10951,10951]]],[1591604089839,["Wahaha@DESKTOP-HTU2IVD",[[1,10845,"("]],[10845,10845],[10846,10846]]],[1591604089891,["Wahaha@DESKTOP-HTU2IVD",[[1,10854,")https://"]],[10846,10846],[10846,10854]]],[1591604093893,["Wahaha@DESKTOP-HTU2IVD",[[-1,10855,"https://raw.githubusercontent.com/FuLaMeiEr/java-learn-md/master/report/picture/java%E5%AE%B9%E5%99%A8.png"]],[10855,10961],[10855,10855]]],[1591604097328,["Wahaha@DESKTOP-HTU2IVD",[[1,10854,"raw.githubusercontent.com/FuLaMeiEr/java-learn-md/master/report/picture/java%E5%AE%B9%E5%99%A8.png"]],[10846,10854],[10952,10952]]],[1591604970919,["Wahaha@DESKTOP-HTU2IVD",[[1,10955,"\n"]],[10953,10953],[10954,10954]]],[1591604971195,["Wahaha@DESKTOP-HTU2IVD",[[1,10956,"\n"]],[10954,10954],[10955,10955]]],[1591604971412,["Wahaha@DESKTOP-HTU2IVD",[[1,10957,"\n"]],[10955,10955],[10956,10956]]],[1591604972109,["Wahaha@DESKTOP-HTU2IVD",[[-1,10957,"\n"]],[10956,10956],[10955,10955]]],[1591604972760,["Wahaha@DESKTOP-HTU2IVD",[[-1,10956,"\n"]],[10955,10955],[10954,10954]]],[1591604973449,["Wahaha@DESKTOP-HTU2IVD",[[1,10956,"\n"]],[10954,10954],[10955,10955]]],[1591604997863,["Wahaha@DESKTOP-HTU2IVD",[[1,10955,"19. conllection和collections有什么"]],[10955,10955],[10985,10985]]],[1591604998924,["Wahaha@DESKTOP-HTU2IVD",[[1,10985,"区别"]],[10985,10985],[10987,10987]]],[1591604999161,["Wahaha@DESKTOP-HTU2IVD",[[1,10988,"20. \n"]],[10987,10987],[10992,10992]]],[1591605001147,["Wahaha@DESKTOP-HTU2IVD",[[-1,10988,"20. "]],[10992,10992],[10988,10988]]],[1591605019113,["Wahaha@DESKTOP-HTU2IVD",[[1,10988,"- java.util.collection shi"]],[10988,10988],[11014,11014]]],[1591605019770,["Wahaha@DESKTOP-HTU2IVD",[[-1,11011,"shi"]],[11014,11014],[11011,11011]]],[1591605051877,["Wahaha@DESKTOP-HTU2IVD",[[1,11011,"是一个集合接口。他提供了对集合对象记性基本"]],[11011,11011],[11032,11032]]],[1591605052770,["Wahaha@DESKTOP-HTU2IVD",[[-1,11027,"象记性基本"]],[11032,11032],[11027,11027]]],[1591605055843,["Wahaha@DESKTOP-HTU2IVD",[[1,11027,"象"]],[11027,11027],[11028,11028]]],[1591605062010,["Wahaha@DESKTOP-HTU2IVD",[[1,11028,"进行操作的"]],[11028,11028],[11033,11033]]],[1591605068613,["Wahaha@DESKTOP-HTU2IVD",[[1,11030,"基本"]],[11030,11030],[11032,11032]]],[1591605084080,["Wahaha@DESKTOP-HTU2IVD",[[1,11035,"通用接口方法。Coll"]],[11035,11035],[11046,11046]]],[1591605085575,["Wahaha@DESKTOP-HTU2IVD",[[-1,11044,"ll"]],[11046,11046],[11044,11044]]],[1591605086465,["Wahaha@DESKTOP-HTU2IVD",[[1,11044,"nle"]],[11044,11044],[11047,11047]]],[1591605086946,["Wahaha@DESKTOP-HTU2IVD",[[-1,11046,"e"]],[11047,11047],[11046,11046]]],[1591605088448,["Wahaha@DESKTOP-HTU2IVD",[[1,11046,"leci"]],[11046,11046],[11050,11050]]],[1591605088904,["Wahaha@DESKTOP-HTU2IVD",[[-1,11049,"i"]],[11050,11050],[11049,11049]]],[1591605117785,["Wahaha@DESKTOP-HTU2IVD",[[1,11049,"tion 在Java中类库中有很多的具体的实现。C"]],[11049,11049],[11074,11074]]],[1591605129377,["Wahaha@DESKTOP-HTU2IVD",[[-1,10961,"n"]],[10961,10961],[10961,10961]]],[1591605134657,["Wahaha@DESKTOP-HTU2IVD",[[1,11073,"oll"]],[11073,11073],[11076,11076]]],[1591605134972,["Wahaha@DESKTOP-HTU2IVD",[[-1,11075,"l"]],[11076,11076],[11075,11075]]],[1591605144704,["Wahaha@DESKTOP-HTU2IVD",[[1,11075,"lectionjieko"]],[11075,11075],[11087,11087]]],[1591605145729,["Wahaha@DESKTOP-HTU2IVD",[[-1,11082,"jieko"]],[11087,11087],[11082,11082]]],[1591605148525,["Wahaha@DESKTOP-HTU2IVD",[[1,11082,"接口的意思"]],[11082,11082],[11087,11087]]],[1591605156334,["Wahaha@DESKTOP-HTU2IVD",[[-1,11085,"意思"]],[11087,11087],[11085,11085]]],[1591605158774,["Wahaha@DESKTOP-HTU2IVD",[[1,11085,"一亿"]],[11085,11085],[11087,11087]]],[1591605159540,["Wahaha@DESKTOP-HTU2IVD",[[-1,11085,"一亿"]],[11087,11087],[11085,11085]]],[1591605177341,["Wahaha@DESKTOP-HTU2IVD",[[1,11085,"意义就是为各种具体的集合提供统一化"]],[11085,11085],[11102,11102]]],[1591605178346,["Wahaha@DESKTOP-HTU2IVD",[[1,11102,"的"]],[11102,11102],[11103,11103]]],[1591605185036,["Wahaha@DESKTOP-HTU2IVD",[[-1,11104,"\n"]],[11104,11104],[0,0]]],[1591605191475,["Wahaha@DESKTOP-HTU2IVD",[[-1,11101,"化的"]],[11103,11103],[11101,11101]]],[1591605204012,["Wahaha@DESKTOP-HTU2IVD",[[1,11101,"操作方式，器"]],[11101,11101],[11107,11107]]],[1591605205407,["Wahaha@DESKTOP-HTU2IVD",[[-1,11106,"器"]],[11107,11107],[11106,11106]]],[1591605235428,["Wahaha@DESKTOP-HTU2IVD",[[1,11106,"其直接继承接口的有List"]],[11106,11106],[11119,11119]]],[1591605240473,["Wahaha@DESKTOP-HTU2IVD",[[1,11119,"和set."]],[11119,11119],[11124,11124]]],[1591605240828,["Wahaha@DESKTOP-HTU2IVD",[[1,11125,"- \n"]],[11124,11124],[11127,11127]]],[1591605246885,["Wahaha@DESKTOP-HTU2IVD",[[1,11127,"ci"]],[11127,11127],[11129,11129]]],[1591605247742,["Wahaha@DESKTOP-HTU2IVD",[[-1,11127,"ci"]],[11129,11129],[11127,11127]]],[1591605250449,["Wahaha@DESKTOP-HTU2IVD",[[1,11127,"Colleci"]],[11127,11127],[11134,11134]]],[1591605251579,["Wahaha@DESKTOP-HTU2IVD",[[-1,11133,"i"]],[11134,11134],[11133,11133]]],[1591605296763,["Wahaha@DESKTOP-HTU2IVD",[[1,11133,"tions则是集合类的一个工具类。其中提供了一系列的静态方法，用于对"]],[11133,11133],[11167,11167]]],[1591605324440,["Wahaha@DESKTOP-HTU2IVD",[[1,11167,"集合中元素的排序、搜索以及线程安全的各种啊哦做"]],[11167,11167],[11190,11190]]],[1591605326166,["Wahaha@DESKTOP-HTU2IVD",[[1,11191,"- \n"]],[11190,11190],[11193,11193]]],[1591605327319,["Wahaha@DESKTOP-HTU2IVD",[[-1,11191,"- "]],[11193,11193],[11191,11191]]],[1591605328304,["Wahaha@DESKTOP-HTU2IVD",[[1,11192,"\n"]],[11191,11191],[11192,11192]]],[1591605328983,["Wahaha@DESKTOP-HTU2IVD",[[-1,11192,"\n"],[1,11193,"2"]],[11192,11192],[11193,11193]]],[1591605329910,["Wahaha@DESKTOP-HTU2IVD",[[1,11193,"0. "]],[11193,11193],[11196,11196]]],[1591605614387,["Wahaha@DESKTOP-HTU2IVD",[[1,11196,"LIST"]],[11196,11196],[11200,11200]]],[1591605615051,["Wahaha@DESKTOP-HTU2IVD",[[-1,11197,"IST"]],[11200,11200],[11197,11197]]],[1591605617540,["Wahaha@DESKTOP-HTU2IVD",[[1,11197,"IST"]],[11197,11197],[11200,11200]]],[1591605618393,["Wahaha@DESKTOP-HTU2IVD",[[-1,11196,"LIST"]],[11200,11200],[11196,11196]]],[1591605626153,["Wahaha@DESKTOP-HTU2IVD",[[1,11196,"List、Map/"]],[11196,11196],[11205,11205]]],[1591605626987,["Wahaha@DESKTOP-HTU2IVD",[[-1,11204,"/"]],[11205,11205],[11204,11204]]],[1591605628849,["Wahaha@DESKTOP-HTU2IVD",[[1,11204,"、s"]],[11204,11204],[11206,11206]]],[1591605629433,["Wahaha@DESKTOP-HTU2IVD",[[-1,11205,"s"]],[11206,11206],[11205,11205]]],[1591605636175,["Wahaha@DESKTOP-HTU2IVD",[[1,11205,"Set的区别\n21. "]],[11205,11205],[11216,11216]]],[1591605637794,["Wahaha@DESKTOP-HTU2IVD",[[-1,11213,"1. "]],[11216,11216],[11213,11213]]],[1591605638584,["Wahaha@DESKTOP-HTU2IVD",[[-1,11212,"2"],[1,11213,"\n"]],[11213,11213],[11212,11212]]],[1591605640462,["Wahaha@DESKTOP-HTU2IVD",[[-1,11212,"\n"],[1,11213,"!"]],[11212,11212],[11213,11213]]],[1591605644254,["Wahaha@DESKTOP-HTU2IVD",[[1,11213,"[]("]],[11213,11213],[11216,11216]]],[1591605644312,["Wahaha@DESKTOP-HTU2IVD",[[1,11216,"https://)"]],[11216,11216],[11216,11224]]],[1591605644455,["Wahaha@DESKTOP-HTU2IVD",[[-1,11216,"https://"],[1,11224,")"]],[11216,11224],[11217,11217]]],[1591605651731,["Wahaha@DESKTOP-HTU2IVD",[[-1,11215,"())"]],[11217,11217],[11215,11215]]],[1591605653181,["Wahaha@DESKTOP-HTU2IVD",[[1,11215,"("]],[11215,11215],[11216,11216]]],[1591605653236,["Wahaha@DESKTOP-HTU2IVD",[[1,11216,"https://)"]],[11216,11216],[11216,11224]]],[1591605653380,["Wahaha@DESKTOP-HTU2IVD",[[-1,11216,"https://"],[1,11224,")"]],[11216,11224],[11217,11217]]],[1591605658469,["Wahaha@DESKTOP-HTU2IVD",[[1,11214,"List、Map、Set的区别"]],[11214,11214],[11229,11229]]],[1591605669328,["Wahaha@DESKTOP-HTU2IVD",[[1,11231,"[https://github.com/FuLaMeiEr/java-learn-md/blob/master/report/picture/list%E3%80%81set%E3%80%81map%E7%9A%84%E5%8C%BA%E5%88%AB.png](https://github.com/FuLaMeiEr/java-learn-md/blob/master/report/picture/list%E3%80%81set%E3%80%81map%E7%9A%84%E5%8C%BA%E5%88%AB.png"]],[11231,11232],[11493,11493]]],[1591605680031,["Wahaha@DESKTOP-HTU2IVD",[[-1,11231,"[https://github.com/FuLaMeiEr/java-learn-md/blob/master/report/picture/list%E3%80%81set%E3%80%81map%E7%9A%84%E5%8C%BA%E5%88%AB.png]"]],[11231,11362],[11231,11231]]],[1591605688289,["Wahaha@DESKTOP-HTU2IVD",[[-1,11362,")"]],[11363,11363],[11362,11362]]],[1591605696253,["Wahaha@DESKTOP-HTU2IVD",[[-1,11231,"("]],[11232,11232],[11231,11231]]],[1591605704447,["Wahaha@DESKTOP-HTU2IVD",[[1,11361,"\n\n"]],[11361,11361],[11362,11362]]],[1591605706228,["Wahaha@DESKTOP-HTU2IVD",[[1,11363,"\n"]],[11362,11362],[11363,11363]]],[1591605706595,["Wahaha@DESKTOP-HTU2IVD",[[-1,11363,"\n"],[1,11364,"2"]],[11363,11363],[11364,11364]]],[1591605717602,["Wahaha@DESKTOP-HTU2IVD",[[1,11364,"1. **HashMap 和 Hashtable 有什么区别？**"]],[11364,11364],[11397,11397]]],[1591605723021,["Wahaha@DESKTOP-HTU2IVD",[[-1,11367,"**"]],[11369,11369],[11367,11367]]],[1591605724542,["Wahaha@DESKTOP-HTU2IVD",[[-1,11393,"**"]],[11395,11395],[11393,11393]]],[1591605725353,["Wahaha@DESKTOP-HTU2IVD",[[1,11393,"\n22. "]],[11393,11393],[11398,11398]]],[1591605726578,["Wahaha@DESKTOP-HTU2IVD",[[-1,11395,"2. "]],[11398,11398],[11395,11395]]],[1591605726761,["Wahaha@DESKTOP-HTU2IVD",[[-1,11394,"2"],[1,11395,"\n"]],[11395,11395],[11394,11394]]],[1591605733690,["Wahaha@DESKTOP-HTU2IVD",[[1,11394,"*   hashMap去掉了HashTable 的contains方法，但是加上了containsValue（）和containsKey（）方法。\n\n*   hashTable同步的，而HashMap是非同步的，效率上逼hashTable要高。\n\n*   hashMap允许空键值，而hashTable不允许。"]],[11394,11394],[11549,11549]]],[1591605736269,["Wahaha@DESKTOP-HTU2IVD",[[-1,11468,"\n"]],[11468,11468],[11467,11467]]],[1591605741136,["Wahaha@DESKTOP-HTU2IVD",[[-1,11516,"\n"]],[11516,11516],[11515,11515]]],[1591605744600,["Wahaha@DESKTOP-HTU2IVD",[[-1,11394,"*"],[1,11395,"-"]],[11394,11395],[11395,11395]]],[1591605745547,["Wahaha@DESKTOP-HTU2IVD",[[-1,11397," "]],[11395,11395],[11395,11395]]],[1591605746329,["Wahaha@DESKTOP-HTU2IVD",[[-1,11396," "]],[11395,11395],[11395,11395]]],[1591605746860,["Wahaha@DESKTOP-HTU2IVD",[[-1,11395," "]],[11395,11395],[11395,11395]]],[1591605747562,["Wahaha@DESKTOP-HTU2IVD",[[1,11395," "]],[11395,11395],[11396,11396]]],[1591605750357,["Wahaha@DESKTOP-HTU2IVD",[[-1,11466,"*"],[1,11467,"-"]],[11466,11467],[11467,11467]]],[1591605752219,["Wahaha@DESKTOP-HTU2IVD",[[-1,11469," "]],[11467,11467],[11467,11467]]],[1591605752479,["Wahaha@DESKTOP-HTU2IVD",[[-1,11468," "]],[11467,11467],[11467,11467]]],[1591605755208,["Wahaha@DESKTOP-HTU2IVD",[[-1,11512,"*"],[1,11513,"-"]],[11512,11513],[11513,11513]]],[1591605756251,["Wahaha@DESKTOP-HTU2IVD",[[-1,11515," "]],[11513,11513],[11513,11513]]],[1591605756629,["Wahaha@DESKTOP-HTU2IVD",[[-1,11514," "]],[11513,11513],[11513,11513]]],[1591605759610,["Wahaha@DESKTOP-HTU2IVD",[[1,11542,"- \n"]],[11541,11541],[11544,11544]]],[1591605760693,["Wahaha@DESKTOP-HTU2IVD",[[-1,11542,"- "]],[11544,11544],[11542,11542]]],[1591605761489,["Wahaha@DESKTOP-HTU2IVD",[[1,11543,"\n"]],[11542,11542],[11543,11543]]],[1591605762045,["Wahaha@DESKTOP-HTU2IVD",[[-1,11543,"\n"],[1,11544,"2"]],[11543,11543],[11544,11544]]],[1591605762550,["Wahaha@DESKTOP-HTU2IVD",[[1,11544,"2 "]],[11544,11544],[11546,11546]]],[1591605763634,["Wahaha@DESKTOP-HTU2IVD",[[-1,11545," "]],[11546,11546],[11545,11545]]],[1591605769554,["Wahaha@DESKTOP-HTU2IVD",[[1,11545,". **如何决定使用 HashMap 还是 TreeMap？**"]],[11545,11545],[11577,11577]]],[1591605771292,["Wahaha@DESKTOP-HTU2IVD",[[-1,11575,"**"]],[11577,11577],[11575,11575]]],[1591605774117,["Wahaha@DESKTOP-HTU2IVD",[[-1,11547,"**"]],[11549,11549],[11547,11547]]],[1591605785451,["Wahaha@DESKTOP-HTU2IVD",[[1,11573,"\n23. **说一下 HashMap 的实现原理**"]],[11573,11573],[11599,11599]]],[1591605786625,["Wahaha@DESKTOP-HTU2IVD",[[-1,11597,"**"]],[11599,11599],[11597,11597]]],[1591605793826,["Wahaha@DESKTOP-HTU2IVD",[[1,11584,"===="]],[11584,11584],[11586,11586]]],[1591605796031,["Wahaha@DESKTOP-HTU2IVD",[[-1,11578,"**说一下 =="]],[11586,11586],[11578,11578]]],[1591605796349,["Wahaha@DESKTOP-HTU2IVD",[[-1,11579,"="]],[11578,11578],[11578,11578]]],[1591605796588,["Wahaha@DESKTOP-HTU2IVD",[[-1,11578,"="]],[11578,11578],[11578,11578]]],[1591605809174,["Wahaha@DESKTOP-HTU2IVD",[[1,11574,"\n"]],[11574,11574],[11575,11575]]],[1591605810177,["Wahaha@DESKTOP-HTU2IVD",[[1,11574,"对于在Map中插入、删除和定位元素这类操作，HashMap是最好的选择。然而，假如你需要对一个有序的key集合进行遍历，TreeMap是更好的选择。基于你的collection的大小，也许向HashMap中添加元素会更快，将map换为TreeMap进行有序key的遍历。"]],[11574,11574],[11709,11709]]],[1591605816066,["Wahaha@DESKTOP-HTU2IVD",[[1,11727,"\n24. "]],[11727,11727],[11732,11732]]],[1591605820402,["Wahaha@DESKTOP-HTU2IVD",[[1,11728,"\n"]],[11728,11728],[11729,11729]]],[1591605830372,["Wahaha@DESKTOP-HTU2IVD",[[1,11728,"HashMap概述：HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。 \n\nHashMap的数据结构：在java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。\n\n当我们往Hashmap中put元素时,首先根据key的hashcode重新计算hash值,根绝hash值得到这个元素在数组中的位置(下标),如果该数组在该位置上已经存放了其他元素,那么在这个位置上的元素将以链表的形式存放,新加入的放在链头,最先加入的放入链尾.如果数组中该位置没有元素,就直接将该元素放到数组的该位置上。\n\n需要注意Jdk 1.8中对HashMap的实现做了优化,当链表中的节点数据超过八个之后,该链表会转为红黑树来提高查询效率,从原来的O(n)到O(logn)"]],[11728,11728],[12192,12192]]],[1591605841894,["Wahaha@DESKTOP-HTU2IVD",[[1,11574,"23. \n"]],[11573,11573],[11578,11578]]],[1591605846224,["Wahaha@DESKTOP-HTU2IVD",[[-1,11574,"23. "]],[11578,11578],[11574,11574]]],[1591605846753,["Wahaha@DESKTOP-HTU2IVD",[[-1,11574,"\n"]],[11574,11574],[11573,11573]]],[1591605855500,["Wahaha@DESKTOP-HTU2IVD",[[1,11728,"`"],[-1,11822," "],[1,11823," "]],[11728,11728],[11729,11729]]],[1591605856195,["Wahaha@DESKTOP-HTU2IVD",[[-1,11728,"`"]],[11729,11729],[11728,11728]]],[1591605856677,["Wahaha@DESKTOP-HTU2IVD",[[1,11728,"- "]],[11728,11728],[11730,11730]]],[1591605860262,["Wahaha@DESKTOP-HTU2IVD",[[1,11827,"- "]],[11827,11827],[11829,11829]]],[1591605862907,["Wahaha@DESKTOP-HTU2IVD",[[1,11957,"- "]],[11957,11957],[11959,11959]]],[1591605865456,["Wahaha@DESKTOP-HTU2IVD",[[1,12121,"- "]],[12121,12121],[12123,12123]]],[1591606305313,["Wahaha@DESKTOP-HTU2IVD",[[1,12205,"HashSetDE SH"]],[12205,12205],[12217,12217]]],[1591606307528,["Wahaha@DESKTOP-HTU2IVD",[[-1,12212,"DE SH"]],[12217,12217],[12212,12212]]],[1591606312484,["Wahaha@DESKTOP-HTU2IVD",[[1,12212,"的实现原理\n25. "]],[12212,12212],[12222,12222]]],[1591606313701,["Wahaha@DESKTOP-HTU2IVD",[[-1,12218,"25. "],[1,12222,"\n\n"]],[12222,12222],[12219,12219]]],[1591606319855,["Wahaha@DESKTOP-HTU2IVD",[[1,12218,"*   HashSet底层由HashMap实现\n\n*   HashSet的值存放于HashMap的key上\n\n*   HashMap的value统一为PRESENT"]],[12218,12218],[12300,12300]]],[1591606322065,["Wahaha@DESKTOP-HTU2IVD",[[-1,12218,"*"],[1,12219,"-"]],[12218,12218],[12219,12219]]],[1591606322682,["Wahaha@DESKTOP-HTU2IVD",[[-1,12221," "]],[12219,12219],[12219,12219]]],[1591606322879,["Wahaha@DESKTOP-HTU2IVD",[[-1,12220," "]],[12219,12219],[12219,12219]]],[1591606323998,["Wahaha@DESKTOP-HTU2IVD",[[-1,12240,"\n"]],[12240,12240],[12239,12239]]],[1591606329385,["Wahaha@DESKTOP-HTU2IVD",[[-1,12240,"*"]],[12241,12241],[12240,12240]]],[1591606330027,["Wahaha@DESKTOP-HTU2IVD",[[1,12240,"-"]],[12240,12240],[12241,12241]]],[1591606330394,["Wahaha@DESKTOP-HTU2IVD",[[1,12244," "]],[12241,12241],[12242,12242]]],[1591606331435,["Wahaha@DESKTOP-HTU2IVD",[[-1,12244," "]],[12242,12242],[12242,12242]]],[1591606331681,["Wahaha@DESKTOP-HTU2IVD",[[-1,12243," "]],[12242,12242],[12242,12242]]],[1591606332277,["Wahaha@DESKTOP-HTU2IVD",[[-1,12242," "]],[12242,12242],[12242,12242]]],[1591606334063,["Wahaha@DESKTOP-HTU2IVD",[[-1,12267,"\n"]],[12267,12267],[12266,12266]]],[1591606338419,["Wahaha@DESKTOP-HTU2IVD",[[-1,12267,"*"],[1,12268,"-"]],[12267,12267],[12268,12268]]],[1591606340240,["Wahaha@DESKTOP-HTU2IVD",[[-1,12270," "]],[12268,12268],[12268,12268]]],[1591606340633,["Wahaha@DESKTOP-HTU2IVD",[[-1,12269," "]],[12268,12268],[12268,12268]]],[1591606345193,["Wahaha@DESKTOP-HTU2IVD",[[1,12293,"- \n"]],[12292,12292],[12295,12295]]],[1591606346110,["Wahaha@DESKTOP-HTU2IVD",[[-1,12293,"- "]],[12295,12295],[12293,12293]]],[1591606346754,["Wahaha@DESKTOP-HTU2IVD",[[1,12295,"\n"]],[12293,12293],[12294,12294]]],[1591606348716,["Wahaha@DESKTOP-HTU2IVD",[[1,12294,"25 "]],[12294,12294],[12297,12297]]],[1591606349446,["Wahaha@DESKTOP-HTU2IVD",[[-1,12296," "]],[12297,12297],[12296,12296]]],[1591606350173,["Wahaha@DESKTOP-HTU2IVD",[[1,12296,"。"]],[12296,12296],[12297,12297]]],[1591606351013,["Wahaha@DESKTOP-HTU2IVD",[[-1,12296,"。"]],[12297,12297],[12296,12296]]],[1591606358774,["Wahaha@DESKTOP-HTU2IVD",[[1,12296,". **ArrayList 和 LinkedList 的区别是什么？**"]],[12296,12296],[12332,12332]]],[1591606361115,["Wahaha@DESKTOP-HTU2IVD",[[-1,12330,"**"]],[12330,12332],[12330,12330]]],[1591606365039,["Wahaha@DESKTOP-HTU2IVD",[[-1,12298,"**"]],[12298,12300],[12298,12298]]],[1591606374136,["Wahaha@DESKTOP-HTU2IVD",[[1,12329,"最明显的区别是 ArrrayList底层的数据结构是数组，支持随机访问，而 LinkedList 的底层数据结构是双向循环链表，不支持随机访问。使用下标访问一个元素，ArrayList 的时间复杂度是 O(1)，而 LinkedList 是 O(n)。"]],[12329,12329],[12455,12455]]],[1591606377307,["Wahaha@DESKTOP-HTU2IVD",[[1,12456,"\n"]],[12455,12455],[12456,12456]]],[1591606378665,["Wahaha@DESKTOP-HTU2IVD",[[1,12457,"\n"]],[12456,12456],[12457,12457]]],[1591606379426,["Wahaha@DESKTOP-HTU2IVD",[[-1,12457,"\n"],[1,12458,"2"]],[12457,12457],[12458,12458]]],[1591606389084,["Wahaha@DESKTOP-HTU2IVD",[[1,12458,"6. **如何实现数组和 List 之间的转换**"]],[12458,12458],[12483,12483]]],[1591606390144,["Wahaha@DESKTOP-HTU2IVD",[[-1,12482,"*"]],[12483,12483],[12482,12482]]],[1591606396021,["Wahaha@DESKTOP-HTU2IVD",[[-1,12461,"**"]],[12463,12463],[12461,12461]]],[1591606398997,["Wahaha@DESKTOP-HTU2IVD",[[1,12479,"\n27. "]],[12479,12479],[12484,12484]]],[1591606400618,["Wahaha@DESKTOP-HTU2IVD",[[-1,12480,"27. "],[1,12484,"\n\n"]],[12484,12484],[12481,12481]]],[1591606418510,["Wahaha@DESKTOP-HTU2IVD",[[1,12480,"- List转化为数组：diao"]],[12480,12480],[12496,12496]]],[1591606419625,["Wahaha@DESKTOP-HTU2IVD",[[-1,12492,"diao"]],[12496,12496],[12492,12492]]],[1591606422807,["Wahaha@DESKTOP-HTU2IVD",[[1,12492,"调用L"]],[12492,12492],[12495,12495]]],[1591606423850,["Wahaha@DESKTOP-HTU2IVD",[[-1,12494,"L"]],[12495,12495],[12494,12494]]],[1591606434277,["Wahaha@DESKTOP-HTU2IVD",[[1,12494,"ArrayLisr"]],[12494,12494],[12503,12503]]],[1591606435165,["Wahaha@DESKTOP-HTU2IVD",[[-1,12502,"r"]],[12503,12503],[12502,12502]]],[1591606448218,["Wahaha@DESKTOP-HTU2IVD",[[1,12502,"t的toArray方法"]],[12502,12502],[12513,12513]]],[1591606449225,["Wahaha@DESKTOP-HTU2IVD",[[1,12514,"- \n"]],[12513,12513],[12516,12516]]],[1591606510438,[null,[[-1,12518,"*"]],[12518,12518],[12518,12518]]],[1591606510438,[null,[[1,12518,"*"]],[12518,12518],[12518,12518]]],[1591606460567,["Wahaha@DESKTOP-HTU2IVD",[[1,12516,"数组转化为List: "]],[12516,12516],[12527,12527]]],[1591606570392,[null,[[-1,12529,"*"]],[12529,12529],[12529,12529]]],[1591606570392,[null,[[1,12529,"*"]],[12529,12529],[12529,12529]]],[1591606510615,["Wahaha@DESKTOP-HTU2IVD",[[1,12527,"电泳"]],[12527,12527],[12529,12529]]],[1591606511256,["Wahaha@DESKTOP-HTU2IVD",[[-1,12526," 电泳"]],[12529,12529],[12526,12526]]],[1591606521790,["Wahaha@DESKTOP-HTU2IVD",[[1,12526," 调用ArraysD "]],[12526,12526],[12537,12537]]],[1591606522510,["Wahaha@DESKTOP-HTU2IVD",[[-1,12535,"D "]],[12537,12537],[12535,12535]]],[1591606526433,["Wahaha@DESKTOP-HTU2IVD",[[1,12535,"的asLsit"]],[12535,12535],[12542,12542]]],[1591606526942,["Wahaha@DESKTOP-HTU2IVD",[[-1,12540,"it"]],[12542,12542],[12540,12540]]],[1591606527416,["Wahaha@DESKTOP-HTU2IVD",[[1,12540,"i"]],[12540,12540],[12541,12541]]],[1591606528105,["Wahaha@DESKTOP-HTU2IVD",[[-1,12539,"si"]],[12541,12541],[12539,12539]]],[1591606528824,["Wahaha@DESKTOP-HTU2IVD",[[1,12539,"si"]],[12539,12539],[12541,12541]]],[1591606529580,["Wahaha@DESKTOP-HTU2IVD",[[-1,12539,"si"]],[12541,12541],[12539,12539]]],[1591606530972,["Wahaha@DESKTOP-HTU2IVD",[[1,12539,"istD"]],[12539,12539],[12543,12543]]],[1591606531562,["Wahaha@DESKTOP-HTU2IVD",[[-1,12542,"D"]],[12543,12543],[12542,12542]]],[1591606532049,["Wahaha@DESKTOP-HTU2IVD",[[1,12542,"FAN"]],[12542,12542],[12545,12545]]],[1591606532819,["Wahaha@DESKTOP-HTU2IVD",[[-1,12542,"FAN"]],[12545,12545],[12542,12542]]],[1591606534684,["Wahaha@DESKTOP-HTU2IVD",[[1,12542,"方法"]],[12542,12542],[12544,12544]]],[1591606535072,["Wahaha@DESKTOP-HTU2IVD",[[1,12545,"- \n"]],[12544,12544],[12547,12547]]],[1591606535965,["Wahaha@DESKTOP-HTU2IVD",[[-1,12545,"- "]],[12547,12547],[12545,12545]]],[1591606536810,["Wahaha@DESKTOP-HTU2IVD",[[1,12547,"\n"]],[12545,12545],[12546,12546]]],[1591606543324,["Wahaha@DESKTOP-HTU2IVD",[[1,12546,"**ArrayList 和 Vector 的区别是什么**"]],[12546,12546],[12575,12575]]],[1591606547829,["Wahaha@DESKTOP-HTU2IVD",[[1,12546,"27. "]],[12546,12546],[12550,12550]]],[1591606548615,["Wahaha@DESKTOP-HTU2IVD",[[-1,12551,"*"]],[12550,12550],[12550,12550]]],[1591606548812,["Wahaha@DESKTOP-HTU2IVD",[[-1,12550,"*"]],[12550,12550],[12550,12550]]],[1591606551189,["Wahaha@DESKTOP-HTU2IVD",[[-1,12575,"**"]],[12577,12577],[12575,12575]]],[1591606552803,["Wahaha@DESKTOP-HTU2IVD",[[1,12576,"28. \n"]],[12575,12575],[12580,12580]]],[1591606554089,["Wahaha@DESKTOP-HTU2IVD",[[-1,12576,"28. "]],[12580,12580],[12576,12576]]],[1591606554560,["Wahaha@DESKTOP-HTU2IVD",[[1,12578,"\n"]],[12576,12576],[12577,12577]]],[1591606562703,["Wahaha@DESKTOP-HTU2IVD",[[1,12576,"*   Vector是同步的，而ArrayList不是。然而，如果你寻求在迭代的时候对列表进行改变，你应该使用CopyOnWriteArrayList。 \n\n*   ArrayList比Vector快，它因为有同步，不会过载。 \n\n*   ArrayList更加通用，因为我们可以使用Collections工具类轻易地获取同步列表和只读列表。"]],[12576,12576],[12747,12747]]],[1591606565067,["Wahaha@DESKTOP-HTU2IVD",[[-1,12576,"*"],[1,12577,"-"],[-1,12652," "],[1,12653," "],[-1,12689," "],[1,12690," "]],[12576,12576],[12577,12577]]],[1591606565601,["Wahaha@DESKTOP-HTU2IVD",[[-1,12579," "]],[12577,12577],[12577,12577]]],[1591606565828,["Wahaha@DESKTOP-HTU2IVD",[[-1,12578," "]],[12577,12577],[12577,12577]]],[1591606569604,["Wahaha@DESKTOP-HTU2IVD",[[-1,12653,"*"]],[12653,12654],[12653,12653]]],[1591606569983,["Wahaha@DESKTOP-HTU2IVD",[[-1,12655," "]],[12653,12653],[12653,12653]]],[1591606630391,[null,[[-1,12746,"*"]],[12746,12746],[12746,12746]]],[1591606630391,[null,[[1,12746,"*"]],[12746,12746],[12746,12746]]],[1591606571927,["Wahaha@DESKTOP-HTU2IVD",[[1,12653,"-"]],[12653,12653],[12654,12654]]],[1591606573367,["Wahaha@DESKTOP-HTU2IVD",[[-1,12655," "]],[12654,12654],[12654,12654]]],[1591606577074,["Wahaha@DESKTOP-HTU2IVD",[[-1,12688,"*   "],[1,12692,"-"]],[12688,12688],[12689,12689]]],[1591606577305,["Wahaha@DESKTOP-HTU2IVD",[[1,12689," "]],[12689,12689],[12690,12690]]],[1591606579838,["Wahaha@DESKTOP-HTU2IVD",[[-1,12687,"\n"]],[12687,12687],[12686,12686]]],[1591606581788,["Wahaha@DESKTOP-HTU2IVD",[[-1,12652,"\n"]],[12652,12652],[12651,12651]]],[1591606585869,["Wahaha@DESKTOP-HTU2IVD",[[1,12742,"\n"]],[12740,12740],[12741,12741]]],[1591606586264,["Wahaha@DESKTOP-HTU2IVD",[[1,12743,"\n"]],[12741,12741],[12742,12742]]],[1591606589131,["Wahaha@DESKTOP-HTU2IVD",[[1,12741,"28 "]],[12741,12741],[12744,12744]]],[1591606589913,["Wahaha@DESKTOP-HTU2IVD",[[-1,12743," "]],[12744,12744],[12743,12743]]],[1591606590474,["Wahaha@DESKTOP-HTU2IVD",[[1,12743,"。 "]],[12743,12743],[12745,12745]]],[1591606591212,["Wahaha@DESKTOP-HTU2IVD",[[-1,12743,"。 "]],[12745,12745],[12743,12743]]],[1591606599688,["Wahaha@DESKTOP-HTU2IVD",[[1,12743,". **Array 和 ArrayList 有何区别**"]],[12743,12743],[12771,12771]]],[1591606600993,["Wahaha@DESKTOP-HTU2IVD",[[-1,12769,"**"]],[12771,12771],[12769,12769]]],[1591606606679,["Wahaha@DESKTOP-HTU2IVD",[[-1,12745,"**"]],[12747,12747],[12745,12745]]],[1591606609010,["Wahaha@DESKTOP-HTU2IVD",[[1,12768,"29. \n"]],[12767,12767],[12772,12772]]],[1591606609344,["Wahaha@DESKTOP-HTU2IVD",[[-1,12768,"29. "]],[12772,12772],[12769,12769]]],[1591606620451,["Wahaha@DESKTOP-HTU2IVD",[[1,12769,"- ARR"]],[12769,12769],[12774,12774]]],[1591606621059,["Wahaha@DESKTOP-HTU2IVD",[[-1,12772,"RR"]],[12774,12774],[12772,12772]]],[1591606626959,["Wahaha@DESKTOP-HTU2IVD",[[1,12772,"rray可以融那"]],[12772,12772],[12780,12780]]],[1591606627513,["Wahaha@DESKTOP-HTU2IVD",[[-1,12778,"融那"]],[12780,12780],[12778,12778]]],[1591606629621,["Wahaha@DESKTOP-HTU2IVD",[[1,12778,"容纳"]],[12778,12778],[12780,12780]]],[1591606690398,[null,[[-1,12782,"*"]],[12782,12782],[12782,12782]]],[1591606690398,[null,[[1,12782,"*"]],[12782,12782],[12782,12782]]],[1591606641677,["Wahaha@DESKTOP-HTU2IVD",[[1,12780,"基本类型和对象，二"]],[12780,12780],[12789,12789]]],[1591606642119,["Wahaha@DESKTOP-HTU2IVD",[[-1,12788,"二"]],[12789,12789],[12788,12788]]],[1591606655141,["Wahaha@DESKTOP-HTU2IVD",[[1,12788,"而ArrayList只能容纳对象"]],[12788,12788],[12804,12804]]],[1591606655541,["Wahaha@DESKTOP-HTU2IVD",[[1,12805,"- \n"]],[12804,12804],[12807,12807]]],[1591606680621,["Wahaha@DESKTOP-HTU2IVD",[[1,12807,"Array是指定大小的，而Arrayl"]],[12807,12807],[12826,12826]]],[1591606681237,["Wahaha@DESKTOP-HTU2IVD",[[-1,12825,"l"]],[12826,12826],[12825,12825]]],[1591606687808,["Wahaha@DESKTOP-HTU2IVD",[[1,12825,"List是固定大小"]],[12825,12825],[12834,12834]]],[1591606688131,["Wahaha@DESKTOP-HTU2IVD",[[1,12835,"- \n"]],[12834,12834],[12837,12837]]],[1591606750503,[null,[[-1,12839,"*"]],[12839,12839],[12839,12839]]],[1591606750503,[null,[[1,12839,"*"]],[12839,12839],[12839,12839]]],[1591606698900,["Wahaha@DESKTOP-HTU2IVD",[[1,12837,"Array没有想A"]],[12837,12837],[12846,12846]]],[1591606701848,["Wahaha@DESKTOP-HTU2IVD",[[-1,12842,"没有想A"]],[12846,12846],[12842,12842]]],[1591606713515,["Wahaha@DESKTOP-HTU2IVD",[[1,12837,"*   "],[1,12842,"没有提供ArrayList那么多功能，比如addAll、removeAll和iterator等。"]],[12837,12842],[12894,12894]]],[1591606718410,["Wahaha@DESKTOP-HTU2IVD",[[-1,12837,"*   "]],[12841,12841],[12837,12837]]],[1591606737320,["Wahaha@DESKTOP-HTU2IVD",[[1,12892,"\n"]],[12891,12891],[12892,12892]]],[1591606738288,["Wahaha@DESKTOP-HTU2IVD",[[-1,12892,"\n"],[1,12893,"2"]],[12892,12892],[12893,12893]]],[1591606745835,["Wahaha@DESKTOP-HTU2IVD",[[1,12893,"9. **在 Queue 中 poll()和 remove()有什么区别**"]],[12893,12893],[12931,12931]]],[1591606747658,["Wahaha@DESKTOP-HTU2IVD",[[-1,12896,"**"]],[12898,12898],[12896,12896]]],[1591606750323,["Wahaha@DESKTOP-HTU2IVD",[[-1,12928,"*"]],[12929,12929],[12928,12928]]],[1591606810502,[null,[[-1,12928,"*"]],[12928,12928],[12928,12928]]],[1591606810502,[null,[[1,12928,"*"]],[12928,12928],[12928,12928]]],[1591606751861,["Wahaha@DESKTOP-HTU2IVD",[[1,12927,"\n30. "]],[12927,12927],[12932,12932]]],[1591606753075,["Wahaha@DESKTOP-HTU2IVD",[[-1,12929,"0. "]],[12932,12932],[12929,12929]]],[1591606753280,["Wahaha@DESKTOP-HTU2IVD",[[-1,12928,"3"],[1,12929,"\n"]],[12929,12929],[12928,12928]]],[1591606759208,["Wahaha@DESKTOP-HTU2IVD",[[1,12928,"poll() 和 remove() 都是从队列中取出一个元素，但是 poll() 在获取元素失败的时候会返回空，但是 remove() 失败的时候会抛出异常。"]],[12928,12928],[13007,13007]]],[1591606762949,["Wahaha@DESKTOP-HTU2IVD",[[1,13008,"\n"]],[13007,13007],[13008,13008]]],[1591606764327,["Wahaha@DESKTOP-HTU2IVD",[[1,13009,"\n"]],[13008,13008],[13009,13009]]],[1591606765696,["Wahaha@DESKTOP-HTU2IVD",[[-1,13009,"\n"]],[13009,13009],[13008,13008]]],[1591606766624,["Wahaha@DESKTOP-HTU2IVD",[[1,13009,"\n"]],[13008,13008],[13009,13009]]],[1591606767152,["Wahaha@DESKTOP-HTU2IVD",[[-1,13009,"\n"],[1,13010,"3"]],[13009,13009],[13010,13010]]],[1591606776294,["Wahaha@DESKTOP-HTU2IVD",[[1,13010,"0. **哪些集合类是线程安全的**"]],[13010,13010],[13028,13028]]],[1591606777300,["Wahaha@DESKTOP-HTU2IVD",[[-1,13026,"**"]],[13028,13028],[13026,13026]]],[1591606781455,["Wahaha@DESKTOP-HTU2IVD",[[-1,13013,"**"]],[13015,13015],[13013,13013]]],[1591606790075,["Wahaha@DESKTOP-HTU2IVD",[[1,13024,"\n31. "]],[13024,13024],[13029,13029]]],[1591606791408,["Wahaha@DESKTOP-HTU2IVD",[[-1,13026,"1. "]],[13029,13029],[13026,13026]]],[1591606791655,["Wahaha@DESKTOP-HTU2IVD",[[-1,13025,"3"],[1,13026,"\n"]],[13026,13026],[13025,13025]]],[1591606792399,["Wahaha@DESKTOP-HTU2IVD",[[1,13025,"*   vector：就比arraylist多了个同步化机制（线程安全），因为效率较低，现在已经不太建议使用。在web应用中，特别是前台页面，往往效率（页面响应速度）是优先考虑的。\n\n*   statck：堆栈类，先进后出。\n\n*   hashtable：就比hashmap多了个线程安全。\n\n*   enumeration：枚举，相当于迭代器。"]],[13025,13025],[13198,13198]]],[1591606797951,["Wahaha@DESKTOP-HTU2IVD",[[-1,13025,"*"]],[13025,13025],[13025,13025]]],[1591606798166,["Wahaha@DESKTOP-HTU2IVD",[[-1,13027," "]],[13025,13025],[13025,13025]]],[1591606799467,["Wahaha@DESKTOP-HTU2IVD",[[1,13025,"-"]],[13025,13025],[13026,13026]]],[1591606800165,["Wahaha@DESKTOP-HTU2IVD",[[-1,13027," "]],[13026,13026],[13026,13026]]],[1591606800991,["Wahaha@DESKTOP-HTU2IVD",[[-1,13026," "]],[13026,13026],[13026,13026]]],[1591606801589,["Wahaha@DESKTOP-HTU2IVD",[[1,13026," "]],[13026,13026],[13027,13027]]],[1591606803857,["Wahaha@DESKTOP-HTU2IVD",[[-1,13114,"\n"]],[13114,13114],[13113,13113]]],[1591606808997,["Wahaha@DESKTOP-HTU2IVD",[[-1,13114,"*"],[1,13115,"-"]],[13114,13114],[13115,13115]]],[1591606870508,[null,[[-1,13196,"**"]],[13196,13196],[13196,13196]]],[1591606870508,[null,[[1,13196,"**"]],[13196,13196],[13196,13196]]],[1591606810665,["Wahaha@DESKTOP-HTU2IVD",[[-1,13116," "]],[13115,13115],[13115,13115]]],[1591606813174,["Wahaha@DESKTOP-HTU2IVD",[[-1,13133,"\n"]],[13133,13133],[13132,13132]]],[1591606816595,["Wahaha@DESKTOP-HTU2IVD",[[-1,13133,"*"],[1,13134,"-"]],[13133,13133],[13134,13134]]],[1591606817665,["Wahaha@DESKTOP-HTU2IVD",[[-1,13136," "]],[13134,13134],[13134,13134]]],[1591606818259,["Wahaha@DESKTOP-HTU2IVD",[[-1,13135," "]],[13134,13134],[13134,13134]]],[1591606820411,["Wahaha@DESKTOP-HTU2IVD",[[-1,13163,"\n"]],[13163,13163],[13162,13162]]],[1591606822720,["Wahaha@DESKTOP-HTU2IVD",[[-1,13163,"*"],[1,13164,"="]],[13163,13163],[13164,13164]]],[1591606823376,["Wahaha@DESKTOP-HTU2IVD",[[-1,13163,"="]],[13164,13164],[13163,13163]]],[1591606824091,["Wahaha@DESKTOP-HTU2IVD",[[1,13163,"-"]],[13163,13163],[13164,13164]]],[1591606825172,["Wahaha@DESKTOP-HTU2IVD",[[-1,13166," "]],[13164,13164],[13164,13164]]],[1591606825377,["Wahaha@DESKTOP-HTU2IVD",[[-1,13165," "]],[13164,13164],[13164,13164]]],[1591606829540,["Wahaha@DESKTOP-HTU2IVD",[[1,13188,"- \n"]],[13187,13187],[13190,13190]]],[1591606830292,["Wahaha@DESKTOP-HTU2IVD",[[-1,13188,"- "]],[13190,13190],[13188,13188]]],[1591606831339,["Wahaha@DESKTOP-HTU2IVD",[[-1,13188,"\n"]],[13188,13188],[13187,13187]]],[1591606832169,["Wahaha@DESKTOP-HTU2IVD",[[1,13188,"- \n"]],[13187,13187],[13190,13190]]],[1591606833021,["Wahaha@DESKTOP-HTU2IVD",[[-1,13188,"- "]],[13190,13190],[13188,13188]]],[1591606833466,["Wahaha@DESKTOP-HTU2IVD",[[-1,13188,"\n"],[1,13189,"3"]],[13188,13188],[13189,13189]]],[1591606841137,["Wahaha@DESKTOP-HTU2IVD",[[1,13189,"1. **迭代器 Iterator 是什么**"]],[13189,13189],[13212,13212]]],[1591606842554,["Wahaha@DESKTOP-HTU2IVD",[[-1,13210,"**"]],[13212,13212],[13210,13210]]],[1591606848114,["Wahaha@DESKTOP-HTU2IVD",[[-1,13192,"**"]],[13194,13194],[13192,13192]]],[1591606850443,["Wahaha@DESKTOP-HTU2IVD",[[1,13208,"\n32. "]],[13208,13208],[13213,13213]]],[1591606850665,["Wahaha@DESKTOP-HTU2IVD",[[-1,13209,"32. "],[1,13213,"\n\n"]],[13213,13213],[13210,13210]]],[1591606857548,["Wahaha@DESKTOP-HTU2IVD",[[1,13210,"迭代器是一种设计模式，它是一个对象，它可以遍历并选择序列中的对象，而开发人员不需要了解该序列的底层结构。迭代器通常被称为“轻量级”对象，因为创建它的代价小。"]],[13210,13210],[13288,13288]]],[1591606862261,["Wahaha@DESKTOP-HTU2IVD",[[-1,13209,"\n"]],[13210,13210],[13209,13209]]],[1591606864862,["Wahaha@DESKTOP-HTU2IVD",[[1,13288,"\n"]],[13287,13287],[13288,13288]]],[1591606865185,["Wahaha@DESKTOP-HTU2IVD",[[1,13289,"\n"]],[13288,13288],[13289,13289]]],[1591606866644,["Wahaha@DESKTOP-HTU2IVD",[[-1,13289,"\n"],[1,13290,"3"]],[13289,13289],[13290,13290]]],[1591606867666,["Wahaha@DESKTOP-HTU2IVD",[[1,13290,"2. "]],[13290,13290],[13293,13293]]],[1591606930504,[null,[[-1,13116," "],[1,13133,"\n"],[-1,13134,"*"],[1,13163,"\n"],[-1,13164,"*"],[1,13188,"\n"],[-1,13293,"\n**"]],[13116,13116],[13293,13293]]],[1591606930504,[null,[[1,13116," "],[-1,13132,"\n"],[1,13134,"*"],[-1,13162,"\n"],[1,13164,"*"],[-1,13187,"\n"],[1,13293,"\n**"]],[13293,13293],[13116,13116]]],[1591606876609,["Wahaha@DESKTOP-HTU2IVD",[[1,13293,"**Iterator 怎么使用？有什么特点**"]],[13293,13293],[13316,13316]]],[1591606878280,["Wahaha@DESKTOP-HTU2IVD",[[-1,13314,"**"]],[13316,13316],[13314,13314]]],[1591606883568,["Wahaha@DESKTOP-HTU2IVD",[[-1,13293,"**"]],[13295,13295],[13293,13293]]],[1591606887715,["Wahaha@DESKTOP-HTU2IVD",[[1,13312,"\n33. "]],[13312,13312],[13317,13317]]],[1591606888005,["Wahaha@DESKTOP-HTU2IVD",[[-1,13313,"33. "],[1,13317,"\n\n"]],[13317,13317],[13314,13314]]],[1591606888696,["Wahaha@DESKTOP-HTU2IVD",[[-1,13314,"\n"]],[13314,13314],[13313,13313]]],[1591606895189,["Wahaha@DESKTOP-HTU2IVD",[[1,13313,"Java中的Iterator功能比较简单，并且只能单向移动：\n\n(1) 使用方法iterator()要求容器返回一个Iterator。第一次调用Iterator的next()方法时，它返回序列的第一个元素。注意：iterator()方法是java.lang.Iterable接口,被Collection继承。\n\n(2) 使用next()获得序列中的下一个元素。\n\n(3) 使用hasNext()检查序列中是否还有元素。\n\n(4) 使用remove()将迭代器新返回的元素删除。\n\nIterator是Java迭代器最简单的实现，为List设计的ListIterator具有更多的功能，它可以从两个方向遍历List，也可以从List中插入和删除元素。"]],[13313,13313],[13636,13636]]],[1591606906756,["Wahaha@DESKTOP-HTU2IVD",[[1,13313,"\n"]],[13313,13313],[13314,13314]]],[1591606909180,["Wahaha@DESKTOP-HTU2IVD",[[-1,13313,"\n"]],[13314,13314],[13313,13313]]],[1591606917406,["Wahaha@DESKTOP-HTU2IVD",[[1,13313,"-"]],[13313,13313],[13314,13314]]],[1591606919052,["Wahaha@DESKTOP-HTU2IVD",[[-1,13313,"-"]],[13314,13314],[13313,13313]]],[1591606921137,["Wahaha@DESKTOP-HTU2IVD",[[-1,13344,"\n"]],[13344,13344],[13343,13343]]],[1591606923773,["Wahaha@DESKTOP-HTU2IVD",[[-1,13467,"\n"]],[13467,13467],[13466,13466]]],[1591606925532,["Wahaha@DESKTOP-HTU2IVD",[[-1,13492,"\n"]],[13492,13492],[13491,13491]]],[1591606927349,["Wahaha@DESKTOP-HTU2IVD",[[-1,13520,"\n"]],[13520,13520],[13519,13519]]],[1591606930239,["Wahaha@DESKTOP-HTU2IVD",[[-1,13344,"("],[-1,13346,")"]],[13344,13347],[13345,13345]]],[1591606990506,[null,[[-1,13116," "],[1,13133,"\n"],[-1,13134,"*"],[1,13163,"\n"],[-1,13164,"*"],[1,13188,"\n"],[-1,13631,"\n**"]],[13116,13116],[13631,13631]]],[1591606990506,[null,[[1,13116," "],[-1,13132,"\n"],[1,13134,"*"],[-1,13162,"\n"],[1,13164,"*"],[-1,13187,"\n"],[1,13631,"\n**"]],[13631,13631],[13116,13116]]],[1591606930582,["Wahaha@DESKTOP-HTU2IVD",[[1,13345,"."]],[13345,13345],[13346,13346]]],[1591606931451,["Wahaha@DESKTOP-HTU2IVD",[[1,13347," "]],[13346,13346],[13347,13347]]],[1591606932556,["Wahaha@DESKTOP-HTU2IVD",[[-1,13347," "]],[13347,13347],[13347,13347]]],[1591606935885,["Wahaha@DESKTOP-HTU2IVD",[[-1,13466,"("],[-1,13468,")"]],[13466,13469],[13467,13467]]],[1591606936255,["Wahaha@DESKTOP-HTU2IVD",[[1,13467,"."]],[13467,13467],[13468,13468]]],[1591606944436,["Wahaha@DESKTOP-HTU2IVD",[[1,13289,"  "]],[13289,13289],[13291,13291]]],[1591606950314,["Wahaha@DESKTOP-HTU2IVD",[[-1,13290," "]],[13291,13291],[13290,13290]]],[1591606955424,["Wahaha@DESKTOP-HTU2IVD",[[-1,13491,"("],[-1,13493,")"]],[13491,13494],[13492,13492]]],[1591606955941,["Wahaha@DESKTOP-HTU2IVD",[[1,13492,"."]],[13492,13492],[13493,13493]]],[1591606960156,["Wahaha@DESKTOP-HTU2IVD",[[-1,13518,"("],[-1,13520,")"]],[13518,13521],[13519,13519]]],[1591606960524,["Wahaha@DESKTOP-HTU2IVD",[[1,13519,"."]],[13519,13519],[13520,13520]]],[1591606968739,["Wahaha@DESKTOP-HTU2IVD",[[1,13314,"  "],[1,13345,"  "],[1,13467,"  "],[1,13491,"  "],[1,13518,"  "],[1,13545,"  "],[1,13546,"  "]],[13314,13629],[13314,13643]]],[1591606973380,["Wahaha@DESKTOP-HTU2IVD",[[1,13316,"  "],[1,13347,"  "],[1,13473,"  "],[1,13497," "],[1,13499," "],[1,13526," "],[1,13528," "],[1,13555," "],[1,13557," "],[1,13558,"  "]],[13314,13643],[13314,13657]]],[1591606980332,["Wahaha@DESKTOP-HTU2IVD",[[-1,13316,"  "],[-1,13349,"  "],[-1,13477,"  "],[-1,13503," "],[-1,13506," "],[-1,13534," "],[-1,13537," "],[-1,13565," "],[-1,13568," "],[-1,13570,"  "]],[13314,13657],[13314,13643]]],[1591606980573,["Wahaha@DESKTOP-HTU2IVD",[[-1,13314,"  "],[-1,13347,"  "],[-1,13471,"  "],[-1,13497,"  "],[-1,13526,"  "],[-1,13555,"  "],[-1,13558,"  "]],[13314,13643],[13314,13629]]],[1591606980841,["Wahaha@DESKTOP-HTU2IVD",[[-1,13519,"."]],[13520,13520],[13519,13519]]],[1591606981509,["Wahaha@DESKTOP-HTU2IVD",[[1,13518,"("],[1,13519,")"]],[13519,13519],[13518,13521]]],[1591606981903,["Wahaha@DESKTOP-HTU2IVD",[[-1,13492,"."]],[13493,13493],[13492,13492]]],[1591606982410,["Wahaha@DESKTOP-HTU2IVD",[[1,13491,"("],[1,13492,")"]],[13492,13492],[13491,13494]]],[1591606982693,["Wahaha@DESKTOP-HTU2IVD",[[1,13290," "]],[13290,13290],[13291,13291]]],[1591606982991,["Wahaha@DESKTOP-HTU2IVD",[[-1,13289,"  "]],[13291,13291],[13289,13289]]],[1591606983255,["Wahaha@DESKTOP-HTU2IVD",[[-1,13467,"."]],[13468,13468],[13467,13467]]],[1591606983513,["Wahaha@DESKTOP-HTU2IVD",[[1,13466,"("],[1,13467,")"]],[13467,13467],[13466,13469]]],[1591606983790,["Wahaha@DESKTOP-HTU2IVD",[[1,13347," "]],[13347,13347],[13347,13347]]],[1591606984601,["Wahaha@DESKTOP-HTU2IVD",[[-1,13345,". "]],[13347,13347],[13345,13345]]],[1591606984868,["Wahaha@DESKTOP-HTU2IVD",[[1,13344,"("],[1,13345,")"]],[13345,13345],[13344,13347]]],[1591606990088,["Wahaha@DESKTOP-HTU2IVD",[[-1,13548,"\n"]],[13548,13548],[13547,13547]]],[1591607050510,[null,[[-1,13116," "],[1,13133,"\n"],[-1,13134,"*"],[1,13163,"\n"],[-1,13164,"*"],[1,13188,"\n"],[-1,13632,"\n**"]],[13116,13116],[13632,13632]]],[1591607050510,[null,[[1,13116," "],[-1,13132,"\n"],[1,13134,"*"],[-1,13162,"\n"],[1,13164,"*"],[-1,13187,"\n"],[1,13632,"\n**"]],[13632,13632],[13116,13116]]],[1591606993272,["Wahaha@DESKTOP-HTU2IVD",[[1,13313,"- "]],[13313,13313],[13315,13315]]],[1591606998924,["Wahaha@DESKTOP-HTU2IVD",[[1,13550,"- "]],[13550,13550],[13552,13552]]],[1591607001851,["Wahaha@DESKTOP-HTU2IVD",[[-1,13549,"\n"]],[13550,13550],[13549,13549]]],[1591607003013,["Wahaha@DESKTOP-HTU2IVD",[[1,13549,"\n"]],[13549,13549],[13550,13550]]],[1591607013146,["Wahaha@DESKTOP-HTU2IVD",[[1,13636,"- \n"]],[13635,13635],[13638,13638]]],[1591607014405,["Wahaha@DESKTOP-HTU2IVD",[[-1,13636,"- "]],[13638,13638],[13636,13636]]],[1591607015629,["Wahaha@DESKTOP-HTU2IVD",[[-1,13636,"\n"],[1,13637,"3"]],[13636,13636],[13637,13637]]],[1591607017046,["Wahaha@DESKTOP-HTU2IVD",[[1,13637,"3. **Iterator 和 ListIterator 有什么区别**"]],[13637,13637],[13673,13673]]],[1591607017883,["Wahaha@DESKTOP-HTU2IVD",[[-1,13671,"**"]],[13673,13673],[13671,13671]]],[1591607021119,["Wahaha@DESKTOP-HTU2IVD",[[-1,13641,"*"]],[13640,13641],[13640,13640]]],[1591607021350,["Wahaha@DESKTOP-HTU2IVD",[[-1,13640,"*"]],[13640,13640],[13640,13640]]],[1591607024056,["Wahaha@DESKTOP-HTU2IVD",[[1,13669,"\n34. "]],[13669,13669],[13674,13674]]],[1591607025182,["Wahaha@DESKTOP-HTU2IVD",[[-1,13671,"4. "]],[13674,13674],[13671,13671]]],[1591607025422,["Wahaha@DESKTOP-HTU2IVD",[[-1,13670,"3"],[1,13671,"\n"]],[13671,13671],[13670,13670]]],[1591607031540,["Wahaha@DESKTOP-HTU2IVD",[[1,13670,"*   Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。 \n\n*   Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。 \n\n*   ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。"]],[13670,13670],[13845,13845]]],[1591607034139,["Wahaha@DESKTOP-HTU2IVD",[[-1,13670,"*"],[1,13671,"-"],[-1,13723," "],[1,13724," "],[-1,13772," "],[1,13773," "]],[13670,13670],[13671,13671]]],[1591607034681,["Wahaha@DESKTOP-HTU2IVD",[[-1,13673," "]],[13671,13671],[13671,13671]]],[1591607034887,["Wahaha@DESKTOP-HTU2IVD",[[-1,13672," "]],[13671,13671],[13671,13671]]],[1591607039069,["Wahaha@DESKTOP-HTU2IVD",[[-1,13723,"\n*"]],[13723,13725],[13723,13723]]],[1591607042180,["Wahaha@DESKTOP-HTU2IVD",[[1,13723,"-"]],[13723,13723],[13724,13724]]],[1591607043042,["Wahaha@DESKTOP-HTU2IVD",[[-1,13726," "]],[13724,13724],[13724,13724]]],[1591607043257,["Wahaha@DESKTOP-HTU2IVD",[[-1,13725," "]],[13724,13724],[13724,13724]]],[1591607047052,["Wahaha@DESKTOP-HTU2IVD",[[-1,13769,"\n*"]],[13769,13771],[13769,13769]]],[1591607048608,["Wahaha@DESKTOP-HTU2IVD",[[1,13769,"-"]],[13769,13769],[13770,13770]]],[1591607049177,["Wahaha@DESKTOP-HTU2IVD",[[-1,13772," "]],[13770,13770],[13770,13770]]],[1591607049401,["Wahaha@DESKTOP-HTU2IVD",[[-1,13771," "]],[13770,13770],[13770,13770]]],[1591607102004,[null,[[-1,13116," "],[1,13133,"\n"],[-1,13134,"*"],[1,13163,"\n"],[-1,13164,"*"],[1,13188,"\n"],[-1,13838,"\n**"]],[13116,13116],[13838,13838]]],[1591607102004,[null,[[1,13116," "],[-1,13132,"\n"],[1,13134,"*"],[-1,13162,"\n"],[1,13164,"*"],[-1,13187,"\n"],[1,13838,"\n**"]],[13838,13838],[13116,13116]]],[1591607061807,["Wahaha@DESKTOP-HTU2IVD",[[1,13636,"- \n"]],[13635,13635],[13638,13638]]],[1591607062620,["Wahaha@DESKTOP-HTU2IVD",[[-1,13636,"- "]],[13638,13638],[13636,13636]]],[1591607066745,["Wahaha@DESKTOP-HTU2IVD",[[1,13188,"- \n"]],[13187,13187],[13190,13190]]],[1591607067843,["Wahaha@DESKTOP-HTU2IVD",[[-1,13188,"- "]],[13190,13190],[13188,13188]]],[1591608441036,[null,[[-1,13116," "],[1,13133,"\n"],[-1,13134,"*"],[1,13163,"\n"],[-1,13164,"*"],[1,13188,"\n"],[-1,13840,"\n**"]],[13116,13116],[13840,13840]]],[1591608441036,[null,[[1,13116," "],[-1,13132,"\n"],[1,13134,"*"],[-1,13162,"\n"],[1,13164,"*"],[-1,13187,"\n"],[1,13840,"\n**"]],[13840,13840],[13116,13116]]],[1591608388401,["Wahaha@DESKTOP-HTU2IVD",[[1,10820,"\n"]],[10819,10819],[10820,10820]]],[1591608388613,["Wahaha@DESKTOP-HTU2IVD",[[1,10821,"\n"]],[10820,10820],[10821,10821]]],[1591608388894,["Wahaha@DESKTOP-HTU2IVD",[[1,10822,"\n"]],[10821,10821],[10822,10822]]],[1591608394783,["Wahaha@DESKTOP-HTU2IVD",[[1,10820,"### 集合"]],[10820,10820],[10826,10826]]],[1591608501018,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13849,"\n**"]],[13125,13125],[13849,13849]]],[1591608501018,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13849,"\n**"]],[13849,13849],[13125,13125]]],[1591608458992,["Wahaha@DESKTOP-HTU2IVD",[[1,13849,"- \n"]],[13848,13848],[13851,13851]]],[1591608459242,["Wahaha@DESKTOP-HTU2IVD",[[-1,13849,"- "]],[13851,13851],[13850,13850]]],[1591608459531,["Wahaha@DESKTOP-HTU2IVD",[[1,13850,"\n"]],[13850,13850],[13851,13851]]],[1591608460119,["Wahaha@DESKTOP-HTU2IVD",[[1,13851,"\n"]],[13851,13851],[13852,13852]]],[1591608460552,["Wahaha@DESKTOP-HTU2IVD",[[-1,13851,"\n"],[1,13852," "]],[13852,13852],[13851,13852]]],[1591608461029,["Wahaha@DESKTOP-HTU2IVD",[[-1,13851," "]],[13851,13851],[0,0]]],[1591608461744,["Wahaha@DESKTOP-HTU2IVD",[[-1,13850,"\n"],[1,13851,"#"]],[0,0],[13851,13851]]],[1591608464963,["Wahaha@DESKTOP-HTU2IVD",[[1,13851,"## 反射"]],[13851,13851],[13856,13856]]],[1591608465568,["Wahaha@DESKTOP-HTU2IVD",[[1,13856,"\n\n"]],[13856,13856],[13857,13857]]],[1591608466249,["Wahaha@DESKTOP-HTU2IVD",[[1,13858,"\n"]],[13857,13857],[13858,13858]]],[1591608471455,["Wahaha@DESKTOP-HTU2IVD",[[1,13857,"34 。"]],[13857,13857],[13861,13861]]],[1591608472249,["Wahaha@DESKTOP-HTU2IVD",[[-1,13859," 。"]],[13861,13861],[13859,13859]]],[1591608479617,["Wahaha@DESKTOP-HTU2IVD",[[1,13859,". **什么是反射**"]],[13859,13859],[13870,13870]]],[1591608481159,["Wahaha@DESKTOP-HTU2IVD",[[-1,13868,"**"]],[13870,13870],[13868,13868]]],[1591608483906,["Wahaha@DESKTOP-HTU2IVD",[[-1,13862,"*"]],[13862,13862],[13861,13861]]],[1591608484191,["Wahaha@DESKTOP-HTU2IVD",[[-1,13861,"*"]],[13861,13861],[13861,13861]]],[1591608485052,["Wahaha@DESKTOP-HTU2IVD",[[1,13857,"  "]],[13861,13861],[13863,13863]]],[1591608494918,["Wahaha@DESKTOP-HTU2IVD",[[1,13869,"  35. \n"]],[13868,13868],[13875,13875]]],[1591608496506,["Wahaha@DESKTOP-HTU2IVD",[[-1,13871,"35. "]],[13875,13875],[13871,13871]]],[1591608498310,["Wahaha@DESKTOP-HTU2IVD",[[-1,13858," "]],[13858,13858],[13858,13858]]],[1591608561019,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13872,"\n**"]],[13125,13125],[13872,13872]]],[1591608561019,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13872,"\n**"]],[13872,13872],[13125,13125]]],[1591608501538,["Wahaha@DESKTOP-HTU2IVD",[[-1,13857," "]],[13858,13858],[13857,13857]]],[1591608504523,["Wahaha@DESKTOP-HTU2IVD",[[-1,13856,"\n"]],[13857,13857],[13856,13856]]],[1591608505374,["Wahaha@DESKTOP-HTU2IVD",[[1,13856,"\n"]],[13856,13856],[13857,13857]]],[1591608509575,["Wahaha@DESKTOP-HTU2IVD",[[1,13867,"反射主要是指程序可以访问、检测和修改它本身状态或行为的一种能力\n\n## Java反射："]],[13867,13867],[13910,13910]]],[1591608515274,["Wahaha@DESKTOP-HTU2IVD",[[-1,13900,"## Java反射：  "]],[13900,13912],[13900,13900]]],[1591608515857,["Wahaha@DESKTOP-HTU2IVD",[[-1,13901,"\n"]],[13900,13900],[13899,13899]]],[1591608521574,["Wahaha@DESKTOP-HTU2IVD",[[1,13899,"k"]],[13899,13899],[13900,13900]]],[1591608522180,["Wahaha@DESKTOP-HTU2IVD",[[-1,13899,"k"]],[13900,13900],[13899,13899]]],[1591608525308,["Wahaha@DESKTOP-HTU2IVD",[[1,13899,"java饭神"]],[13899,13899],[13905,13905]]],[1591608525854,["Wahaha@DESKTOP-HTU2IVD",[[-1,13903,"饭神"]],[13905,13905],[13903,13903]]],[1591608528612,["Wahaha@DESKTOP-HTU2IVD",[[1,13903,"反射："]],[13903,13903],[13906,13906]]],[1591608531588,["Wahaha@DESKTOP-HTU2IVD",[[1,13908,"\n"]],[13906,13906],[13907,13907]]],[1591608549762,["Wahaha@DESKTOP-HTU2IVD",[[1,13907,"在java运行环境中，UI与"]],[13907,13907],[13921,13921]]],[1591608551371,["Wahaha@DESKTOP-HTU2IVD",[[-1,13918,"UI与"]],[13921,13921],[13918,13918]]],[1591608555575,["Wahaha@DESKTOP-HTU2IVD",[[1,13918,"对于任何一个类"]],[13918,13918],[13925,13925]]],[1591608621027,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13927,"\n**"]],[13125,13125],[13927,13927]]],[1591608621027,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13927,"\n**"]],[13927,13927],[13125,13125]]],[1591608576685,["Wahaha@DESKTOP-HTU2IVD",[[1,13925,"，都能知道这个了IDE"]],[13925,13925],[13936,13936]]],[1591608578481,["Wahaha@DESKTOP-HTU2IVD",[[-1,13933,"IDE"]],[13936,13936],[13933,13933]]],[1591608607367,["Wahaha@DESKTOP-HTU2IVD",[[1,13933,"类的属性和方法，对于一个对象，可以掉"]],[13933,13933],[13951,13951]]],[1591608608815,["Wahaha@DESKTOP-HTU2IVD",[[-1,13949,"以掉"]],[13951,13951],[13949,13949]]],[1591608609997,["Wahaha@DESKTOP-HTU2IVD",[[1,13949,"一"]],[13949,13949],[13950,13950]]],[1591608612320,["Wahaha@DESKTOP-HTU2IVD",[[-1,13947,"，可一"]],[13950,13950],[13947,13947]]],[1591608617960,["Wahaha@DESKTOP-HTU2IVD",[[1,13947,"，可以调用其方法"]],[13947,13947],[13955,13955]]],[1591608681032,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13957,"\n**"]],[13125,13125],[13957,13957]]],[1591608681032,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13957,"\n**"]],[13957,13957],[13125,13125]]],[1591608650624,["Wahaha@DESKTOP-HTU2IVD",[[1,13955,"和属性"]],[13955,13955],[13958,13958]]],[1591608651681,["Wahaha@DESKTOP-HTU2IVD",[[1,13960,"\n"]],[13958,13958],[13959,13959]]],[1591608664593,["Wahaha@DESKTOP-HTU2IVD",[[1,13899,"35. "]],[13899,13899],[13903,13903]]],[1591608668360,["Wahaha@DESKTOP-HTU2IVD",[[1,13899,"\n"]],[13898,13898],[13899,13899]]],[1591608668743,["Wahaha@DESKTOP-HTU2IVD",[[-1,13899,"\n"]],[13899,13899],[13898,13898]]],[1591608669603,["Wahaha@DESKTOP-HTU2IVD",[[1,13899,"\n"]],[13898,13898],[13899,13899]]],[1591608672036,["Wahaha@DESKTOP-HTU2IVD",[[-1,13910,"："]],[13911,13911],[13910,13910]]],[1591608676042,["Wahaha@DESKTOP-HTU2IVD",[[1,13965,"\n"]],[13963,13963],[13964,13964]]],[1591608680745,["Wahaha@DESKTOP-HTU2IVD",[[1,13964,"3"]],[13964,13964],[13965,13965]]],[1591608741034,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13967,"\n**"]],[13125,13125],[13967,13967]]],[1591608741034,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13967,"\n**"]],[13967,13967],[13125,13125]]],[1591608681897,["Wahaha@DESKTOP-HTU2IVD",[[1,13966,"/ "]],[13966,13966],[13968,13968]]],[1591608682574,["Wahaha@DESKTOP-HTU2IVD",[[-1,13966,"/ "]],[13968,13968],[13966,13966]]],[1591608683601,["Wahaha@DESKTOP-HTU2IVD",[[1,13966,"。"]],[13966,13966],[13967,13967]]],[1591608684389,["Wahaha@DESKTOP-HTU2IVD",[[-1,13966,"。"]],[13967,13967],[13966,13966]]],[1591608685854,["Wahaha@DESKTOP-HTU2IVD",[[1,13966,". shen"]],[13966,13966],[13972,13972]]],[1591608686927,["Wahaha@DESKTOP-HTU2IVD",[[-1,13968,"shen"]],[13972,13972],[13968,13968]]],[1591608692835,["Wahaha@DESKTOP-HTU2IVD",[[1,13968,"什么是java序列化"]],[13968,13968],[13978,13978]]],[1591608693228,["Wahaha@DESKTOP-HTU2IVD",[[1,13979,"37. \n"]],[13978,13978],[13983,13983]]],[1591608694789,["Wahaha@DESKTOP-HTU2IVD",[[-1,13979,"37. "]],[13983,13983],[13979,13979]]],[1591608704131,["Wahaha@DESKTOP-HTU2IVD",[[1,13979,"简单说就是为了保存在内存中的各种对象的状态（也就是实例变量，不是方法），并且可以把保存的对象状态再读出来。虽然你可以用你自己的各种各样的方法来保存object states，但是Java给你提供一种应该比你自己好的保存对象状态的机制，那就是序列化。"]],[13979,13979],[14103,14103]]],[1591608709105,["Wahaha@DESKTOP-HTU2IVD",[[1,14105,"\n"]],[14103,14103],[14104,14104]]],[1591608709992,["Wahaha@DESKTOP-HTU2IVD",[[1,14106,"\n"]],[14104,14104],[14105,14105]]],[1591608716068,["Wahaha@DESKTOP-HTU2IVD",[[1,14105,"什么情况"]],[14105,14105],[14109,14109]]],[1591608719237,["Wahaha@DESKTOP-HTU2IVD",[[1,13979,"- "]],[13979,13979],[13981,13981]]],[1591608721174,["Wahaha@DESKTOP-HTU2IVD",[[1,14107,"- "]],[14107,14107],[14109,14109]]],[1591608728665,["Wahaha@DESKTOP-HTU2IVD",[[1,14113,"需要序列化"]],[14113,14113],[14118,14118]]],[1591608729017,["Wahaha@DESKTOP-HTU2IVD",[[1,14119,"- \n"]],[14118,14118],[14121,14121]]],[1591608730389,["Wahaha@DESKTOP-HTU2IVD",[[-1,14119,"- "]],[14121,14121],[14119,14119]]],[1591608737113,["Wahaha@DESKTOP-HTU2IVD",[[1,14119," 1. "]],[14119,14119],[14123,14123]]],[1591608740757,["Wahaha@DESKTOP-HTU2IVD",[[-1,14122," "]],[14123,14123],[14122,14122]]],[1591608801057,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13965,"\n"],[1,13966,"6"],[-1,14124,"**"]],[13125,13125],[14124,14124]]],[1591608801057,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13965,"\n"],[-1,13965,"6"],[1,14124,"**"]],[14124,14124],[13125,13125]]],[1591608742289,["Wahaha@DESKTOP-HTU2IVD",[[-1,14119," 1"]],[14121,14121],[14119,14119]]],[1591608763355,["Wahaha@DESKTOP-HTU2IVD",[[1,14119,"    1. 当你想把内存中的西低昂"]],[14119,14119],[14137,14137]]],[1591608765513,["Wahaha@DESKTOP-HTU2IVD",[[-1,14134,"西低昂"]],[14137,14137],[14134,14134]]],[1591608768410,["Wahaha@DESKTOP-HTU2IVD",[[1,14134,"对象状态"]],[14134,14134],[14138,14138]]],[1591608772208,["Wahaha@DESKTOP-HTU2IVD",[[1,14012,"保存"]],[14012,14012],[14014,14014]]],[1591608773257,["Wahaha@DESKTOP-HTU2IVD",[[-1,14012,"保存"]],[14014,14014],[14012,14012]]],[1591608778155,["Wahaha@DESKTOP-HTU2IVD",[[1,14138,"保存得到"]],[14138,14138],[14142,14142]]],[1591608783173,["Wahaha@DESKTOP-HTU2IVD",[[-1,14140,"得到"]],[14142,14142],[14140,14140]]],[1591608792021,["Wahaha@DESKTOP-HTU2IVD",[[1,14140,"到一个文件中或者数据库中"]],[14140,14140],[14152,14152]]],[1591608792711,["Wahaha@DESKTOP-HTU2IVD",[[1,14153,"    2. \n"]],[14152,14152],[14160,14160]]],[1591608800319,["Wahaha@DESKTOP-HTU2IVD",[[1,14160,"当你"]],[14160,14160],[14162,14162]]],[1591608861032,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13965,"\n"],[1,13966,"6"],[-1,14152,"."],[1,14153,"\n"],[-1,14164,"\n**"]],[13125,13125],[14164,14164]]],[1591608861032,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13965,"\n"],[-1,13965,"6"],[1,14152,"."],[-1,14152,"\n"],[1,14164,"\n**"]],[14164,14164],[13125,13125]]],[1591608816332,["Wahaha@DESKTOP-HTU2IVD",[[1,14162,"想用套接字在网络上传送对象的时候"]],[14162,14162],[14178,14178]]],[1591608816683,["Wahaha@DESKTOP-HTU2IVD",[[1,14179,"    3. \n"]],[14178,14178],[14186,14186]]],[1591608829357,["Wahaha@DESKTOP-HTU2IVD",[[1,14186,"当你想通过RMI"]],[14186,14186],[14194,14194]]],[1591608836276,["Wahaha@DESKTOP-HTU2IVD",[[1,14194,"  "]],[14196,14196],[14195,14196]]],[1591608837057,["Wahaha@DESKTOP-HTU2IVD",[[-1,14195," "],[1,14196,"传输"]],[14195,14195],[14197,14197]]],[1591608840748,["Wahaha@DESKTOP-HTU2IVD",[[1,14197,"对象的时候"]],[14197,14197],[14202,14202]]],[1591608856644,["Wahaha@DESKTOP-HTU2IVD",[[1,14204,"\n"]],[14203,14203],[14204,14204]]],[1591608858061,["Wahaha@DESKTOP-HTU2IVD",[[-1,14204,"\n"],[1,14205,"5"]],[14204,14204],[14205,14205]]],[1591608858699,["Wahaha@DESKTOP-HTU2IVD",[[1,14205,"9 "]],[14205,14205],[14207,14207]]],[1591608859430,["Wahaha@DESKTOP-HTU2IVD",[[-1,14206," "]],[14207,14207],[14206,14206]]],[1591608860490,["Wahaha@DESKTOP-HTU2IVD",[[1,14206,"。 "]],[14206,14206],[14208,14208]]],[1591608921038,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13965,"\n"],[1,13966,"6"],[-1,14152,"."],[1,14153,"\n"],[-1,14208,"\n**"]],[13125,13125],[14208,14208]]],[1591608921038,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13965,"\n"],[-1,13965,"6"],[1,14152,"."],[-1,14152,"\n"],[1,14208,"\n**"]],[14208,14208],[13125,13125]]],[1591608861678,["Wahaha@DESKTOP-HTU2IVD",[[-1,14206,"。 "]],[14208,14208],[14206,14206]]],[1591608866315,["Wahaha@DESKTOP-HTU2IVD",[[1,14206,". dogn"]],[14206,14206],[14212,14212]]],[1591608867437,["Wahaha@DESKTOP-HTU2IVD",[[-1,14208,"dogn"]],[14212,14212],[14208,14208]]],[1591608873450,["Wahaha@DESKTOP-HTU2IVD",[[1,14208,"动态代理有哪些用"]],[14208,14208],[14216,14216]]],[1591608877106,["Wahaha@DESKTOP-HTU2IVD",[[-1,14212,"有哪些用"]],[14216,14216],[14212,14212]]],[1591608886232,["Wahaha@DESKTOP-HTU2IVD",[[1,14212,"是什么， "]],[14212,14212],[14207,14207]]],[1591608889445,["Wahaha@DESKTOP-HTU2IVD",[[-1,14215,"， "]],[14217,14217],[14215,14215]]],[1591608890485,["Wahaha@DESKTOP-HTU2IVD",[[1,14215,"、"]],[14215,14215],[14216,14216]]],[1591608891605,["Wahaha@DESKTOP-HTU2IVD",[[-1,14215,"、"]],[14216,14216],[14215,14215]]],[1591608897312,["Wahaha@DESKTOP-HTU2IVD",[[1,14215,"？有哪些应用？\n60. "]],[14215,14215],[14227,14227]]],[1591608898571,["Wahaha@DESKTOP-HTU2IVD",[[-1,14224,"0. "]],[14227,14227],[14224,14224]]],[1591608899374,["Wahaha@DESKTOP-HTU2IVD",[[-1,14223,"6"],[1,14224,"\n"]],[14224,14224],[14223,14223]]],[1591608899769,["Wahaha@DESKTOP-HTU2IVD",[[1,14224,"\n"]],[14223,14223],[14224,14224]]],[1591608905851,["Wahaha@DESKTOP-HTU2IVD",[[-1,14224,"\n"],[1,14225,"动态"]],[14224,14224],[14226,14226]]],[1591608908734,["Wahaha@DESKTOP-HTU2IVD",[[1,14226,"代理："]],[14226,14226],[14229,14229]]],[1591608909009,["Wahaha@DESKTOP-HTU2IVD",[[1,14229,"\n\n"]],[14229,14229],[14230,14230]]],[1591608919866,["Wahaha@DESKTOP-HTU2IVD",[[1,14224,"- "]],[14224,14224],[14226,14226]]],[1591608981037,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13965,"\n"],[1,13966,"6"],[-1,14152,"."],[1,14153,"\n"],[-1,14233,"\n**"]],[13125,13125],[14233,14233]]],[1591608981037,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13965,"\n"],[-1,13965,"6"],[1,14152,"."],[-1,14152,"\n"],[1,14233,"\n**"]],[14233,14233],[13125,13125]]],[1591608923903,["Wahaha@DESKTOP-HTU2IVD",[[-1,14232,"- "]],[14234,14234],[14233,14233]]],[1591608961254,["Wahaha@DESKTOP-HTU2IVD",[[1,14232,"当想要给实现某个接口类中"]],[14232,14232],[14244,14244]]],[1591608961626,["Wahaha@DESKTOP-HTU2IVD",[[-1,14243,"中"]],[14244,14244],[14243,14243]]],[1591608965420,["Wahaha@DESKTOP-HTU2IVD",[[1,14243,"中的党阀"]],[14243,14243],[14247,14247]]],[1591608966227,["Wahaha@DESKTOP-HTU2IVD",[[-1,14245,"党阀"]],[14247,14247],[14245,14245]]],[1591608977858,["Wahaha@DESKTOP-HTU2IVD",[[1,14245,"方法，加一些额外的"]],[14245,14245],[14254,14254]]],[1591609041118,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13965,"\n"],[1,13966,"6"],[-1,14152,"."],[1,14153,"\n"],[-1,14254,"**"],[1,14256,"\n\n"]],[13125,13125],[14258,14258]]],[1591609041118,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13965,"\n"],[-1,13965,"6"],[1,14152,"."],[-1,14152,"\n"],[1,14254,"**"],[-1,14254,"\n\n"]],[14258,14258],[13125,13125]]],[1591609005438,["Wahaha@DESKTOP-HTU2IVD",[[1,14254,"处理。比如加日志、事务等。可以给这个类穿件"]],[14254,14254],[14275,14275]]],[1591609007598,["Wahaha@DESKTOP-HTU2IVD",[[-1,14273,"穿件"]],[14275,14275],[14273,14273]]],[1591609009188,["Wahaha@DESKTOP-HTU2IVD",[[1,14273,"黄建"]],[14273,14273],[14275,14275]]],[1591609010579,["Wahaha@DESKTOP-HTU2IVD",[[-1,14273,"黄建"]],[14275,14275],[14273,14273]]],[1591609027724,["Wahaha@DESKTOP-HTU2IVD",[[1,14273,"创建一个代理，故名司仪"]],[14273,14273],[14284,14284]]],[1591609029836,["Wahaha@DESKTOP-HTU2IVD",[[-1,14280,"故名司仪"]],[14284,14284],[14280,14280]]],[1591609037762,["Wahaha@DESKTOP-HTU2IVD",[[1,14280,"顾名思义就是创建一个闲的了"]],[14280,14280],[14293,14293]]],[1591609039536,["Wahaha@DESKTOP-HTU2IVD",[[-1,14290,"闲的了"]],[14293,14293],[14290,14290]]],[1591609040642,["Wahaha@DESKTOP-HTU2IVD",[[1,14290,"新的"]],[14290,14290],[14292,14292]]],[1591609101057,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13965,"\n"],[1,13966,"6"],[-1,14152,"."],[1,14153,"\n"],[-1,14292,"**"],[1,14294,"\n\n"]],[13125,13125],[14296,14296]]],[1591609101057,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13965,"\n"],[-1,13965,"6"],[1,14152,"."],[-1,14152,"\n"],[1,14292,"**"],[-1,14292,"\n\n"]],[14296,14296],[13125,13125]]],[1591609050696,["Wahaha@DESKTOP-HTU2IVD",[[1,14292,"类，这个类不仅包裹"]],[14292,14292],[14301,14301]]],[1591609052573,["Wahaha@DESKTOP-HTU2IVD",[[-1,14299,"包裹"]],[14301,14301],[14299,14299]]],[1591609062790,["Wahaha@DESKTOP-HTU2IVD",[[1,14299,"包括原来类的方法"]],[14299,14299],[14307,14307]]],[1591609076545,["Wahaha@DESKTOP-HTU2IVD",[[-1,14304,"的"]],[14305,14305],[14304,14304]]],[1591609099473,["Wahaha@DESKTOP-HTU2IVD",[[1,14306,"的功能，而且在原来的基础上"]],[14306,14306],[14319,14319]]],[1591609161054,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13965,"\n"],[1,13966,"6"],[-1,14152,"."],[1,14153,"\n"],[-1,14319,"**"],[1,14321,"\n\n"]],[13125,13125],[14323,14323]]],[1591609161054,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13965,"\n"],[-1,13965,"6"],[1,14152,"."],[-1,14152,"\n"],[1,14319,"**"],[-1,14319,"\n\n"]],[14323,14323],[13125,13125]]],[1591609109617,["Wahaha@DESKTOP-HTU2IVD",[[1,14319,"添加了二外"]],[14319,14319],[14324,14324]]],[1591609110651,["Wahaha@DESKTOP-HTU2IVD",[[-1,14322,"二外"]],[14324,14324],[14322,14322]]],[1591609116077,["Wahaha@DESKTOP-HTU2IVD",[[1,14322,"额外处理的心累"]],[14322,14322],[14329,14329]]],[1591609117094,["Wahaha@DESKTOP-HTU2IVD",[[-1,14327,"心累"]],[14329,14329],[14327,14327]]],[1591609160016,["Wahaha@DESKTOP-HTU2IVD",[[1,14327,"新类，这个代理类并不是定义好的而是"]],[14327,14327],[14344,14344]]],[1591609221056,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13965,"\n"],[1,13966,"6"],[-1,14152,"."],[1,14153,"\n"],[-1,14344,"**"],[1,14346,"\n\n"]],[13125,13125],[14348,14348]]],[1591609221056,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13965,"\n"],[-1,13965,"6"],[1,14152,"."],[-1,14152,"\n"],[1,14344,"**"],[-1,14344,"\n\n"]],[14348,14348],[13125,13125]]],[1591609192595,["Wahaha@DESKTOP-HTU2IVD",[[1,14344,"自动生成的。具有解耦意思、灵活扩展性强"]],[14344,14344],[14363,14363]]],[1591609192896,["Wahaha@DESKTOP-HTU2IVD",[[1,14365,"\n"]],[14363,14363],[14364,14364]]],[1591609196696,["Wahaha@DESKTOP-HTU2IVD",[[1,14366,"\n"]],[14364,14364],[14365,14365]]],[1591609212984,["Wahaha@DESKTOP-HTU2IVD",[[1,14365,"- 动态代理的应用"]],[14365,14365],[14374,14374]]],[1591609213501,["Wahaha@DESKTOP-HTU2IVD",[[1,14375,"- \n"]],[14374,14374],[14377,14377]]],[1591609214605,["Wahaha@DESKTOP-HTU2IVD",[[-1,14375,"- "]],[14377,14377],[14375,14375]]],[1591609215174,["Wahaha@DESKTOP-HTU2IVD",[[1,14375,"·"]],[14375,14375],[14376,14376]]],[1591609216074,["Wahaha@DESKTOP-HTU2IVD",[[-1,14375,"·"]],[14376,14376],[14375,14375]]],[1591609219466,["Wahaha@DESKTOP-HTU2IVD",[[1,14375,"    1 。"]],[14375,14375],[14382,14382]]],[1591609220305,["Wahaha@DESKTOP-HTU2IVD",[[-1,14380," 。"]],[14382,14382],[14380,14380]]],[1591609281128,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13965,"\n"],[1,13966,"6"],[-1,14152,"."],[1,14153,"\n"],[-1,14363,"**"],[1,14365,"\n\n"]],[13125,13125],[14367,14367]]],[1591609281128,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13965,"\n"],[-1,13965,"6"],[1,14152,"."],[-1,14152,"\n"],[1,14363,"**"],[-1,14363,"\n\n"]],[14367,14367],[13125,13125]]],[1591609228368,["Wahaha@DESKTOP-HTU2IVD",[[1,14382,"SpringZHOGN D"]],[14382,14382],[14395,14395]]],[1591609232257,["Wahaha@DESKTOP-HTU2IVD",[[-1,14388,"ZHOGN D"]],[14395,14395],[14388,14388]]],[1591609236683,["Wahaha@DESKTOP-HTU2IVD",[[1,14388,"中的AOP"]],[14388,14388],[14393,14393]]],[1591609237521,["Wahaha@DESKTOP-HTU2IVD",[[1,14394,"    2. \n"]],[14393,14393],[14401,14401]]],[1591609253401,["Wahaha@DESKTOP-HTU2IVD",[[1,14401,"加事务"]],[14401,14401],[14404,14404]]],[1591609253714,["Wahaha@DESKTOP-HTU2IVD",[[1,14405,"    3. \n"]],[14404,14404],[14412,14412]]],[1591609254152,["Wahaha@DESKTOP-HTU2IVD",[[1,14412,"2"]],[14412,14412],[14413,14413]]],[1591609254791,["Wahaha@DESKTOP-HTU2IVD",[[-1,14412,"2"]],[14413,14413],[14412,14412]]],[1591609258186,["Wahaha@DESKTOP-HTU2IVD",[[1,14412,"加权限"]],[14412,14412],[14415,14415]]],[1591609258772,["Wahaha@DESKTOP-HTU2IVD",[[1,14416,"    4. \n"]],[14415,14415],[14423,14423]]],[1591609261371,["Wahaha@DESKTOP-HTU2IVD",[[1,14423,"家日志"]],[14423,14423],[14426,14426]]],[1591609262962,["Wahaha@DESKTOP-HTU2IVD",[[-1,14423,"家日志"]],[14426,14426],[14423,14423]]],[1591609266501,["Wahaha@DESKTOP-HTU2IVD",[[1,14423,"加日志"]],[14423,14423],[14426,14426]]],[1591609273245,["Wahaha@DESKTOP-HTU2IVD",[[1,14428,"\n"]],[14427,14427],[14428,14428]]],[1591609274315,["Wahaha@DESKTOP-HTU2IVD",[[-1,14428,"\n"],[1,14429,"6"]],[14428,14428],[14429,14429]]],[1591609280850,["Wahaha@DESKTOP-HTU2IVD",[[1,14429,"0 怎么实现动态代理"]],[14429,14429],[14439,14439]]],[1591609341121,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13965,"\n"],[1,13966,"6"],[-1,14152,"."],[1,14153,"\n"],[-1,14363,"**"],[1,14365,"\n\n"],[-1,14380,"\n\n"],[1,14382,". "],[1,14393,"\n"],[-1,14400,"\n"],[1,14404,"\n"],[-1,14411,"\n"],[1,14415,"\n"],[-1,14422,"\n"],[1,14426,"\n"]],[13125,13125],[14427,14427]]],[1591609341121,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13965,"\n"],[-1,13965,"6"],[1,14152,"."],[-1,14152,"\n"],[1,14363,"**"],[-1,14363,"\n\n"],[1,14380,"\n\n"],[-1,14380,". "],[-1,14393,"\n"],[1,14401,"\n"],[-1,14404,"\n"],[1,14412,"\n"],[-1,14415,"\n"],[1,14423,"\n"],[-1,14426,"\n"]],[14427,14427],[13125,13125]]],[1591609284555,["Wahaha@DESKTOP-HTU2IVD",[[1,14430,"。"]],[14430,14430],[14431,14431]]],[1591609285576,["Wahaha@DESKTOP-HTU2IVD",[[-1,14430,"。"]],[14431,14431],[14430,14430]]],[1591609286843,["Wahaha@DESKTOP-HTU2IVD",[[1,14430,"。"]],[14430,14430],[14431,14431]]],[1591609287811,["Wahaha@DESKTOP-HTU2IVD",[[-1,14430,"。"]],[14431,14431],[14430,14430]]],[1591609288719,["Wahaha@DESKTOP-HTU2IVD",[[1,14430,"。"]],[14430,14430],[14431,14431]]],[1591609290341,["Wahaha@DESKTOP-HTU2IVD",[[-1,14430,"。"]],[14431,14431],[14430,14430]]],[1591609291799,["Wahaha@DESKTOP-HTU2IVD",[[1,14430,"."]],[14430,14430],[14431,14431]]],[1591609881216,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13965,"\n"],[1,13966,"6"],[-1,14152,"."],[1,14153,"\n"],[-1,14363,"**"],[1,14365,"\n\n"],[-1,14380,"\n\n"],[1,14382,". "],[1,14393,"\n"],[-1,14400,"\n"],[1,14404,"\n"],[-1,14411,"\n"],[1,14415,"\n"],[-1,14422,"\n"],[1,14426,"\n"],[-1,14429," "],[1,14431," "]],[13125,13125],[14432,14432]]],[1591609881216,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13965,"\n"],[-1,13965,"6"],[1,14152,"."],[-1,14152,"\n"],[1,14363,"**"],[-1,14363,"\n\n"],[1,14380,"\n\n"],[-1,14380,". "],[-1,14393,"\n"],[1,14401,"\n"],[-1,14404,"\n"],[1,14412,"\n"],[-1,14415,"\n"],[1,14423,"\n"],[-1,14426,"\n"],[1,14430," "],[-1,14431," "]],[14432,14432],[13125,13125]]],[1591609828700,["Wahaha@DESKTOP-HTU2IVD",[[1,14440,"\n61. "]],[14440,14440],[14445,14445]]],[1591609829682,["Wahaha@DESKTOP-HTU2IVD",[[-1,14441,"61. "],[1,14445,"\n\n"]],[14445,14445],[14442,14442]]],[1591609836448,["Wahaha@DESKTOP-HTU2IVD",[[-1,14442,"\n"],[1,14443,"s"]],[14442,14442],[14443,14443]]],[1591609837100,["Wahaha@DESKTOP-HTU2IVD",[[1,14443,"houx"]],[14443,14443],[14447,14447]]],[1591609838031,["Wahaha@DESKTOP-HTU2IVD",[[-1,14443,"houx"]],[14447,14447],[14443,14443]]],[1591609838199,["Wahaha@DESKTOP-HTU2IVD",[[-1,14442,"s"],[1,14443,"\n"]],[14443,14443],[14442,14442]]],[1591609840111,["Wahaha@DESKTOP-HTU2IVD",[[-1,14442,"\n"],[1,14443,"首先"]],[14442,14442],[14444,14444]]],[1591609841486,["Wahaha@DESKTOP-HTU2IVD",[[-1,14443,"先"]],[14444,14444],[14443,14443]]],[1591609841658,["Wahaha@DESKTOP-HTU2IVD",[[-1,14442,"首"],[1,14443,"\n"]],[14443,14443],[14442,14442]]],[1591609841849,["Wahaha@DESKTOP-HTU2IVD",[[-1,14442,"\n"]],[14442,14442],[14441,14441]]],[1591609844609,["Wahaha@DESKTOP-HTU2IVD",[[-1,14441,"\n"],[1,14442,"首先"]],[14441,14441],[14443,14443]]],[1591609846675,["Wahaha@DESKTOP-HTU2IVD",[[1,14443,"必须等"]],[14443,14443],[14446,14446]]],[1591609847613,["Wahaha@DESKTOP-HTU2IVD",[[-1,14445,"等"]],[14446,14446],[14445,14445]]],[1591609870145,["Wahaha@DESKTOP-HTU2IVD",[[1,14445,"定义一个接口，还要有一个Invation"]],[14445,14445],[14465,14465]]],[1591609874271,["Wahaha@DESKTOP-HTU2IVD",[[1,14460,"c"]],[14460,14460],[14461,14461]]],[1591609880971,["Wahaha@DESKTOP-HTU2IVD",[[1,14466,"Handle"]],[14466,14466],[14472,14472]]],[1591609941216,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13965,"\n"],[1,13966,"6"],[-1,14152,"."],[1,14153,"\n"],[-1,14363,"**"],[1,14365,"\n\n"],[-1,14380,"\n\n"],[1,14382,". "],[1,14393,"\n"],[-1,14400,"\n"],[1,14404,"\n"],[-1,14411,"\n"],[1,14415,"\n"],[-1,14422,"\n"],[1,14427,"\n"],[1,14429,"."],[-1,14430,"."],[-1,14440,"6"]],[13125,13125],[14440,14440]]],[1591609941217,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13965,"\n"],[-1,13965,"6"],[1,14152,"."],[-1,14152,"\n"],[1,14363,"**"],[-1,14363,"\n\n"],[1,14380,"\n\n"],[-1,14380,". "],[-1,14393,"\n"],[1,14401,"\n"],[-1,14404,"\n"],[1,14412,"\n"],[-1,14415,"\n"],[1,14423,"\n"],[-1,14427,"\n"],[-1,14430,"."],[1,14432,"."],[1,14441,"6"]],[14440,14440],[13125,13125]]],[1591609889395,["Wahaha@DESKTOP-HTU2IVD",[[1,14473,"()"]],[14473,14473],[14475,14475]]],[1591609891927,["Wahaha@DESKTOP-HTU2IVD",[[1,14474,"jiang"]],[14474,14474],[14479,14479]]],[1591609893852,["Wahaha@DESKTOP-HTU2IVD",[[-1,14474,"jiang"]],[14479,14479],[14474,14474]]],[1591609899671,["Wahaha@DESKTOP-HTU2IVD",[[1,14474,"将实现接口类的"]],[14474,14474],[14481,14481]]],[1591609900343,["Wahaha@DESKTOP-HTU2IVD",[[-1,14479,"类的"]],[14481,14481],[14479,14479]]],[1591609916093,["Wahaha@DESKTOP-HTU2IVD",[[1,14479,"类的对象传递给他"]],[14479,14479],[14487,14487]]],[1591609916904,["Wahaha@DESKTOP-HTU2IVD",[[-1,14486,"他"]],[14487,14487],[14486,14486]]],[1591609918946,["Wahaha@DESKTOP-HTU2IVD",[[1,14486,"它"]],[14486,14486],[14487,14487]]],[1591609931176,["Wahaha@DESKTOP-HTU2IVD",[[1,14479,"的"]],[14479,14479],[14480,14480]]],[1591609939027,["Wahaha@DESKTOP-HTU2IVD",[[1,14489,"处理类"]],[14489,14489],[14492,14492]]],[1591610001291,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13965,"\n"],[1,13966,"6"],[-1,14152,"."],[1,14153,"\n"],[-1,14363,"**"],[1,14365,"\n\n"],[-1,14380,"\n\n"],[1,14382,". "],[1,14393,"\n"],[-1,14400,"\n"],[1,14404,"\n"],[-1,14411,"\n"],[1,14415,"\n"],[-1,14422,"\n"],[1,14427,"\n"],[-1,14429," "],[1,14431," "],[-1,14440,"6"],[1,14472,"r"],[-1,14473,")"],[1,14488,")"]],[13125,13125],[14489,14489]]],[1591610001291,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13965,"\n"],[-1,13965,"6"],[1,14152,"."],[-1,14152,"\n"],[1,14363,"**"],[-1,14363,"\n\n"],[1,14380,"\n\n"],[-1,14380,". "],[-1,14393,"\n"],[1,14401,"\n"],[-1,14404,"\n"],[1,14412,"\n"],[-1,14415,"\n"],[1,14423,"\n"],[-1,14427,"\n"],[1,14430," "],[-1,14431," "],[1,14441,"6"],[-1,14472,"r"],[1,14474,")"],[-1,14488,")"]],[14489,14489],[13125,13125]]],[1591609961654,["Wahaha@DESKTOP-HTU2IVD",[[1,14492,"。再加一个工具类Proxy()"]],[14492,14492],[14507,14507]]],[1591609965448,["Wahaha@DESKTOP-HTU2IVD",[[1,14506,"x"]],[14506,14506],[14507,14507]]],[1591609966310,["Wahaha@DESKTOP-HTU2IVD",[[-1,14506,"x"]],[14507,14507],[14506,14506]]],[1591609974727,["Wahaha@DESKTOP-HTU2IVD",[[1,14506,"习惯性的称之为大力类"]],[14506,14506],[14516,14516]]],[1591609975757,["Wahaha@DESKTOP-HTU2IVD",[[-1,14513,"大力类"]],[14516,14516],[14513,14513]]],[1591609991073,["Wahaha@DESKTOP-HTU2IVD",[[1,14513,"代理类，以为"]],[14513,14513],[14519,14519]]],[1591609991832,["Wahaha@DESKTOP-HTU2IVD",[[-1,14516,"，以为"]],[14519,14519],[14516,14516]]],[1591609994724,["Wahaha@DESKTOP-HTU2IVD",[[1,14516,"，yin"]],[14516,14516],[14520,14520]]],[1591609995485,["Wahaha@DESKTOP-HTU2IVD",[[-1,14517,"yin"]],[14520,14520],[14517,14517]]],[1591610001045,["Wahaha@DESKTOP-HTU2IVD",[[1,14517,"因为调用"]],[14517,14517],[14521,14521]]],[1591610061293,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13965,"\n"],[1,13966,"6"],[-1,14152,"."],[1,14153,"\n"],[-1,14363,"**"],[1,14365,"\n\n"],[-1,14380,"\n\n"],[1,14382,". "],[1,14393,"\n"],[-1,14400,"\n"],[1,14404,"\n"],[-1,14411,"\n"],[1,14415,"\n"],[-1,14422,"\n"],[1,14426,"\n"],[-1,14429," "],[1,14431," "],[-1,14440,"6"],[1,14472,"r"],[-1,14473,")"],[1,14488,")"],[-1,14505,")"],[1,14521,")"]],[13125,13125],[14522,14522]]],[1591610061293,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13965,"\n"],[-1,13965,"6"],[1,14152,"."],[-1,14152,"\n"],[1,14363,"**"],[-1,14363,"\n\n"],[1,14380,"\n\n"],[-1,14380,". "],[-1,14393,"\n"],[1,14401,"\n"],[-1,14404,"\n"],[1,14412,"\n"],[-1,14415,"\n"],[1,14423,"\n"],[-1,14426,"\n"],[1,14430," "],[-1,14431," "],[1,14441,"6"],[-1,14472,"r"],[1,14474,")"],[-1,14488,")"],[1,14506,")"],[-1,14521,")"]],[14522,14522],[13125,13125]]],[1591610006384,["Wahaha@DESKTOP-HTU2IVD",[[1,14521,"他的NEW"]],[14521,14521],[14526,14526]]],[1591610007101,["Wahaha@DESKTOP-HTU2IVD",[[-1,14523,"NEW"]],[14526,14526],[14523,14523]]],[1591610016944,["Wahaha@DESKTOP-HTU2IVD",[[1,14523,"nweInstance(0"]],[14523,14523],[14536,14536]]],[1591610021310,["Wahaha@DESKTOP-HTU2IVD",[[-1,14535,"0"]],[14536,14536],[14535,14535]]],[1591610022830,["Wahaha@DESKTOP-HTU2IVD",[[1,14536,")"]],[14535,14535],[14536,14536]]],[1591610043672,["Wahaha@DESKTOP-HTU2IVD",[[1,14536,"可以产生代理对象，其实就是一个代理"]],[14536,14536],[14553,14553]]],[1591610047902,["Wahaha@DESKTOP-HTU2IVD",[[1,14202," "]],[14203,14203],[14202,14203]]],[1591610048272,["Wahaha@DESKTOP-HTU2IVD",[[-1,14202," "]],[14202,14202],[14202,14202]]],[1591610054658,["Wahaha@DESKTOP-HTU2IVD",[[1,14553,"对象的工具类"]],[14553,14553],[14559,14559]]],[1591610060123,["Wahaha@DESKTOP-HTU2IVD",[[1,14560,"，"]],[14560,14560],[14561,14561]]],[1591610121299,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13965,"\n"],[1,13966,"6"],[-1,14152,"."],[1,14153,"\n"],[-1,14363,"**"],[1,14365,"\n\n"],[-1,14380,"\n\n"],[1,14382,". "],[1,14393,"\n"],[-1,14400,"\n"],[1,14404,"\n"],[-1,14411,"\n"],[1,14415,"\n"],[-1,14422,"\n"],[1,14426,"\n"],[-1,14429," "],[1,14431," "],[-1,14440,"6"],[1,14472,"r"],[-1,14473,")"],[1,14488,")"],[-1,14505,")"],[1,14559,")"]],[13125,13125],[14560,14560]]],[1591610121299,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13965,"\n"],[-1,13965,"6"],[1,14152,"."],[-1,14152,"\n"],[1,14363,"**"],[-1,14363,"\n\n"],[1,14380,"\n\n"],[-1,14380,". "],[-1,14393,"\n"],[1,14401,"\n"],[-1,14404,"\n"],[1,14412,"\n"],[-1,14415,"\n"],[1,14423,"\n"],[-1,14426,"\n"],[1,14430," "],[-1,14431," "],[1,14441,"6"],[-1,14472,"r"],[1,14474,")"],[-1,14488,")"],[1,14506,")"],[-1,14559,")"]],[14560,14560],[13125,13125]]],[1591610101928,["Wahaha@DESKTOP-HTU2IVD",[[-1,14560,"，"]],[14561,14561],[14560,14560]]],[1591610104796,["Wahaha@DESKTOP-HTU2IVD",[[1,14560,"。liyogn"]],[14560,14560],[14567,14567]]],[1591610105936,["Wahaha@DESKTOP-HTU2IVD",[[-1,14561,"liyogn"]],[14567,14567],[14561,14561]]],[1591610107738,["Wahaha@DESKTOP-HTU2IVD",[[1,14561,"liy"]],[14561,14561],[14564,14564]]],[1591610108626,["Wahaha@DESKTOP-HTU2IVD",[[-1,14561,"liy"]],[14564,14564],[14561,14561]]],[1591610116404,["Wahaha@DESKTOP-HTU2IVD",[[1,14561,"利用到Inva"]],[14561,14561],[14568,14568]]],[1591610117225,["Wahaha@DESKTOP-HTU2IVD",[[-1,14567,"a"]],[14568,14568],[14567,14567]]],[1591610118812,["Wahaha@DESKTOP-HTU2IVD",[[1,14567,"ocation"]],[14567,14567],[14574,14574]]],[1591610181301,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13965,"\n"],[1,13966,"6"],[-1,14152,"."],[1,14153,"\n"],[-1,14363,"**"],[1,14365,"\n\n"],[-1,14380,"\n\n"],[1,14382,". "],[1,14393,"\n"],[-1,14400,"\n"],[1,14404,"\n"],[-1,14411,"\n"],[1,14415,"\n"],[-1,14422,"\n"],[1,14426,"\n"],[-1,14429," "],[1,14431," "],[-1,14440,"6"],[1,14472,"r"],[-1,14473,")"],[1,14488,")"],[-1,14505,")"],[-1,14559,"，"],[1,14560,")"]],[13125,13125],[14561,14561]]],[1591610181301,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13965,"\n"],[-1,13965,"6"],[1,14152,"."],[-1,14152,"\n"],[1,14363,"**"],[-1,14363,"\n\n"],[1,14380,"\n\n"],[-1,14380,". "],[-1,14393,"\n"],[1,14401,"\n"],[-1,14404,"\n"],[1,14412,"\n"],[-1,14415,"\n"],[1,14423,"\n"],[-1,14426,"\n"],[1,14430," "],[-1,14431," "],[1,14441,"6"],[-1,14472,"r"],[1,14474,")"],[-1,14488,")"],[1,14506,")"],[1,14559,"，"],[-1,14559,")"]],[14561,14561],[13125,13125]]],[1591610133420,["Wahaha@DESKTOP-HTU2IVD",[[1,14574,"Handler,ping"]],[14574,14574],[14586,14586]]],[1591610134212,["Wahaha@DESKTOP-HTU2IVD",[[-1,14582,"ping"]],[14586,14586],[14582,14582]]],[1591610138191,["Wahaha@DESKTOP-HTU2IVD",[[1,14582,"凭借"]],[14582,14582],[14584,14584]]],[1591610139382,["Wahaha@DESKTOP-HTU2IVD",[[-1,14581,",凭借"]],[14584,14584],[14581,14581]]],[1591610142768,["Wahaha@DESKTOP-HTU2IVD",[[1,14581,",凭借"]],[14581,14581],[14584,14584]]],[1591610143824,["Wahaha@DESKTOP-HTU2IVD",[[-1,14582,"凭借"]],[14584,14584],[14582,14582]]],[1591610167024,["Wahaha@DESKTOP-HTU2IVD",[[1,14582,"拼接代理类源代码，惊奇"]],[14582,14582],[14593,14593]]],[1591610167740,["Wahaha@DESKTOP-HTU2IVD",[[-1,14591,"惊奇"]],[14593,14593],[14591,14591]]],[1591610179676,["Wahaha@DESKTOP-HTU2IVD",[[1,14591,"将其编译成二进制代码"]],[14591,14591],[14601,14601]]],[1591610241297,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13965,"\n"],[1,13966,"6"],[-1,14152,"."],[1,14153,"\n"],[-1,14363,"**"],[1,14365,"\n\n"],[-1,14380,"\n\n"],[1,14382,". "],[1,14393,"\n"],[-1,14400,"\n"],[1,14404,"\n"],[-1,14411,"\n"],[1,14415,"\n"],[-1,14422,"\n"],[1,14426,"\n"],[-1,14429," "],[1,14431," "],[-1,14440,"6"],[1,14472,"r"],[-1,14473,")"],[1,14488,")"],[-1,14505,")"],[-1,14559,"，"],[1,14560,")"]],[13125,13125],[14561,14561]]],[1591610241297,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13965,"\n"],[-1,13965,"6"],[1,14152,"."],[-1,14152,"\n"],[1,14363,"**"],[-1,14363,"\n\n"],[1,14380,"\n\n"],[-1,14380,". "],[-1,14393,"\n"],[1,14401,"\n"],[-1,14404,"\n"],[1,14412,"\n"],[-1,14415,"\n"],[1,14423,"\n"],[-1,14426,"\n"],[1,14430," "],[-1,14431," "],[1,14441,"6"],[-1,14472,"r"],[1,14474,")"],[-1,14488,")"],[1,14506,")"],[1,14559,"，"],[-1,14559,")"]],[14561,14561],[13125,13125]]],[1591610188803,["Wahaha@DESKTOP-HTU2IVD",[[1,14596,"代理类的"]],[14596,14596],[14600,14600]]],[1591610241005,["Wahaha@DESKTOP-HTU2IVD",[[1,14605,"。利用加载器加载"]],[14605,14605],[14613,14613]]],[1591610301304,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13965,"\n"],[1,13966,"6"],[-1,14152,"."],[1,14153,"\n"],[-1,14363,"**"],[1,14365,"\n\n"],[-1,14380,"\n\n"],[1,14382,". "],[1,14393,"\n"],[-1,14400,"\n"],[1,14404,"\n"],[-1,14411,"\n"],[1,14415,"\n"],[-1,14422,"\n"],[1,14426,"\n"],[-1,14429," "],[1,14431," "],[-1,14440,"6"],[1,14472,"r"],[-1,14473,")"],[1,14488,")"],[-1,14505,")"],[-1,14559,"，"],[1,14560,")"]],[13125,13125],[14561,14561]]],[1591610301304,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13965,"\n"],[-1,13965,"6"],[1,14152,"."],[-1,14152,"\n"],[1,14363,"**"],[-1,14363,"\n\n"],[1,14380,"\n\n"],[-1,14380,". "],[-1,14393,"\n"],[1,14401,"\n"],[-1,14404,"\n"],[1,14412,"\n"],[-1,14415,"\n"],[1,14423,"\n"],[-1,14426,"\n"],[1,14430," "],[-1,14431," "],[1,14441,"6"],[-1,14472,"r"],[1,14474,")"],[-1,14488,")"],[1,14506,")"],[1,14559,"，"],[-1,14559,")"]],[14561,14561],[13125,13125]]],[1591610253959,["Wahaha@DESKTOP-HTU2IVD",[[1,14613,"，并将其实例化缠身"]],[14613,14613],[14622,14622]]],[1591610255047,["Wahaha@DESKTOP-HTU2IVD",[[-1,14620,"缠身"]],[14622,14622],[14620,14620]]],[1591610266981,["Wahaha@DESKTOP-HTU2IVD",[[1,14620,"产生代理对象，最后返回。"]],[14620,14620],[14632,14632]]],[1591610267647,["Wahaha@DESKTOP-HTU2IVD",[[1,14632,"\n\n"]],[14632,14632],[14633,14633]]],[1591610268381,["Wahaha@DESKTOP-HTU2IVD",[[1,14634,"\n"]],[14633,14633],[14634,14634]]],[1591610271059,["Wahaha@DESKTOP-HTU2IVD",[[-1,14634,"\n"],[1,14635,"@"]],[14634,14634],[14635,14635]]],[1591610271348,["Wahaha@DESKTOP-HTU2IVD",[[1,14635,"@"]],[14635,14635],[14636,14636]]],[1591610271865,["Wahaha@DESKTOP-HTU2IVD",[[-1,14635,"@"]],[14636,14636],[14635,14635]]],[1591610272083,["Wahaha@DESKTOP-HTU2IVD",[[-1,14634,"@"],[1,14635,"\n"]],[14635,14635],[14634,14634]]],[1591610273235,["Wahaha@DESKTOP-HTU2IVD",[[-1,14634,"\n"],[1,14635,"#"]],[14634,14634],[14635,14635]]],[1591610280107,["Wahaha@DESKTOP-HTU2IVD",[[1,14635,"## 对象拷贝"]],[14635,14635],[14642,14642]]],[1591610281006,["Wahaha@DESKTOP-HTU2IVD",[[1,14642,"\n\n"]],[14642,14642],[14643,14643]]],[1591610283528,["Wahaha@DESKTOP-HTU2IVD",[[-1,14643,"\n"],[1,14644,"6"]],[14643,14643],[14644,14644]]],[1591610284593,["Wahaha@DESKTOP-HTU2IVD",[[1,14644,"1 。"]],[14644,14644],[14647,14647]]],[1591610285259,["Wahaha@DESKTOP-HTU2IVD",[[-1,14645," 。"]],[14647,14647],[14645,14645]]],[1591610290631,["Wahaha@DESKTOP-HTU2IVD",[[1,14645,". weis"]],[14645,14645],[14651,14651]]],[1591610291607,["Wahaha@DESKTOP-HTU2IVD",[[-1,14647,"weis"]],[14651,14651],[14647,14647]]],[1591610296467,["Wahaha@DESKTOP-HTU2IVD",[[1,14647,"为什么使用克隆\n62. "]],[14647,14647],[14659,14659]]],[1591610296919,["Wahaha@DESKTOP-HTU2IVD",[[-1,14655,"62. "],[1,14659,"\n\n"]],[14659,14659],[14656,14656]]],[1591610361376,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13965,"\n"],[1,13966,"6"],[-1,14152,"."],[1,14153,"\n"],[-1,14363,"**"],[1,14365,"\n\n"],[-1,14380,"\n\n"],[1,14382,". "],[1,14393,"\n"],[-1,14400,"\n"],[1,14404,"\n"],[-1,14411,"\n"],[1,14415,"\n"],[-1,14422,"\n"],[1,14426,"\n"],[-1,14429," "],[1,14431," "],[-1,14440,"6"],[1,14472,"r"],[-1,14473,")"],[1,14488,")"],[-1,14505,")"],[-1,14559,"，"],[1,14560,")"]],[13125,13125],[14561,14561]]],[1591610361376,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13965,"\n"],[-1,13965,"6"],[1,14152,"."],[-1,14152,"\n"],[1,14363,"**"],[-1,14363,"\n\n"],[1,14380,"\n\n"],[-1,14380,". "],[-1,14393,"\n"],[1,14401,"\n"],[-1,14404,"\n"],[1,14412,"\n"],[-1,14415,"\n"],[1,14423,"\n"],[-1,14426,"\n"],[1,14430," "],[-1,14431," "],[1,14441,"6"],[-1,14472,"r"],[1,14474,")"],[-1,14488,")"],[1,14506,")"],[1,14559,"，"],[-1,14559,")"]],[14561,14561],[13125,13125]]],[1591610306834,["Wahaha@DESKTOP-HTU2IVD",[[1,14655,"相对一个对象惊醒"]],[14655,14655],[14663,14663]]],[1591610307912,["Wahaha@DESKTOP-HTU2IVD",[[-1,14661,"惊醒"]],[14663,14663],[14661,14661]]],[1591610361148,["Wahaha@DESKTOP-HTU2IVD",[[1,14661,"进行处理，又想保留原来的数据进行接下来的操作，就需要克隆，java语言中的克隆针对"]],[14661,14661],[14702,14702]]],[1591610413379,[null,[[-1,13125," "],[1,13142,"\n"],[-1,13143,"*"],[1,13172,"\n"],[-1,13173,"*"],[1,13197,"\n"],[-1,13965,"\n"],[1,13966,"6"],[-1,14152,"."],[1,14153,"\n"],[-1,14363,"**"],[1,14365,"\n\n"],[-1,14380,"\n\n"],[1,14382,". "],[1,14393,"\n"],[-1,14400,"\n"],[1,14404,"\n"],[-1,14411,"\n"],[1,14415,"\n"],[-1,14422,"\n"],[1,14426,"\n"],[-1,14429," "],[1,14431," "],[-1,14440,"6"],[1,14472,"r"],[-1,14473,")"],[1,14488,")"],[-1,14505,")"],[-1,14559,"，"],[1,14560,")"]],[13125,13125],[14561,14561]]],[1591610413379,[null,[[1,13125," "],[-1,13141,"\n"],[1,13143,"*"],[-1,13171,"\n"],[1,13173,"*"],[-1,13196,"\n"],[1,13965,"\n"],[-1,13965,"6"],[1,14152,"."],[-1,14152,"\n"],[1,14363,"**"],[-1,14363,"\n\n"],[1,14380,"\n\n"],[-1,14380,". "],[-1,14393,"\n"],[1,14401,"\n"],[-1,14404,"\n"],[1,14412,"\n"],[-1,14415,"\n"],[1,14423,"\n"],[-1,14426,"\n"],[1,14430," "],[-1,14431," "],[1,14441,"6"],[-1,14472,"r"],[1,14474,")"],[-1,14488,")"],[1,14506,")"],[1,14559,"，"],[-1,14559,")"]],[14561,14561],[13125,13125]]],[1591610376853,["Wahaha@DESKTOP-HTU2IVD",[[1,14702,"的是类的示例"]],[14702,14702],[14708,14708]]],[1591610377530,["Wahaha@DESKTOP-HTU2IVD",[[1,14710,"\n"]],[14708,14708],[14709,14709]]],[1591610378358,["Wahaha@DESKTOP-HTU2IVD",[[1,14711,"\n"]],[14709,14709],[14710,14710]]],[1591610380977,["Wahaha@DESKTOP-HTU2IVD",[[1,14710,"62. "]],[14710,14710],[14714,14714]]]],null,"Wahaha@DESKTOP-HTU2IVD"],["e3663511-6cab-482e-be5b-61ef816b7a3b",1591691653936,"\n# java面试题\n\n### 线程相关\n#### 1. 什么是进程\n进程是系统中正在运行的一个程序，程序一旦运行就是进程\n#### 2. 什么是线程\n是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务\n#### 3. 线程实现的方式\n  - 继承Thread类\n  - 实现runable接口\n  - 实现callable接口\n#### 4. Thread 类中的start() 和 run() 方法有什么区别?\n - start(): start方法来启动线程，真正实现了多线程运行，这时无需等待run方法体中的代码执行完毕而直接继续执行后续的代码。通过调用Thread类的 start()方法来启动一个线程，这时此线程处于就绪（可运行）状态，并没有运行，一旦得到cpu时间片，就开始执行run()方法，这里的run()方法 称为线程体，它包含了要执行的这个线程的内容，Run方法运行结束，此线程随即终止。\n - run(): run()方法只是类的一个普通方法而已，如果直接调用Run方法，程序中依然只有主线程这一个线程，其程序执行路径还是只有一条，还是要顺序执行，还是要等待run方法体执行完毕后才可继续执行下面的代码，这样就没有达到写线程的目的。\n - 调用start方法方可启动线程，而run方法只是thread类中的一个普通方法调用，还是在主线程里执行。\n#### 5. 线程的五种状态\n - 新建状态(NEW) 新建一个了线程\n - 可运行状态(RUNNABLE) 线程对象创建后，其他线程调用此对象的start()方法，该状态的线程位于可运行线程池中，等待被线程调度选中，获取cpu 的使用权 。\n - 运行(RUNNING)：可运行状态(runnable)的线程获得了cpu 时间片（timeslice）执行程序代码\n - 阻塞(BLOCKED)：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种：\n   + 等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。\n   + 同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。\n   + 其他阻塞：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。\n  - 死亡(DEAD)：线程run()、main() 方法执行结束，或者因异常退出了run()方法，则该线程结束生命周期。死亡的线程不可再次复生\n####  6. 如何知道代码段被哪个线程调用\n```\nSystem.out.println(Thread.currentThread().getName());\n```\n#### 7. sleep()方法\n方法sleep()的作用是在指定的毫秒数内让当前的“正在执行的线程”休眠（暂停执行\n#### 8. 停止线程\n1. run方法执行完成，自然终止。\n2. stop()方法，suspend()以及resume()都是过期作废方法，使用它们结果不可预期。\n\n大多数停止一个线程的操作使用Thread.interrupt()等于说给线程打一个停止的标记, 此方法不回去终止一个正\n在运行的线程，需要加入一个判断才能可以完成线程的停止\n#### 9. interrupted 和 isInterrupted\n\ninterrupted : 判断当前线程是否已经中断,会清除状态。\n\nisInterrupted ：判断线程是否已经中断，不会清除状态。\n\n#### 10.yield\n放弃当前cpu资源，将它让给其他的任务占用cpu执行时间。但放弃的时间不确定，有可能刚刚放弃，马上又获得cpu时间片\n\n#### 11.设置线程上下文类加载器\n1.  获取线程上下文类加载器\n```\nSystem.out.println(Thread.currentThread().getName());\n```\n2. ​ 设置线程类加载器（可以打破Java类加载器的父类委托机制）\n```\npublic  void  setContextClassLoader(ClassLoader cl)\n```\n\n#### 12. join\n join是指把指定的线程加入到当前线程，比如join某个线程a,会让当前线程b进入等待,直到a的生命周期结束，此期间b线程是处于blocked状态。\n\n#### 13. 什么是synchronized?\nsynchronized关键字可以时间一个简单的策略来防止线程干扰和内存一致性错误，如果一个对象是对多个线程可见的，那么对该对想的所有读写都将通过同步的方式来进行。\n\n#### 14. synchronized包括哪两个jvm重要的指令？\n monitor enter 和 monitor exit\n \n#### 15. synchronized关键字用法?\n 可以用于对代码块或方法的修饰\n \n#### 16. synchronized锁的是什么?\n普通同步方法 —————> 锁的是当前实力对象。\n\n静态同步方法—————> 锁的是当前类的Class对象。\n\n同步方法块 —————> 锁的是synchonized括号里配置的对象。\n\n#### 17. volatile关键字\nvolatile 是轻量级的synchronized,它在多处理器开发中保证了共享变量的“可见性“。\n\nJava允许线程访问共享变量，为了保证共享变量能准确和一致的更新，线程应该确保排它锁单独获得这个变量。如果一个字段被声明为volatile,Java线程内存模型所有线程看到这个变量的值是一致的。\n\n#### 18. 等待/通知机制\n一个线程修改了一个对象的值，而另一个线程感知到了变化，然后进行相应的操作。\n 等待\n```\n  synchronized(obj) { \n       while(条件不满足) { \n             obj.wait();\n           } \n         执行对应逻辑 \n  }\n```\n\n通知\n```\n  synchronized(obj){\n        改变条件\n            obj.notifyAll();\n\n  }\n```\n\n#### 19. notify\nnotify()也是Object类的通用方法，也要在同步方法或同步代码块内调用，该方法用来通知哪些可能灯光对象的对象锁的其他线程，如果有多个线程等待，则随机挑选出其中一个呈wait状态的线程，对其发出 通知 notify，并让它等待获取该对象的对象锁。\n\n#### 20. notify/notifyAll\nnotify等于说将等待队列中的一个线程移动到同步队列中，而notifyAll是将等待队列中的所有线程全部移动到同步队列中。\n\n#### 21.ThreadLocal\n\n主要解决每一个线程想绑定自己的值，存放线程的私有数据。\n  - ThreadLocal使用\n 获取当前的线程的值通过get(),设置set(T) 方式来设置值。\n```\n  public class XKThreadLocal {\n  \n      public static ThreadLocal threadLocal = new ThreadLocal();\n  \n      public static void main(String[] args) {\n          if (threadLocal.get() == null) {\n              System.out.println(\"未设置过值\");\n              threadLocal.set(\"线程学习\");\n          }\n          System.out.println(threadLocal.get());\n      }\n  \n  }\n```\n  print：\n```\n  未设置过值\n  线程学习\n```\n\n -  解决get()返回null问题\n通过继承重写initialValue()方法即可。\n```\n  public class ThreadLocalExt extends ThreadLocal{\n  \n      static ThreadLocalExt threadLocalExt = new ThreadLocalExt();\n  \n      @Override\n      protected Object initialValue() {\n          return \"线程学习\";\n      }\n  \n      public static void main(String[] args) {\n          System.out.println(threadLocalExt.get());\n      }\n  }\n```\nprint:\n```\n  线程学习\n```\n\n \n#### 22.lock接口\n锁可以防止多个线程同时共享资源。Java5前程序是靠synchronized实现锁功能。Java5之后，并发包新增Lock接口来实现锁功能。\n\n#### 23.lock接口提供synchronized不具备的主要特性\n\n特性|描述\n---|---\n  尝试非阻塞地获取锁 |   当前线程尝试获取锁，如果这一时刻锁没有被其他线程获取到，则成功获取并持有该锁\n 能被中断的获取锁|   与synchronized不同，获取到锁的线程能够响应中断，当获取到锁的线程被中断时，中断异常将会抛出，同时锁会被释放\n 超时获取锁|   在指定时间内获取锁，如果截止时间仍没有获取到锁，则返回\n   \n#### 24.重入锁RenntrantLock \n\n1. 支持重进入的锁，它表示该锁能够支持一个线程对资源的重复加锁。除此之外，该锁的还支持获取锁时的公平和非公平性选择。\n\n2. 重进入是指任意线程在获取到锁之后能够再次获锁而不被锁阻塞。\n该特性主要解决以下两个问题：\n - 锁需要去识别获取锁的线程是否为当前占据锁的线程，如果是则再次成功获取。\n - 所得最终释放。线程重复n次是获取了锁，随后在第n次释放该锁后，其他线程能够获取到该锁。\n\n3. RenntrantLock 默认为非公平锁\n4. 公平性与否针对获取锁来说的，如果一个锁是公平的，那么锁的获取顺序就应该符合请求的绝对时间顺序，也就是FIFO。\n\n#### 25. 读写锁\n读写锁允许同一时刻多个线程访问，但是写线程和其他写线程均被阻塞。读写锁维护一个读锁一个写锁，读写分离，并发性能得到提高\njava提供实现读写锁的实现类是ReentrantReadWriteLock.\n\n#### 26.Java并发容器\n1. concurrenthashmap, copyonwritearraylist, CopyOnWriteArraySet, ConcurrentLinkedQueue\n2. ConcurrentSkipListMap、ConcurrentSkipListSet、ArrayBlockingQueue、\n3. LinkedBlockingQueue、LinkedBlockingDeque、PriorityBlockingQueue、SynchronousQueue、LinkedTransferQueue、DelayQueue\n\n#### 27. 什么是阻塞队列\n- 阻塞队列是一个支持两个附加操作的队列,这两个附加操作支持阻塞的插入和移除方法\n 1. 支持阻塞的插入方法：当队列满时，队列会阻塞插入元素的线程，直到队列不满。\n 2. 支持阻塞的一处方法：当队列为空时，获取元素的线程会等待队列变为非空\n- 阻塞队列的常用应用场景 ：\n常用于生产者和消费者模式中，生产者是往队列中添加元素的线程，消费者是从队列中提取元素的线程。阻塞队列正好是生产者存放，消费者来获取的容器\n- java里的阻塞队列\nArrayBlockingQueue： 数组结构组成的 |有界阻塞队列 \nLinkedBlockingQueue： 链表结构组成的|有界阻塞队列 \nPriorityBlockingQueue: 支持优先级排序|无界阻塞队列 \nDelayQueue： 优先级队列实现|无界阻塞队列 \nSynchronousQueue： 不存储元素| 阻塞队列 \nLinkedTransferQueue： 链表结构组成|无界阻塞队列 \nLinkedBlockingDeque： 链表结构组成|双向阻塞队列\n\n#### 28. 为什么使用线程池\n1. 降低系统消耗: 重复利用已经创建的线程降低线程创建和销毁造成的资源损耗\n2. 提高响应速度：当任务到达时，任务不需要等待线程的创建就可以立即执行\n3. 提供线程的可管理性：可以通过设置合理分配、调优、监控\n\n#### 29. 线程池的工作流程\n1. 判断核心线程池的线程是否都在执行任务，否--->创建一个新的线程来执行任务。是--->走下个流程\n2. 判断工作队列是否已满: 否--->新任务储存到这个工作队列中， 是---> 走下个流程\n3. 判断线程池里的线程是否都在工作状态: 否--->创建一个新的线程来执行任务。是--->走下个流程\n4. 按照设置的策略来处理无法执行的任务\n\n#### 30. 创建线程池参数有哪些\n\n```\npublic ThreadPoolExecutor( int corePoolSize, \n                           int maximumPoolSize, \n                           long keepAliveTime, TimeUnit unit,\n                           BlockingQueue<Runnable> workQueue, \n                           ThreadFactory threadFactory, \n                           RejectedExecutionHandler handler)\n\n```\n\n1. corePoolSize:核心线程池大小，当提交一个任务时，线程池会创建一个线程来执行任务，即使其他空闲的核心线程能够执行新任务也会创建，等待需要执行的任务数大于线程核心大小就不会继续创建。\n\n2. maximumPoolSize:线程池最大数，允许创建的最大线程数，如果队列满了，并且已经创建的线程数小于最大线程数，则会创建新的线程执行任务。如果是无界队列，这个参数基本没用。\n\n3. keepAliveTime: 线程保持活动时间，线程池工作线程空闲后，保持存活的时间，所以如果任务很多，并且每个任务执行时间较短，可以调大时间，提高线程利用率。\n\n4. unit: 线程保持活动时间单位，天（DAYS)、小时(HOURS)、分钟(MINUTES、毫秒MILLISECONDS)、微秒(MICROSECONDS)、纳秒(NANOSECONDS)\n\n5. workQueue: 任务队列，保存等待执行的任务的阻塞队列。\n一般来说可以选择如下阻塞队列：\nArrayBlockingQueue:基于数组的有界阻塞队列。\nLinkedBlockingQueue:基于链表的阻塞队列。\nSynchronizedQueue:一个不存储元素的阻塞队列。\nPriorityBlockingQueue:一个具有优先级的阻塞队列。\n\n6. threadFactory：设置创建线程的工厂，可以通过线程工厂给每个创建出来的线程设置更有意义的名字。\n\n7. handler: 饱和策略也叫拒绝策略。当队列和线程池都满了，即达到饱和状态。所以需要采取策略来处理新的任务。默认策略是AbortPolicy。\n AbortPolicy:直接抛出异常。\nCallerRunsPolicy: 调用者所在的线程来运行任务。\nDiscardOldestPolicy:丢弃队列里最近的一个任务，并执行当前任务。\nDiscardPolicy:不处理，直接丢掉。\n当然可以根据自己的应用场景，实现RejectedExecutionHandler接口自定义策略。\n\n#### 31.线程池提交的方式\nexcute(),  submit()\nexcute(): 无返回值，所以无法判断任务是否成功\nsubmit()：用于提交需要有返回值的任务，线程池返回一个future类型对象，通过future对象可以判断任务是否执行成功，并且通过future的get()来获取返回值，get()方法会阻塞当前线程知道任务完成。get(long timeout,TimeUnit unit)可以设置超市时间。\n\n#### 32. 线程池关闭方式\n可以通过shutdown(0或shutdownnow()来关闭线程池。他们的工作原理是通过遍历线程池的工作线程，然后逐个调用线程的interrupt来中断线程，所以无法响应终端的任务可能永远停止。\nshutdownnow首先将线程池状态设置为stop，然后尝试停止所有正在执行或者暂停的线程，并返回等待执行的列表\nshutdown只是将线程池的状态设置为shutdown状态，然后终端所有没有正在执行任务的线程。\n\n只要调用两者之一，isShutdown就会返回true,当所有任务都已关闭，isTerminaed就会返回true。\n\n一般来说调用shutdown方法来关闭线程池，如果任务不一定要执行完，可以直接调用shutdownNow方法。\n\n\n#### 33. Excutor\n1. 从JDK1.5开始，把工作单元和执行机制分开。工作单元包括Runable和callable，而执行机制有Executor框架提供。\n2. executor框架的主要成员\n - ThreadPoolExecutor :可以通过工厂类Executors来创建。\n - 可以创建3种类型的ThreadPoolExecutor：SingleThreadExecutor、FixedThreadPool、CachedThreadPool。\n- ScheduledThreadPoolExecutor ：可以通过工厂类Executors来创建。\n\n- 可以创建2中类型的ScheduledThreadPoolExecutor：ScheduledThreadPoolExecutor、SingleThreadScheduledExecutor\n\n- Future接口:Future和实现Future接口的FutureTask类来表示异步计算的结果。\n\n- Runnable和Callable:它们的接口实现类都可以被ThreadPoolExecutor或ScheduledThreadPoolExecutor执行。Runnable不能返回结果，Callable可以返回结果。\n\n\n### java基础\n\n#### 1. JDK 和 JRE 有什么区别\n- JDK：Java Development Kit 的简称，java 开发工具包，提供了 java 的开发环境和运行环境。\n- JRE：Java Runtime Environment 的简称，java 运行环境，为 java 的运行提供了所需环境。\n\n具体来说 JDK 其实包含了 JRE，同时还包含了编译 java 源码的编译器 javac，还包含了很多 java 程序调试和分析的工具。简单来说：如果你需要运行 java 程序，只需安装 JRE 就可以了，如果你需要编写 java 程序，需要安装 JDK。\n\n#### 2. == 和equals\n1. == 对于基本类型来说是值比较，对于引用类型来说是比较的是引用；\n2. equals 默认情况下是引用比较，只是很多类重新了 equals 方法，比如 String、Integer 等把它变成了值比较，所以一般情况下 equals 比较的是值是否相等。\n\n#### 3. 两个对象的hashcode值相同，则equals的一定为true 对吗？\n不对，，因为在散列表中，hashCode()相等即两个键值对的哈希值相等，然而哈希值相等，并不一定能得出键值对相等。\n\n4. final 在 java 中有什么作用？\n\n*   final 修饰的类叫最终类，该类不能被继承。\n*   final 修饰的方法不能被重写。\n*   final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。\n\n5.  java 中的 Math.round(-1.5) 等于多少\n等于 -1，因为在数轴上取值时，中间值（0.5）向右取整，所以正 0.5 是往上取整，负 0.5 是直接舍弃。\n\n6. String 属于基础的数据类型吗？\nString 不属于基础类型，基础类型有 8 种：byte、boolean、char、short、int、float、long、double，而 String 属于对象。\n\n7. java 中操作字符串都有哪些类？它们之间有什么区别？\n- 操作字符串的类有：String、StringBuffer、StringBuilder。\n- String 和 StringBuffer、StringBuilder 的区别在于 String 声明的是不可变的对象，每次操作都会生成新的 String 对象，然后将指针指向新的 String 对象，而 StringBuffer、StringBuilder 可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下最好不要使用 String。\n- StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以在单线程环境下推荐使用 StringBuilder，多线程环境下推荐使用 StringBuffer。\n\n8. String str=\"i\"与 String str=new String(\"i\")一样吗？\n不一样，因为内存的分配方式不一样。String str=\"i\"的方式，java 虚拟机会将其分配到常量池中；而 String str=new String(\"i\") 则会被分到堆内存中。\n\n9. 如何将字符串反转\n使用stringbuilder 或者stringbuffer的reverse()方法\n\n10. string类的常用方法\n-   indexOf()：返回指定字符的索引。\n-   charAt()：返回指定索引处的字符。\n-   replace()：字符串替换。\n-   trim()：去除字符串两端空白。\n-   split()：分割字符串，返回一个分割后的字符串数组。\n-   getBytes()：返回字符串的 byte 类型数组。\n-   length()：返回字符串长度。\n-   toLowerCase()：将字符串转成小写字母。\n-   toUpperCase()：将字符串转成大写字符。\n-   substring()：截取字符串。\n-   equals()：字符串比较。\n\n11. 抽象类必须要有抽象方法吗？\n不需要\n\n12. 普通类和抽象类的区别\n- 普通类不能包含抽象方法\n- 抽象类不能实例化\n\n13. 抽象类可以用final修饰吗？\n不能，抽象类本来就是用来被继承的\n\n14. 接口和抽象类有什么区别\n- 抽象类的子类用extend来继承， 接口必须用implements来实现接口\n- 抽象类可以有构造函数， 接口不可以\n- main 抽象类可以有main方法， 接口不可以\n- 类可以实现多个接口，但只能继承一个抽象类 \n- 接口的方法默认使用public, 抽象类可以使用任意修饰符\n\n15. java中流分几种\n- 按功能分 ： 输入流、 输出流\n- 按类型分： 字节流、 字符流\n字节流和字符流的区别： 字节流按8位为传输单位输入输出数据，字符流按16位为输出输入单位\n\n16. BIO NIO AIO 的区别\n- BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。\n- NIO：New IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。\n- AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。\n\n17. file的常用方法\n-   Files.exists()：检测文件路径是否存在。\n-   Files.createFile()：创建文件。\n-   Files.createDirectory()：创建文件夹。\n-   Files.delete()：删除一个文件或目录。\n-   Files.copy()：复制文件。\n-   Files.move()：移动文件。\n-   Files.size()：查看文件个数。\n-   Files.read()：读取文件。\n-   Files.write()：写入文件。\n\n### 集合\n\n\n18. java 的容器有哪些\n![java容器](https://raw.githubusercontent.com/FuLaMeiEr/java-learn-md/master/report/picture/java%E5%AE%B9%E5%99%A8.png)\n\n19. collection和collections有什么区别\n- java.util.collection 是一个集合接口。他提供了对集合对象进行基本操作的通用接口方法。Conllection 在Java中类库中有很多的具体的实现。Collection接口的意义就是为各种具体的集合提供统一操作方式，其直接继承接口的有List和set.\n- Collections则是集合类的一个工具类。其中提供了一系列的静态方法，用于对集合中元素的排序、搜索以及线程安全的各种啊哦做\n\n20. List、Map、Set的区别\n![List、Map、Set的区别](https://github.com/FuLaMeiEr/java-learn-md/blob/master/report/picture/list%E3%80%81set%E3%80%81map%E7%9A%84%E5%8C%BA%E5%88%AB.png)\n\n21. HashMap 和 Hashtable 有什么区别？\n- hashMap去掉了HashTable 的contains方法，但是加上了containsValue（）和containsKey（）方法。\n- hashTable同步的，而HashMap是非同步的，效率上逼hashTable要高。\n- hashMap允许空键值，而hashTable不允许。\n\n22. 如何决定使用 HashMap 还是 TreeMap？\n对于在Map中插入、删除和定位元素这类操作，HashMap是最好的选择。然而，假如你需要对一个有序的key集合进行遍历，TreeMap是更好的选择。基于你的collection的大小，也许向HashMap中添加元素会更快，将map换为TreeMap进行有序key的遍历。\n23. HashMap 的实现原理\n- HashMap概述：HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。 \n\n- HashMap的数据结构：在java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，HashMap也不例外。HashMap实际上是一个“链表散列”的数据结构，即数组和链表的结合体。\n\n- 当我们往Hashmap中put元素时,首先根据key的hashcode重新计算hash值,根绝hash值得到这个元素在数组中的位置(下标),如果该数组在该位置上已经存放了其他元素,那么在这个位置上的元素将以链表的形式存放,新加入的放在链头,最先加入的放入链尾.如果数组中该位置没有元素,就直接将该元素放到数组的该位置上。\n\n- 需要注意Jdk 1.8中对HashMap的实现做了优化,当链表中的节点数据超过八个之后,该链表会转为红黑树来提高查询效率,从原来的O(n)到O(logn)\n24. HashSet的实现原理\n- HashSet底层由HashMap实现\n- HashSet的值存放于HashMap的key上\n- HashMap的value统一为PRESENT\n\n25. ArrayList 和 LinkedList 的区别是什么？\n最明显的区别是 ArrrayList底层的数据结构是数组，支持随机访问，而 LinkedList 的底层数据结构是双向循环链表，不支持随机访问。使用下标访问一个元素，ArrayList 的时间复杂度是 O(1)，而 LinkedList 是 O(n)。\n\n26. 如何实现数组和 List 之间的转换\n- List转化为数组：调用ArrayList的toArray方法\n- 数组转化为List: 调用Arrays的asList方法\n\n27. ArrayList 和 Vector 的区别是什么\n- Vector是同步的，而ArrayList不是。然而，如果你寻求在迭代的时候对列表进行改变，你应该使用CopyOnWriteArrayList。 \n- ArrayList比Vector快，它因为有同步，不会过载。 \n- ArrayList更加通用，因为我们可以使用Collections工具类轻易地获取同步列表和只读列表。\n\n28. Array 和 ArrayList 有何区别\n\n- Array可以容纳基本类型和对象，而ArrayList只能容纳对象\n- Array是指定大小的，而ArrayList是固定大小\n- Array没有提供ArrayList那么多功能，比如addAll、removeAll和iterator等。\n\n29. 在 Queue 中 poll()和 remove()有什么区别\npoll() 和 remove() 都是从队列中取出一个元素，但是 poll() 在获取元素失败的时候会返回空，但是 remove() 失败的时候会抛出异常。\n\n30. 哪些集合类是线程安全的\n- vector：就比arraylist多了个同步化机制（线程安全），因为效率较低，现在已经不太建议使用。在web应用中，特别是前台页面，往往效率（页面响应速度）是优先考虑的。\n- statck：堆栈类，先进后出。\n- hashtable：就比hashmap多了个线程安全。\n- enumeration：枚举，相当于迭代器。\n\n31. 迭代器 Iterator 是什么\n迭代器是一种设计模式，它是一个对象，它可以遍历并选择序列中的对象，而开发人员不需要了解该序列的底层结构。迭代器通常被称为“轻量级”对象，因为创建它的代价小。\n\n32. Iterator 怎么使用？有什么特点\n- Java中的Iterator功能比较简单，并且只能单向移动：\n(1) 使用方法iterator()要求容器返回一个Iterator。第一次调用Iterator的next()方法时，它返回序列的第一个元素。注意：iterator()方法是java.lang.Iterable接口,被Collection继承。\n(2) 使用next()获得序列中的下一个元素。\n(3) 使用hasNext()检查序列中是否还有元素。\n(4) 使用remove()将迭代器新返回的元素删除。\n- Iterator是Java迭代器最简单的实现，为List设计的ListIterator具有更多的功能，它可以从两个方向遍历List，也可以从List中插入和删除元素。\n\n33. Iterator 和 ListIterator 有什么区别\n- Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。 \n- Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。 \n- ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。\n\n### 反射\n34. 什么是反射\n反射主要是指程序可以访问、检测和修改它本身状态或行为的一种能力\n\n35. java反射\n在java运行环境中，对于任何一个类，都能知道这个了类的属性和方法，对于一个对象，可以调用其方法和属性\n\n36. 什么是java序列化\n- 简单说就是为了保存在内存中的各种对象的状态（也就是实例变量，不是方法），并且可以把保存的对象状态再读出来。虽然你可以用你自己的各种各样的方法来保存object states，但是Java给你提供一种应该比你自己好的保存对象状态的机制，那就是序列化。\n\n- 什么情况需要序列化\n    1. 当你想把内存中的对象状态保存到一个文件中或者数据库中\n    2. 当你想用套接字在网络上传送对象的时候\n    3. 当你想通过RMI 传输对象的时候\n\n59. 动态代理是什么？有哪些应用？\n\n- 动态代理：\n当想要给实现某个接口类中的方法，加一些额外的处理。比如加日志、事务等。可以给这个类创建一个代理，顾名思义就是创建一个新的类，这个类不仅包括原来类方法的功能，而且在原来的基础上添加了额外处理的新类，这个代理类并不是定义好的而是自动生成的。具有解耦意思、灵活扩展性强\n\n- 动态代理的应用\n    1. Spring中的AOP\n    2. 加事务\n    3. 加权限\n    4. 加日志\n\n60. 怎么实现动态代理\n首先必须定义一个接口，还要有一个InvcationHandler(将实现接口的类的对象传递给它)处理类。再加一个工具类Proxy(习惯性的称之为代理类，因为调用他的nweInstance()可以产生代理对象，其实就是一个代理对象的工具类)。利用到InvocationHandler,拼接代理类源代码，将其编译成代理类的二进制代码。利用加载器加载，并将其实例化产生代理对象，最后返回。\n\n### 对象拷贝\n61. 为什么使用克隆\n相对一个对象进行处理，又想保留原来的数据进行接下来的操作，就需要克隆，java语言中的克隆针对的是类的示例\n\n62. \n\n",[[1591691634310,["Wahaha@DESKTOP-HTU2IVD",[[-1,14710,"62. "]],[14710,14714],[14710,14710]]],[1591691638552,["Wahaha@DESKTOP-HTU2IVD",[[1,14710,"### javaw"]],[14710,14710],[14719,14719]]],[1591691639428,["Wahaha@DESKTOP-HTU2IVD",[[-1,14718,"w"]],[14719,14719],[14718,14718]]],[1591691639896,["Wahaha@DESKTOP-HTU2IVD",[[1,14718,"E"]],[14718,14718],[14719,14719]]],[1591691640601,["Wahaha@DESKTOP-HTU2IVD",[[-1,14718,"E"]],[14719,14719],[14718,14718]]],[1591691641339,["Wahaha@DESKTOP-HTU2IVD",[[1,14718,"w"]],[14718,14718],[14719,14719]]],[1591691642292,["Wahaha@DESKTOP-HTU2IVD",[[-1,14718,"w"]],[14719,14719],[14718,14718]]],[1591691643990,["Wahaha@DESKTOP-HTU2IVD",[[1,14718,"Web"]],[14718,14718],[14721,14721]]],[1591691644637,["Wahaha@DESKTOP-HTU2IVD",[[1,14723,"\n"]],[14721,14721],[14722,14722]]],[1591691682594,["Wahaha@DESKTOP-HTU2IVD",[[-1,14723,"\n"],[1,14724,"6"]],[14723,14723],[14724,14724]]],[1591691684061,["Wahaha@DESKTOP-HTU2IVD",[[1,14724,"2. "]],[14724,14724],[14727,14727]]],[1591691744728,["Wahaha@DESKTOP-HTU2IVD",[[1,14727,"jsp和servle"]],[14727,14727],[14737,14737]]],[1591691745460,["Wahaha@DESKTOP-HTU2IVD",[[-1,14735,"le"]],[14737,14737],[14735,14735]]],[1591691755799,["Wahaha@DESKTOP-HTU2IVD",[[1,14735,"let有什么区别\n63. "]],[14735,14735],[14748,14748]]],[1591691756439,["Wahaha@DESKTOP-HTU2IVD",[[-1,14744,"63. "],[1,14748,"\n\n"]],[14748,14748],[14745,14745]]],[1591691768236,["Wahaha@DESKTOP-HTU2IVD",[[-1,14745,"\n"]],[14745,14745],[14744,14744]]],[1591691768859,["Wahaha@DESKTOP-HTU2IVD",[[-1,14744,"\n"],[1,14745,"1"]],[14744,14744],[14745,14745]]],[1591691769605,["Wahaha@DESKTOP-HTU2IVD",[[-1,14744,"1"],[1,14745,"\n"]],[14745,14745],[14744,14744]]],[1591691771296,["Wahaha@DESKTOP-HTU2IVD",[[1,14744,"  1. "]],[14744,14744],[14749,14749]]],[1591691775620,["Wahaha@DESKTOP-HTU2IVD",[[-1,14744,"  1. "]],[14749,14749],[14744,14744]]],[1591691776419,["Wahaha@DESKTOP-HTU2IVD",[[-1,14744,"\n"]],[14744,14744],[14743,14743]]],[1591691777470,["Wahaha@DESKTOP-HTU2IVD",[[1,14744,"63. \n"]],[14743,14743],[14748,14748]]],[1591691778742,["Wahaha@DESKTOP-HTU2IVD",[[-1,14744,"63. "]],[14748,14748],[14744,14744]]],[1591691779410,["Wahaha@DESKTOP-HTU2IVD",[[-1,14744,"\n"],[1,14745," "]],[14744,14744],[14745,14745]]],[1591691781598,["Wahaha@DESKTOP-HTU2IVD",[[1,14745," - "]],[14745,14745],[14748,14748]]],[1591691783240,["Wahaha@DESKTOP-HTU2IVD",[[-1,14746,"- "]],[14748,14748],[14746,14746]]],[1591691784262,["Wahaha@DESKTOP-HTU2IVD",[[1,14746,"1 "]],[14746,14746],[14748,14748]]],[1591691785325,["Wahaha@DESKTOP-HTU2IVD",[[-1,14747," "]],[14748,14748],[14747,14747]]],[1591691786444,["Wahaha@DESKTOP-HTU2IVD",[[1,14747,"。 "]],[14747,14747],[14749,14749]]],[1591691788356,["Wahaha@DESKTOP-HTU2IVD",[[-1,14747,"。 "]],[14749,14749],[14747,14747]]],[1591691789281,["Wahaha@DESKTOP-HTU2IVD",[[1,14747,"."]],[14747,14747],[14748,14748]]],[1591691791982,["Wahaha@DESKTOP-HTU2IVD",[[-1,14746,"1."]],[14748,14748],[14746,14746]]],[1591691794656,["Wahaha@DESKTOP-HTU2IVD",[[1,14746,"1. "]],[14746,14746],[14749,14749]]],[1591691797151,["Wahaha@DESKTOP-HTU2IVD",[[-1,14745," 1. "]],[14749,14749],[14745,14745]]],[1591691800552,["Wahaha@DESKTOP-HTU2IVD",[[1,14745,"      1. "]],[14745,14745],[14754,14754]]],[1591691809323,["Wahaha@DESKTOP-HTU2IVD",[[-1,14747,"    "]],[14751,14751],[14747,14747]]],[1591691811339,["Wahaha@DESKTOP-HTU2IVD",[[1,14747,"  "]],[14747,14747],[14749,14749]]],[1591691832497,["Wahaha@DESKTOP-HTU2IVD",[[1,14752,"jsp经变异"]],[14752,14752],[14758,14758]]],[1591691844215,["Wahaha@DESKTOP-HTU2IVD",[[-1,14756,"变异"]],[14758,14758],[14756,14756]]],[1591691864827,["Wahaha@DESKTOP-HTU2IVD",[[1,14756,"编译后就成了Servlet()"]],[14756,14756],[14771,14771]]],[1591691867938,["Wahaha@DESKTOP-HTU2IVD",[[1,14770,"jspde"]],[14770,14770],[14775,14775]]],[1591691868490,["Wahaha@DESKTOP-HTU2IVD",[[-1,14773,"de"]],[14775,14775],[14773,14773]]],[1591691879315,["Wahaha@DESKTOP-HTU2IVD",[[1,14773,"的本质就是servlet,ja"]],[14773,14773],[14788,14788]]],[1591691879795,["Wahaha@DESKTOP-HTU2IVD",[[-1,14787,"a"]],[14788,14788],[14787,14787]]],[1591691880426,["Wahaha@DESKTOP-HTU2IVD",[[1,14787,"cm"]],[14787,14787],[14789,14789]]],[1591691881109,["Wahaha@DESKTOP-HTU2IVD",[[-1,14787,"cm"]],[14789,14789],[14787,14787]]],[1591691892595,["Wahaha@DESKTOP-HTU2IVD",[[1,14787,"vm只能之别java编译类"]],[14787,14787],[14800,14800]]],[1591691897761,["Wahaha@DESKTOP-HTU2IVD",[[-1,14797,"编译"]],[14799,14799],[14797,14797]]],[1591691898678,["Wahaha@DESKTOP-HTU2IVD",[[1,14797,"的"]],[14797,14797],[14798,14798]]],[1591691940993,["Wahaha@DESKTOP-HTU2IVD",[[1,14799,"，不能识别jsp代码，web容器将jspd"]],[14799,14799],[14820,14820]]],[1591691941912,["Wahaha@DESKTOP-HTU2IVD",[[-1,14819,"d"]],[14820,14820],[14819,14819]]],[1591691943889,["Wahaha@DESKTOP-HTU2IVD",[[1,14819,"diamante"]],[14819,14819],[14827,14827]]],[1591691947496,["Wahaha@DESKTOP-HTU2IVD",[[-1,14819,"diamante"]],[14827,14827],[14819,14819]]],[1591691949900,["Wahaha@DESKTOP-HTU2IVD",[[1,14819,"代码"]],[14819,14819],[14821,14821]]],[1591691956610,["Wahaha@DESKTOP-HTU2IVD",[[1,14821,"编程橙java"]],[14821,14821],[14828,14828]]],[1591691959712,["Wahaha@DESKTOP-HTU2IVD",[[-1,14821,"编程橙java"]],[14828,14828],[14821,14821]]],[1591691962263,["Wahaha@DESKTOP-HTU2IVD",[[1,14821,"bianyicheng"]],[14821,14821],[14832,14832]]],[1591691965336,["Wahaha@DESKTOP-HTU2IVD",[[-1,14821,"bianyicheng"]],[14832,14832],[14821,14821]]],[1591691977621,["Wahaha@DESKTOP-HTU2IVD",[[1,14821,"编译成jvm能识别的jaa"]],[14821,14821],[14834,14834]]],[1591691978028,["Wahaha@DESKTOP-HTU2IVD",[[-1,14833,"a"]],[14834,14834],[14833,14833]]],[1591691980184,["Wahaha@DESKTOP-HTU2IVD",[[1,14833,"va类"]],[14833,14833],[14836,14836]]],[1591691996976,["Wahaha@DESKTOP-HTU2IVD",[[1,14837,"\n     2. jsp更擅长变现"]],[14837,14837],[14854,14854]]],[1591692005583,["Wahaha@DESKTOP-HTU2IVD",[[-1,14852,"变现"]],[14854,14854],[14852,14852]]],[1591692010408,["Wahaha@DESKTOP-HTU2IVD",[[1,14852,"表现欲"]],[14852,14852],[14855,14855]]],[1591692012388,["Wahaha@DESKTOP-HTU2IVD",[[-1,14854,"欲"]],[14855,14855],[14854,14854]]],[1591692013683,["Wahaha@DESKTOP-HTU2IVD",[[1,14854,"与"]],[14854,14854],[14855,14855]]],[1591692014125,["Wahaha@DESKTOP-HTU2IVD",[[-1,14854,"与"]],[14855,14855],[14854,14854]]],[1591692041156,["Wahaha@DESKTOP-HTU2IVD",[[1,14854,"于页面显示，servlet更擅长逻辑控制\n     3. Sek="]],[14854,14854],[14887,14887]]],[1591692042445,["Wahaha@DESKTOP-HTU2IVD",[[-1,14884,"ek="]],[14887,14887],[14884,14884]]],[1591692071966,["Wahaha@DESKTOP-HTU2IVD",[[1,14884,"ervlet没有内置对象，Jsp中的内置对象都是必须通过HttpServletRequest对象，HttpServletResponse对象以及HttpServlet对象得到。\n     4. "]],[14884,14884],[14981,14981]]],[1591692090582,["Wahaha@DESKTOP-HTU2IVD",[[1,14981,"Jsp是Servlet的一种简化，使用Jsp只需要完成程序员需要输出到客户端的内容，Jsp中的Java脚本如何镶嵌到一个类中，由Jsp容器完成。而Servlet则是个完整的Java类，这个类的Service方法用于生成对客户端的响应。\n     5. "]],[14981,14981],[15107,15107]]],[1591692093095,["Wahaha@DESKTOP-HTU2IVD",[[-1,15102,"  5. "]],[15107,15107],[15102,15102]]],[1591692093753,["Wahaha@DESKTOP-HTU2IVD",[[-1,15099,"   "],[1,15102,"\n\n"]],[15102,15102],[15100,15100]]],[1591692095272,["Wahaha@DESKTOP-HTU2IVD",[[-1,15100,"\n"],[1,15101,"6"]],[15100,15100],[15101,15101]]],[1591692103375,["Wahaha@DESKTOP-HTU2IVD",[[1,15101,"3. jspyou"]],[15101,15101],[15110,15110]]],[1591692104206,["Wahaha@DESKTOP-HTU2IVD",[[-1,15107,"you"]],[15110,15110],[15107,15107]]],[1591692107927,["Wahaha@DESKTOP-HTU2IVD",[[1,15107,"尤纳斯"]],[15107,15107],[15110,15110]]],[1591692108975,["Wahaha@DESKTOP-HTU2IVD",[[-1,15106,"p尤纳斯"]],[15110,15110],[15106,15106]]],[1591692110598,["Wahaha@DESKTOP-HTU2IVD",[[1,15106,"s"]],[15106,15106],[15107,15107]]],[1591692112311,["Wahaha@DESKTOP-HTU2IVD",[[-1,15106,"s"]],[15107,15107],[15106,15106]]],[1591692115923,["Wahaha@DESKTOP-HTU2IVD",[[1,15106,"p尤纳斯尔"]],[15106,15106],[15111,15111]]],[1591692116925,["Wahaha@DESKTOP-HTU2IVD",[[-1,15107,"尤纳斯尔"]],[15111,15111],[15107,15107]]],[1591692124485,["Wahaha@DESKTOP-HTU2IVD",[[1,15107,"有哪些内置对象。"]],[15107,15107],[15115,15115]]],[1591692125342,["Wahaha@DESKTOP-HTU2IVD",[[-1,15114,"。"]],[15115,15115],[15114,15114]]],[1591692130481,["Wahaha@DESKTOP-HTU2IVD",[[1,15114,"，有什么作用\n64. "]],[15114,15114],[15125,15125]]],[1591692131749,["Wahaha@DESKTOP-HTU2IVD",[[-1,15122,"4. "]],[15125,15125],[15122,15122]]],[1591692132011,["Wahaha@DESKTOP-HTU2IVD",[[-1,15121,"6"],[1,15122,"\n"]],[15122,15122],[15121,15121]]],[1591692140810,["Wahaha@DESKTOP-HTU2IVD",[[-1,15121,"\n"],[1,15122,"有"]],[15121,15121],[15122,15122]]],[1591692141952,["Wahaha@DESKTOP-HTU2IVD",[[-1,15121,"有"],[1,15122,"\n"]],[15122,15122],[15121,15121]]],[1591692142614,["Wahaha@DESKTOP-HTU2IVD",[[-1,15121,"\n"]],[15121,15121],[15120,15120]]],[1591692142953,["Wahaha@DESKTOP-HTU2IVD",[[1,15120,"9"]],[15120,15120],[15121,15121]]],[1591692143886,["Wahaha@DESKTOP-HTU2IVD",[[-1,15120,"9"]],[15121,15121],[15120,15120]]],[1591692144853,["Wahaha@DESKTOP-HTU2IVD",[[1,15121,"64. \n"]],[15120,15120],[15125,15125]]],[1591692145332,["Wahaha@DESKTOP-HTU2IVD",[[-1,15121,"64. "]],[15125,15125],[15122,15122]]],[1591692148383,["Wahaha@DESKTOP-HTU2IVD",[[-1,15121,"\n"],[1,15122,"9"]],[15121,15121],[15122,15122]]],[1591692154402,["Wahaha@DESKTOP-HTU2IVD",[[1,15122,"个内置对象："]],[15122,15122],[15128,15128]]],[1591692155067,["Wahaha@DESKTOP-HTU2IVD",[[1,15128,"\n\n"]],[15128,15128],[15129,15129]]],[1591692156354,["Wahaha@DESKTOP-HTU2IVD",[[-1,15129,"\n"],[1,15130,"-"]],[15129,15129],[15130,15130]]],[1591692156546,["Wahaha@DESKTOP-HTU2IVD",[[1,15130," "]],[15130,15130],[15131,15131]]],[1591692168800,["Wahaha@DESKTOP-HTU2IVD",[[-1,15128,"\n"]],[15129,15129],[15128,15128]]],[1591692169404,["Wahaha@DESKTOP-HTU2IVD",[[-1,15127,"："]],[15128,15128],[15127,15127]]],[1591692170105,["Wahaha@DESKTOP-HTU2IVD",[[1,15127,"\n"]],[15127,15127],[15128,15128]]],[1591692175644,["Wahaha@DESKTOP-HTU2IVD",[[1,15128,"      "]],[15128,15128],[15134,15134]]],[1591692181957,["Wahaha@DESKTOP-HTU2IVD",[[-1,15129,"     - "]],[15134,15134],[15128,15128]]],[1591692182130,["Wahaha@DESKTOP-HTU2IVD",[[-1,15127,"\n"]],[15128,15128],[15127,15127]]],[1591692183332,["Wahaha@DESKTOP-HTU2IVD",[[-1,15121,"9个内置对象"]],[15127,15127],[15121,15121]]],[1591692184337,["Wahaha@DESKTOP-HTU2IVD",[[1,15121,"-"]],[15121,15121],[15122,15122]]],[1591692184542,["Wahaha@DESKTOP-HTU2IVD",[[1,15123," "]],[15122,15122],[15123,15123]]],[1591692186476,["Wahaha@DESKTOP-HTU2IVD",[[-1,15121,"- "]],[15123,15123],[15121,15121]]],[1591692187975,["Wahaha@DESKTOP-HTU2IVD",[[1,15122,"    "]],[15121,15121],[15125,15125]]],[1591692188662,["Wahaha@DESKTOP-HTU2IVD",[[1,15125,"-"]],[15125,15125],[15126,15126]]],[1591692189005,["Wahaha@DESKTOP-HTU2IVD",[[1,15127," "]],[15126,15126],[15127,15127]]],[1591692191928,["Wahaha@DESKTOP-HTU2IVD",[[-1,15123,"  -  "]],[15127,15127],[15122,15122]]],[1591692193131,["Wahaha@DESKTOP-HTU2IVD",[[-1,15122," "]],[15122,15122],[15121,15121]]],[1591692194809,["Wahaha@DESKTOP-HTU2IVD",[[1,15121,"-"]],[15121,15121],[15122,15122]]],[1591692195146,["Wahaha@DESKTOP-HTU2IVD",[[1,15123," "]],[15122,15122],[15123,15123]]],[1591692203188,["Wahaha@DESKTOP-HTU2IVD",[[1,15123,"request"]],[15123,15123],[15130,15130]]],[1591692204128,["Wahaha@DESKTOP-HTU2IVD",[[1,15131," "]],[15130,15130],[15131,15131]]],[1591692204773,["Wahaha@DESKTOP-HTU2IVD",[[1,15131,"feng"]],[15131,15131],[15135,15135]]],[1591692205801,["Wahaha@DESKTOP-HTU2IVD",[[-1,15131,"feng"]],[15135,15135],[15131,15131]]],[1591692214993,["Wahaha@DESKTOP-HTU2IVD",[[1,15131,"封装客户端的求求"]],[15131,15131],[15139,15139]]],[1591692215872,["Wahaha@DESKTOP-HTU2IVD",[[-1,15136,"的求求"]],[15139,15139],[15136,15136]]],[1591692226528,["Wahaha@DESKTOP-HTU2IVD",[[1,15136,"请求，其中包含get。"]],[15136,15136],[15147,15147]]],[1591692227261,["Wahaha@DESKTOP-HTU2IVD",[[-1,15146,"。"]],[15147,15147],[15146,15146]]],[1591692228395,["Wahaha@DESKTOP-HTU2IVD",[[1,15146,"."]],[15146,15146],[15147,15147]]],[1591692229878,["Wahaha@DESKTOP-HTU2IVD",[[-1,15146,"."]],[15147,15147],[15146,15146]]],[1591692230551,["Wahaha@DESKTOP-HTU2IVD",[[1,15146,"/"]],[15146,15146],[15147,15147]]],[1591692231803,["Wahaha@DESKTOP-HTU2IVD",[[-1,15146,"/"]],[15147,15147],[15146,15146]]],[1591692239219,["Wahaha@DESKTOP-HTU2IVD",[[1,15146,"、post的参数"]],[15146,15146],[15154,15154]]],[1591692239574,["Wahaha@DESKTOP-HTU2IVD",[[1,15154,"\n"]],[15154,15154],[15155,15155]]],[1591692241462,["Wahaha@DESKTOP-HTU2IVD",[[-1,15155," "],[1,15156,"\n"]],[15155,15155],[15156,15156]]],[1591692243175,["Wahaha@DESKTOP-HTU2IVD",[[-1,15155,"\n"]],[15155,15155],[15154,15154]]],[1591692243973,["Wahaha@DESKTOP-HTU2IVD",[[1,15155,"- \n"]],[15154,15154],[15157,15157]]],[1591692252106,["Wahaha@DESKTOP-HTU2IVD",[[1,15157,"resp"]],[15157,15157],[15161,15161]]],[1591692272051,["Wahaha@DESKTOP-HTU2IVD",[[1,15161,"onse 封装服务器对客户端的响应"]],[15161,15161],[15178,15178]]],[1591692272482,["Wahaha@DESKTOP-HTU2IVD",[[1,15179,"- \n"]],[15178,15178],[15181,15181]]],[1591692283571,["Wahaha@DESKTOP-HTU2IVD",[[1,15181,"pageContest"]],[15181,15181],[15192,15192]]],[1591692284461,["Wahaha@DESKTOP-HTU2IVD",[[-1,15190,"st"]],[15192,15192],[15190,15190]]],[1591692291564,["Wahaha@DESKTOP-HTU2IVD",[[1,15190,"xt to"]],[15190,15190],[15195,15195]]],[1591692292211,["Wahaha@DESKTOP-HTU2IVD",[[-1,15193,"to"]],[15195,15195],[15193,15193]]],[1591692300513,["Wahaha@DESKTOP-HTU2IVD",[[1,15193,"通过该对象可以获取其他对象"]],[15193,15193],[15206,15206]]],[1591692300772,["Wahaha@DESKTOP-HTU2IVD",[[1,15207,"- \n"]],[15206,15206],[15209,15209]]],[1591692312473,["Wahaha@DESKTOP-HTU2IVD",[[1,15209,"seesion"]],[15209,15209],[15216,15216]]],[1591692319010,["Wahaha@DESKTOP-HTU2IVD",[[1,15216," feng"]],[15216,15216],[15221,15221]]],[1591692319977,["Wahaha@DESKTOP-HTU2IVD",[[-1,15217,"feng"]],[15221,15221],[15217,15217]]],[1591692324755,["Wahaha@DESKTOP-HTU2IVD",[[1,15217,"封装用户回话"]],[15217,15217],[15223,15223]]],[1591692325647,["Wahaha@DESKTOP-HTU2IVD",[[-1,15221,"回话"]],[15223,15223],[15221,15221]]],[1591692329572,["Wahaha@DESKTOP-HTU2IVD",[[1,15221,"会话对象"]],[15221,15221],[15225,15225]]],[1591692329837,["Wahaha@DESKTOP-HTU2IVD",[[1,15226,"- \n"]],[15225,15225],[15228,15228]]],[1591692340291,["Wahaha@DESKTOP-HTU2IVD",[[1,15228,"spplic"]],[15228,15228],[15234,15234]]],[1591692341577,["Wahaha@DESKTOP-HTU2IVD",[[-1,15228,"spplic"]],[15234,15234],[15228,15228]]],[1591692345850,["Wahaha@DESKTOP-HTU2IVD",[[1,15228,"applicateion"]],[15228,15228],[15240,15240]]],[1591692347462,["Wahaha@DESKTOP-HTU2IVD",[[-1,15236,"eion"]],[15240,15240],[15236,15236]]],[1591692364727,["Wahaha@DESKTOP-HTU2IVD",[[1,15236,"ion 封装服务器运行环境对象"]],[15236,15236],[15251,15251]]],[1591692365046,["Wahaha@DESKTOP-HTU2IVD",[[1,15252,"- \n"]],[15251,15251],[15254,15254]]],[1591692372816,["Wahaha@DESKTOP-HTU2IVD",[[1,15254,"out:"]],[15254,15254],[15258,15258]]],[1591692373934,["Wahaha@DESKTOP-HTU2IVD",[[-1,15257,":"]],[15258,15258],[15257,15257]]],[1591692379754,["Wahaha@DESKTOP-HTU2IVD",[[1,15257," shu"]],[15257,15257],[15261,15261]]],[1591692380675,["Wahaha@DESKTOP-HTU2IVD",[[-1,15258,"shu"]],[15261,15261],[15258,15258]]],[1591692403353,["Wahaha@DESKTOP-HTU2IVD",[[1,15258,"输出服务器响应的输出流对象"]],[15258,15258],[15271,15271]]],[1591692403581,["Wahaha@DESKTOP-HTU2IVD",[[1,15272,"- \n"]],[15271,15271],[15274,15274]]],[1591692415676,["Wahaha@DESKTOP-HTU2IVD",[[1,15274,"config web配置对象"]],[15274,15274],[15288,15288]]],[1591692415943,["Wahaha@DESKTOP-HTU2IVD",[[1,15289,"- \n"]],[15288,15288],[15291,15291]]],[1591692425665,["Wahaha@DESKTOP-HTU2IVD",[[1,15291,"page jsp页面"]],[15291,15291],[15301,15301]]],[1591692425951,["Wahaha@DESKTOP-HTU2IVD",[[1,15302,"- \n"]],[15301,15301],[15304,15304]]],[1591692437674,["Wahaha@DESKTOP-HTU2IVD",[[1,15304,"expe"]],[15304,15304],[15308,15308]]],[1591692441384,["Wahaha@DESKTOP-HTU2IVD",[[-1,15306,"pe"]],[15308,15308],[15306,15306]]],[1591692459051,["Wahaha@DESKTOP-HTU2IVD",[[1,15306,"ception 封装页面抛出的异常对象"]],[15306,15306],[15325,15325]]],[1591692459297,["Wahaha@DESKTOP-HTU2IVD",[[1,15326,"- \n"]],[15325,15325],[15328,15328]]],[1591692460270,["Wahaha@DESKTOP-HTU2IVD",[[-1,15326,"- "]],[15328,15328],[15326,15326]]],[1591692461674,["Wahaha@DESKTOP-HTU2IVD",[[1,15327,"\n"]],[15326,15326],[15327,15327]]],[1591692463246,["Wahaha@DESKTOP-HTU2IVD",[[-1,15327,"\n"],[1,15328,"6"]],[15327,15327],[15328,15328]]],[1591692470615,["Wahaha@DESKTOP-HTU2IVD",[[1,15328,"4. jspde"]],[15328,15328],[15336,15336]]],[1591692471253,["Wahaha@DESKTOP-HTU2IVD",[[-1,15334,"de"]],[15336,15336],[15334,15334]]],[1591692475945,["Wahaha@DESKTOP-HTU2IVD",[[1,15334,"的四种作用域\n65. "]],[15334,15334],[15345,15345]]],[1591692477249,["Wahaha@DESKTOP-HTU2IVD",[[-1,15342,"5. "]],[15345,15345],[15342,15342]]],[1591692477489,["Wahaha@DESKTOP-HTU2IVD",[[-1,15341,"6"],[1,15342,"\n"]],[15342,15342],[15341,15341]]],[1591692488863,["Wahaha@DESKTOP-HTU2IVD",[[-1,15341,"\n"],[1,15342,"jsp"]],[15341,15341],[15344,15344]]],[1591692491979,["Wahaha@DESKTOP-HTU2IVD",[[1,15344,"的四种"]],[15344,15344],[15347,15347]]],[1591692503257,["Wahaha@DESKTOP-HTU2IVD",[[1,15347,"作用域包括page."]],[15347,15347],[15357,15357]]],[1591692504733,["Wahaha@DESKTOP-HTU2IVD",[[-1,15016,"客"]],[15017,15017],[15016,15016]]],[1591692505228,["Wahaha@DESKTOP-HTU2IVD",[[1,15016,"、"]],[15016,15016],[15017,15017]]],[1591692506804,["Wahaha@DESKTOP-HTU2IVD",[[-1,15016,"、"]],[15017,15017],[15016,15016]]],[1591692509855,["Wahaha@DESKTOP-HTU2IVD",[[-1,15355,"."]],[15356,15356],[15355,15355]]],[1591692530108,["Wahaha@DESKTOP-HTU2IVD",[[1,15355,"、request、session、application。"]],[15355,15355],[15384,15384]]],[1591692531007,["Wahaha@DESKTOP-HTU2IVD",[[1,15384,"\n\n"]],[15384,15384],[15385,15385]]],[1591692532556,["Wahaha@DESKTOP-HTU2IVD",[[-1,15385,"\n"],[1,15386,"-"]],[15385,15385],[15386,15386]]],[1591692532758,["Wahaha@DESKTOP-HTU2IVD",[[1,15386," "]],[15386,15386],[15387,15387]]],[1591692536775,["Wahaha@DESKTOP-HTU2IVD",[[1,15385,"    "]],[15385,15385],[15389,15389]]],[1591692539715,["Wahaha@DESKTOP-HTU2IVD",[[-1,15385,"    "]],[15389,15389],[15385,15385]]],[1591692547565,["Wahaha@DESKTOP-HTU2IVD",[[1,15385,"  "]],[15385,15385],[15387,15387]]],[1591692552567,["Wahaha@DESKTOP-HTU2IVD",[[-1,15386," "]],[15387,15387],[15386,15386]]],[1591692553082,["Wahaha@DESKTOP-HTU2IVD",[[-1,15385," "]],[15386,15386],[15385,15385]]],[1591692555694,["Wahaha@DESKTOP-HTU2IVD",[[1,15340,"- "]],[15340,15340],[15342,15342]]],[1591692566981,["Wahaha@DESKTOP-HTU2IVD",[[1,15389,"page:"]],[15389,15389],[15394,15394]]],[1591692571621,["Wahaha@DESKTOP-HTU2IVD",[[-1,15393,":"]],[15394,15394],[15393,15393]]],[1591692573044,["Wahaha@DESKTOP-HTU2IVD",[[1,15393," dai"]],[15393,15393],[15397,15397]]],[1591692573817,["Wahaha@DESKTOP-HTU2IVD",[[-1,15394,"dai"]],[15397,15397],[15394,15394]]],[1591692579983,["Wahaha@DESKTOP-HTU2IVD",[[1,15394,"代表与"]],[15394,15394],[15397,15397]]],[1591692586223,["Wahaha@DESKTOP-HTU2IVD",[[-1,15388," "]],[15389,15389],[15388,15388]]],[1591692587070,["Wahaha@DESKTOP-HTU2IVD",[[1,15388," "]],[15388,15388],[15389,15389]]],[1591692612621,["Wahaha@DESKTOP-HTU2IVD",[[1,15397,"页面相关的对象和属性\n- request 代表与Web客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个Web组件；需要在页面显示的临时数据可以置于此作用域。"]],[15397,15397],[15487,15487]]],[1591692740037,["Wahaha@DESKTOP-HTU2IVD",[[1,15487,"\n- **session**代表与某个用户与服务器建立的一次会话相关的对象和属性。跟某个用户相关的数据应该放在用户自己的session中。"]],[15487,15487],[15556,15556]]],[1591692742999,["Wahaha@DESKTOP-HTU2IVD",[[-1,15499,"**"]],[15501,15501],[15499,15499]]],[1591692747429,["Wahaha@DESKTOP-HTU2IVD",[[-1,15490,"**"]],[15492,15492],[15490,15490]]],[1591692749685,["Wahaha@DESKTOP-HTU2IVD",[[1,15497," "]],[15497,15497],[15498,15498]]],[1591692757694,["Wahaha@DESKTOP-HTU2IVD",[[1,15553,"\n- *   **application**代表与整个Web应用程序相关的对象和属性，它实质上是跨越整个Web应用程序，包括多个页面、请求和会话的一个全局作用域。"]],[15553,15553],[15634,15634]]],[1591692761862,["Wahaha@DESKTOP-HTU2IVD",[[-1,15573,"**"]],[15573,15575],[15573,15573]]],[1591692766882,["Wahaha@DESKTOP-HTU2IVD",[[-1,15557,"   **"]],[15556,15561],[15556,15556]]],[1591692768245,["Wahaha@DESKTOP-HTU2IVD",[[-1,15556,"*"]],[15556,15556],[15556,15556]]],[1591692771735,["Wahaha@DESKTOP-HTU2IVD",[[1,15567," "]],[15567,15567],[15568,15568]]],[1591692774629,["Wahaha@DESKTOP-HTU2IVD",[[1,15627,"\n- "]],[15627,15627],[15630,15630]]],[1591692775738,["Wahaha@DESKTOP-HTU2IVD",[[-1,15629," "]],[15630,15630],[15629,15629]]],[1591692775981,["Wahaha@DESKTOP-HTU2IVD",[[-1,15628,"-"],[1,15629,"\n"]],[15629,15629],[15628,15628]]],[1591692776596,["Wahaha@DESKTOP-HTU2IVD",[[1,15629,"\n"]],[15628,15628],[15629,15629]]],[1591692777877,["Wahaha@DESKTOP-HTU2IVD",[[-1,15629,"\n"],[1,15630,"6"]],[15629,15629],[15630,15630]]],[1591692785615,["Wahaha@DESKTOP-HTU2IVD",[[1,15630,"5. seesion余"]],[15630,15630],[15641,15641]]],[1591692787692,["Wahaha@DESKTOP-HTU2IVD",[[-1,15640,"余"]],[15641,15641],[15640,15640]]],[1591692789263,["Wahaha@DESKTOP-HTU2IVD",[[1,15640,"与"]],[15640,15640],[15641,15641]]],[1591692798263,["Wahaha@DESKTOP-HTU2IVD",[[1,15641,"cookie的区别\n66. "]],[15641,15641],[15655,15655]]],[1591692798589,["Wahaha@DESKTOP-HTU2IVD",[[-1,15651,"66. "],[1,15655,"\n\n"]],[15655,15655],[15652,15652]]],[1591692800242,["Wahaha@DESKTOP-HTU2IVD",[[-1,15652,"\n"]],[15652,15652],[15651,15651]]],[1591692808341,["Wahaha@DESKTOP-HTU2IVD",[[1,15651,"*   由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是Session.典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。这个Session是保存在服务端的，有一个唯一标识。在服务端保存Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑Session的转移，在大型的网站，一般会有专门的Session服务器集群，用来保存用户会话，这个时候 Session 信息都是放在内存的，使用一些缓存服务比如Memcached之类的来放 Session。\n\n*   思考一下服务端如何识别特定的客户？这个时候Cookie就登场了。每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie 来实现Session跟踪的，第一次创建Session的时候，服务端会在HTTP协议中告诉客户端，需要在 Cookie 里面记录一个Session ID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。有人问，如果客户端的浏览器禁用了 Cookie 怎么办？一般这种情况下，会使用一种叫做URL重写的技术来进行会话跟踪，即每次HTTP交互，URL后面都会被附加上一个诸如 sid=xxxxx 这样的参数，服务端据此来识别用户。\n\n*   Cookie其实还可以用在一些方便用户的场景下，设想你某次登陆过一个网站，下次登录的时候不想再次输入账号了，怎么办？这个信息可以写到Cookie里面，访问网站的时候，网站页面的脚本可以读取这个信息，就自动帮你把用户名给填了，能够方便一下用户。这也是Cookie名称的由来，给用户的一点甜头。所以，总结一下：Session是在服务端保存的一个数据结构，用来跟踪用户的状态，这个数据可以保存在集群、数据库、文件中；Cookie是客户端保存用户信息的一种机制，用来记录用户的一些信息，也是实现Session的一种方式。"]],[15651,15651],[16564,16564]]],[1591692812259,["Wahaha@DESKTOP-HTU2IVD",[[-1,15651,"* "],[1,15653,"- "]],[15651,15651],[15653,15653]]],[1591692813349,["Wahaha@DESKTOP-HTU2IVD",[[-1,15654," "]],[15653,15653],[15652,15652]]],[1591692813835,["Wahaha@DESKTOP-HTU2IVD",[[-1,15653," "]],[15652,15652],[15652,15652]]],[1591692814132,["Wahaha@DESKTOP-HTU2IVD",[[-1,15652," "]],[15652,15652],[15652,15652]]],[1591692814890,["Wahaha@DESKTOP-HTU2IVD",[[1,15652," "]],[15652,15652],[15653,15653]]],[1591692818118,["Wahaha@DESKTOP-HTU2IVD",[[-1,15992,"*  "],[1,15995,"-"]],[15992,15992],[15993,15993]]],[1591692823764,["Wahaha@DESKTOP-HTU2IVD",[[-1,16300,"*"],[1,16301,"-"]],[16300,16300],[16301,16301]]],[1591692824378,["Wahaha@DESKTOP-HTU2IVD",[[-1,16303," "]],[16301,16301],[16301,16301]]],[1591692832322,["Wahaha@DESKTOP-HTU2IVD",[[1,16560,"- \n"]],[16559,16559],[16562,16562]]],[1591692832804,["Wahaha@DESKTOP-HTU2IVD",[[-1,16560,"- "]],[16562,16562],[16561,16561]]],[1591692833564,["Wahaha@DESKTOP-HTU2IVD",[[1,16561,"\n"]],[16561,16561],[16562,16562]]],[1591692841766,["Wahaha@DESKTOP-HTU2IVD",[[-1,16561,"\n"],[1,16562," "]],[16562,16562],[16561,16562]]],[1591692842353,["Wahaha@DESKTOP-HTU2IVD",[[-1,16561," "]],[16561,16561],[0,0]]],[1591692843731,["Wahaha@DESKTOP-HTU2IVD",[[-1,16560,"\n"],[1,16561,"6"]],[0,0],[16561,16561]]],[1591692845537,["Wahaha@DESKTOP-HTU2IVD",[[1,16561,"6="]],[16561,16561],[16563,16563]]],[1591692846170,["Wahaha@DESKTOP-HTU2IVD",[[-1,16561,"6="]],[16563,16563],[16561,16561]]],[1591692846375,["Wahaha@DESKTOP-HTU2IVD",[[-1,16560,"6"],[1,16561,"\n"]],[16561,16561],[16560,16560]]],[1591692846884,["Wahaha@DESKTOP-HTU2IVD",[[1,16561,"\n"]],[16560,16560],[16561,16561]]],[1591692848165,["Wahaha@DESKTOP-HTU2IVD",[[-1,16561,"\n"],[1,16562,"6"]],[16561,16561],[16562,16562]]],[1591692852818,["Wahaha@DESKTOP-HTU2IVD",[[1,16562,"6. session d"]],[16562,16562],[16574,16574]]],[1591692854353,["Wahaha@DESKTOP-HTU2IVD",[[-1,16572," de"]],[16575,16575],[16572,16572]]],[1591692855088,["Wahaha@DESKTOP-HTU2IVD",[[1,16572,"事务"]],[16572,16572],[16574,16574]]],[1591692856324,["Wahaha@DESKTOP-HTU2IVD",[[-1,16572,"事务"]],[16574,16574],[16572,16572]]],[1591692861290,["Wahaha@DESKTOP-HTU2IVD",[[1,16572,"的工作原理\n67. "]],[16572,16572],[16582,16582]]],[1591692861530,["Wahaha@DESKTOP-HTU2IVD",[[-1,16578,"67. "],[1,16582,"\n\n"]],[16582,16582],[16579,16579]]],[1591692862968,["Wahaha@DESKTOP-HTU2IVD",[[-1,16579,"\n"]],[16579,16579],[16578,16578]]],[1591692868528,["Wahaha@DESKTOP-HTU2IVD",[[1,16578,"其实session是一个存在服务器上的类似于一个散列表格的文件。里面存有我们需要的信息，在我们需要用的时候可以从里面取出来。类似于一个大号的map吧，里面的键存储的是用户的sessionid，用户向服务器发送请求的时候会带上这个sessionid。这时就可以从中取出对应的值了。"]],[16578,16578],[16717,16717]]],[1591692871886,["Wahaha@DESKTOP-HTU2IVD",[[1,16718,"\n"]],[16717,16717],[16718,16718]]],[1591692872538,["Wahaha@DESKTOP-HTU2IVD",[[1,16719,"\n"]],[16718,16718],[16719,16719]]],[1591692874298,["Wahaha@DESKTOP-HTU2IVD",[[-1,16719,"\n"],[1,16720,"6"]],[16719,16719],[16720,16720]]],[1591692896771,["Wahaha@DESKTOP-HTU2IVD",[[1,16720,"7. rug"]],[16720,16720],[16726,16726]]],[1591692897542,["Wahaha@DESKTOP-HTU2IVD",[[-1,16723,"rug"]],[16726,16726],[16723,16723]]],[1591692910388,["Wahaha@DESKTOP-HTU2IVD",[[1,16723,"如果客户端关闭cookie"]],[16723,16723],[16736,16736]]],[1591692926250,["Wahaha@DESKTOP-HTU2IVD",[[1,16736,"，sessIon还能用吗\n68. "]],[16736,16736],[16753,16753]]],[1591692926948,["Wahaha@DESKTOP-HTU2IVD",[[-1,16752," "]],[16753,16753],[16752,16752]]],[1591692927636,["Wahaha@DESKTOP-HTU2IVD",[[1,16752,"\n\n"]],[16752,16752],[16753,16753]]],[1591692928346,["Wahaha@DESKTOP-HTU2IVD",[[-1,16753,"\n"]],[16753,16753],[16752,16752]]],[1591692929102,["Wahaha@DESKTOP-HTU2IVD",[[-1,16749,"68."]],[16752,16752],[16749,16749]]],[1591692948780,["Wahaha@DESKTOP-HTU2IVD",[[1,16749,"Cookie与 Session，一般认为是两个独立的东西，Session采用的是在服务器端保持状态的方案，而Cookie采用的是在客户端保持状态的方案。但为什么禁用Cookie就不能得到Session呢？因为Session是用Session ID来确定当前对话所对应的服务器Session，而Session ID是通过Cookie来传递的，禁用Cookie相当于失去了Session ID，也就得不到Session了。\n\n假定用户关闭Cookie的情况下使用Session，其实现途径有以下几种：\n\n1.  设置php.ini配置文件中的“session.use_trans_sid = 1”，或者编译时打开打开了“--enable-trans-sid”选项，让PHP自动跨页传递Session ID。\n\n2.  手动通过URL传值、隐藏表单传递Session ID。\n\n3.  用文件、数据库等形式保存Session ID，在跨页过程中手动调用。"]],[16749,16749],[17173,17173]]],[1591692956813,["Wahaha@DESKTOP-HTU2IVD",[[1,16749,"- "]],[16749,16749],[16751,16751]]],[1591692959881,["Wahaha@DESKTOP-HTU2IVD",[[1,16962,"- "]],[16962,16962],[16964,16964]]],[1591692963711,["Wahaha@DESKTOP-HTU2IVD",[[1,17002,"  "],[1,17003,"  "],[1,17105,"  "],[1,17106,"  "],[1,17138,"  "],[1,17139,"  "]],[17002,17177],[17002,17189]]],[1591692969255,["Wahaha@DESKTOP-HTU2IVD",[[-1,17002,"  "]],[17004,17004],[17002,17002]]],[1591692970209,["Wahaha@DESKTOP-HTU2IVD",[[-1,17002,"\n"]],[17002,17002],[17001,17001]]],[1591692972713,["Wahaha@DESKTOP-HTU2IVD",[[-1,17107," "]],[17108,17108],[17107,17107]]],[1591692973650,["Wahaha@DESKTOP-HTU2IVD",[[-1,17106," "]],[17107,17107],[17106,17106]]],[1591692974452,["Wahaha@DESKTOP-HTU2IVD",[[-1,17106,"\n"]],[17106,17106],[17105,17105]]],[1591692977105,["Wahaha@DESKTOP-HTU2IVD",[[-1,17140,"  "]],[17142,17142],[17140,17140]]],[1591692977683,["Wahaha@DESKTOP-HTU2IVD",[[-1,17140,"\n"]],[17140,17140],[17139,17139]]],[1591693001226,["Wahaha@DESKTOP-HTU2IVD",[[1,17181,"  4. \n"]],[17180,17180],[17186,17186]]],[1591693001514,["Wahaha@DESKTOP-HTU2IVD",[[-1,17181,"  4. "]],[17186,17186],[17182,17182]]],[1591693003282,["Wahaha@DESKTOP-HTU2IVD",[[1,17182,"\n"]],[17182,17182],[17183,17183]]],[1591693004706,["Wahaha@DESKTOP-HTU2IVD",[[-1,17182,"\n"],[1,17183,"6"]],[17183,17183],[17183,17183]]],[1591693004920,["Wahaha@DESKTOP-HTU2IVD",[[1,17183,"7"]],[17183,17183],[17184,17184]]],[1591693005696,["Wahaha@DESKTOP-HTU2IVD",[[-1,17183,"7"]],[17184,17184],[17183,17183]]],[1591693020842,["Wahaha@DESKTOP-HTU2IVD",[[1,17183,"8. springmvc和Strutsde"]],[17183,17183],[17204,17204]]],[1591693021515,["Wahaha@DESKTOP-HTU2IVD",[[-1,17202,"de"]],[17204,17204],[17202,17202]]],[1591693023680,["Wahaha@DESKTOP-HTU2IVD",[[1,17202,"的去呗"]],[17202,17202],[17205,17205]]],[1591693024793,["Wahaha@DESKTOP-HTU2IVD",[[-1,17203,"去呗"]],[17205,17205],[17203,17203]]],[1591693031063,["Wahaha@DESKTOP-HTU2IVD",[[1,17203,"区别是什么\n69. "]],[17203,17203],[17213,17213]]],[1591693031357,["Wahaha@DESKTOP-HTU2IVD",[[-1,17209,"69. "],[1,17213,"\n\n"]],[17213,17213],[17210,17210]]],[1591693047857,["Wahaha@DESKTOP-HTU2IVD",[[1,17210,"*   ### 拦截机制的不同\n\nStruts2是类级别的拦截，每次请求就会创建一个Action，和Spring整合时Struts2的ActionBean注入作用域是原型模式prototype，然后通过setter，getter吧request数据注入到属性。Struts2中，一个Action对应一个request，response上下文，在接收参数时，可以通过属性接收，这说明属性参数是让多个方法共享的。Struts2中Action的一个方法可以对应一个url，而其类属性却被所有方法共享，这也就无法用注解或其他方式标识其所属方法了，只能设计为多例。\n\nSpringMVC是方法级别的拦截，一个方法对应一个Request上下文，所以方法直接基本上是独立的，独享request，response数据。而每个方法同时又何一个url对应，参数的传递是直接注入到方法中的，是方法所独有的。处理结果通过ModeMap返回给框架。在Spring整合时，SpringMVC的Controller Bean默认单例模式Singleton，所以默认对所有的请求，只会创建一个Controller，有应为没有共享的属性，所以是线程安全的，如果要改变默认的作用域，需要添加@Scope注解修改。\n\nStruts2有自己的拦截Interceptor机制，SpringMVC这是用的是独立的Aop方式，这样导致Struts2的配置文件量还是比SpringMVC大。\n\n*   ### 底层框架的不同\n\nStruts2采用Filter（StrutsPrepareAndExecuteFilter）实现，SpringMVC（DispatcherServlet）则采用Servlet实现。Filter在容器启动之后即初始化；服务停止以后坠毁，晚于Servlet。Servlet在是在调用时初始化，先于Filter调用，服务停止后销毁。\n\n*   ### 性能方面\n\nStruts2是类级别的拦截，每次请求对应实例一个新的Action，需要加载所有的属性值注入，SpringMVC实现了零配置，由于SpringMVC基于方法的拦截，有加载一次单例模式bean注入。所以，SpringMVC开发效率和性能高于Struts2。\n\n*   ### 配置方面\n\nspring MVC和Spring是无缝的。从这个项目的管理和安全上也比Struts2高。"]],[17210,17210],[18217,18217]]],[1591693054457,["Wahaha@DESKTOP-HTU2IVD",[[-1,17210,"*"],[1,17211,"-"]],[17210,17210],[17211,17211]]],[1591693064195,["Wahaha@DESKTOP-HTU2IVD",[[-1,17212,"  ### "]],[17213,17218],[17212,17212]]],[1591693071854,["Wahaha@DESKTOP-HTU2IVD",[[-1,17220,"\n"]],[17220,17220],[17219,17219]]],[1591693074376,["Wahaha@DESKTOP-HTU2IVD",[[-1,17481,"\n"]],[17481,17481],[17480,17480]]],[1591693078545,["Wahaha@DESKTOP-HTU2IVD",[[1,17481,"\n"]],[17480,17480],[17481,17481]]],[1591693082046,["Wahaha@DESKTOP-HTU2IVD",[[-1,17209,"\n"]],[17209,17209],[17208,17208]]],[1591693092285,["Wahaha@DESKTOP-HTU2IVD",[[1,17219,"  "]],[17219,17219],[17221,17221]]],[1591693094103,["Wahaha@DESKTOP-HTU2IVD",[[-1,17219,"  "]],[17221,17221],[17219,17219]]],[1591693097439,["Wahaha@DESKTOP-HTU2IVD",[[1,17219,"    - "]],[17219,17219],[17225,17225]]],[1591693099156,["Wahaha@DESKTOP-HTU2IVD",[[-1,17224," "]],[17225,17225],[17224,17224]]],[1591693100121,["Wahaha@DESKTOP-HTU2IVD",[[1,17224,"1"]],[17224,17224],[17225,17225]]],[1591693102348,["Wahaha@DESKTOP-HTU2IVD",[[-1,17223,"-"]],[17224,17224],[17223,17223]]],[1591693105177,["Wahaha@DESKTOP-HTU2IVD",[[1,17224,"。"]],[17224,17224],[17225,17225]]],[1591693106135,["Wahaha@DESKTOP-HTU2IVD",[[-1,17224,"。"]],[17225,17225],[17224,17224]]],[1591693107230,["Wahaha@DESKTOP-HTU2IVD",[[1,17224,". "]],[17224,17224],[17226,17226]]],[1591693112357,["Wahaha@DESKTOP-HTU2IVD",[[1,17488,"    "]],[17488,17488],[17492,17492]]],[1591693116849,["Wahaha@DESKTOP-HTU2IVD",[[-1,17489,"   "]],[17492,17492],[17489,17489]]],[1591693119154,["Wahaha@DESKTOP-HTU2IVD",[[1,17489,"    "]],[17489,17489],[17493,17493]]],[1591693120274,["Wahaha@DESKTOP-HTU2IVD",[[-1,17492," "]],[17493,17493],[17492,17492]]],[1591693121803,["Wahaha@DESKTOP-HTU2IVD",[[1,17492,"2. "]],[17492,17492],[17495,17495]]],[1591693125793,["Wahaha@DESKTOP-HTU2IVD",[[1,17756,"    "]],[17756,17756],[17760,17760]]],[1591693127425,["Wahaha@DESKTOP-HTU2IVD",[[-1,17759," "]],[17760,17760],[17759,17759]]],[1591693128962,["Wahaha@DESKTOP-HTU2IVD",[[1,17759,"3/ "]],[17759,17759],[17762,17762]]],[1591693131289,["Wahaha@DESKTOP-HTU2IVD",[[-1,17760,"/ "]],[17762,17762],[17760,17760]]],[1591693131900,["Wahaha@DESKTOP-HTU2IVD",[[1,17760,". "]],[17760,17760],[17762,17762]]],[1591693134583,["Wahaha@DESKTOP-HTU2IVD",[[1,17759," "]],[17759,17759],[17760,17760]]],[1591693140699,["Wahaha@DESKTOP-HTU2IVD",[[-1,17846,"*  ### "]],[17848,17853],[17846,17846]]],[1591693141928,["Wahaha@DESKTOP-HTU2IVD",[[1,17846,"-"]],[17846,17846],[17847,17847]]],[1591693142174,["Wahaha@DESKTOP-HTU2IVD",[[1,17848," "]],[17847,17847],[17848,17848]]],[1591693150438,["Wahaha@DESKTOP-HTU2IVD",[[1,17858,"    1/"]],[17858,17858],[17864,17864]]],[1591693151371,["Wahaha@DESKTOP-HTU2IVD",[[-1,17863,"/"]],[17864,17864],[17863,17863]]],[1591693152685,["Wahaha@DESKTOP-HTU2IVD",[[1,17863,". "]],[17863,17863],[17865,17865]]],[1591693161088,["Wahaha@DESKTOP-HTU2IVD",[[-1,17857,"\n    1."]],[17857,17864],[17857,17857]]],[1591693166059,["Wahaha@DESKTOP-HTU2IVD",[[-1,18023,"*   ###"],[1,18030,"-"]],[18023,18030],[18024,18024]]],[1591693166261,["Wahaha@DESKTOP-HTU2IVD",[[1,18025," "]],[18024,18024],[18025,18025]]],[1591693171861,["Wahaha@DESKTOP-HTU2IVD",[[-1,18031,"\n"]],[18031,18031],[18030,18030]]],[1591693185553,["Wahaha@DESKTOP-HTU2IVD",[[1,18031,"    1/ "]],[18031,18031],[18038,18038]]],[1591693186594,["Wahaha@DESKTOP-HTU2IVD",[[-1,18036,"/ "]],[18038,18038],[18036,18036]]],[1591693187572,["Wahaha@DESKTOP-HTU2IVD",[[1,18036,". "]],[18036,18036],[18038,18038]]],[1591693198594,["Wahaha@DESKTOP-HTU2IVD",[[-1,18036,". "]],[18038,18038],[18036,18036]]],[1591693199238,["Wahaha@DESKTOP-HTU2IVD",[[1,18036,"/ "]],[18036,18036],[18038,18038]]],[1591693200243,["Wahaha@DESKTOP-HTU2IVD",[[-1,18031,"    1/ "]],[18038,18038],[18031,18031]]],[1591693200613,["Wahaha@DESKTOP-HTU2IVD",[[1,18031,"\n"]],[18030,18030],[18031,18031]]],[1591693204453,["Wahaha@DESKTOP-HTU2IVD",[[-1,18031,"\n"]],[18031,18031],[18030,18030]]],[1591693208864,["Wahaha@DESKTOP-HTU2IVD",[[-1,18160,"*   ###"]],[18160,18166],[18160,18160]]],[1591693210377,["Wahaha@DESKTOP-HTU2IVD",[[1,18160,"-"]],[18160,18160],[18161,18161]]],[1591693213974,["Wahaha@DESKTOP-HTU2IVD",[[-1,18167,"\n"]],[18168,18168],[18167,18167]]],[1591693247187,["Wahaha@DESKTOP-HTU2IVD",[[1,18213,"\n"]],[18212,18212],[18213,18213]]],[1591693247535,["Wahaha@DESKTOP-HTU2IVD",[[1,18214,"\n"]],[18213,18213],[18214,18214]]],[1591693248983,["Wahaha@DESKTOP-HTU2IVD",[[-1,18214,"\n"],[1,18215,"6"]],[18214,18214],[18215,18215]]],[1591693257741,["Wahaha@DESKTOP-HTU2IVD",[[1,18215,"9. **如何避免 sql 注入？**"]],[18215,18215],[18234,18234]]],[1591693260730,["Wahaha@DESKTOP-HTU2IVD",[[-1,18217," **"]],[18217,18220],[18217,18217]]],[1591693261306,["Wahaha@DESKTOP-HTU2IVD",[[1,18217," "]],[18217,18217],[18218,18218]]],[1591693263680,["Wahaha@DESKTOP-HTU2IVD",[[-1,18228,"入？**"]],[18232,18232],[18228,18228]]],[1591693265754,["Wahaha@DESKTOP-HTU2IVD",[[1,18228,"ru"]],[18228,18228],[18230,18230]]],[1591693266560,["Wahaha@DESKTOP-HTU2IVD",[[-1,18228,"ru"]],[18230,18230],[18228,18228]]],[1591693267382,["Wahaha@DESKTOP-HTU2IVD",[[1,18228,"Ru "]],[18228,18228],[18231,18231]]],[1591693268912,["Wahaha@DESKTOP-HTU2IVD",[[-1,18228,"Ru "]],[18231,18231],[18228,18228]]],[1591693272243,["Wahaha@DESKTOP-HTU2IVD",[[1,18228,"入\n70. "]],[18228,18228],[18234,18234]]],[1591693272886,["Wahaha@DESKTOP-HTU2IVD",[[-1,18233," "]],[18234,18234],[18233,18233]]],[1591693273357,["Wahaha@DESKTOP-HTU2IVD",[[-1,18231,"0"]],[18232,18232],[18231,18231]]],[1591693273800,["Wahaha@DESKTOP-HTU2IVD",[[-1,18230,"7"],[1,18231,"\n"]],[18231,18231],[18230,18230]]],[1591693279840,["Wahaha@DESKTOP-HTU2IVD",[[1,18230,"1.  PreparedStatement（简单又有效的方法）\n\n2.  使用正则表达式过滤传入的参数\n\n3.  字符串过滤\n\n4.  JSP中调用该函数检查是否包函非法字符\n\n5.  JSP页面判断代码"]],[18230,18230],[18332,18332]]],[1591693284835,["Wahaha@DESKTOP-HTU2IVD",[[1,18230,"  "],[1,18262,"  "],[1,18263,"  "],[1,18282,"  "],[1,18283,"  "],[1,18293,"  "],[1,18294,"  "],[1,18318,"  "],[1,18319,"  "]],[18230,18332],[18230,18350]]],[1591693285225,["Wahaha@DESKTOP-HTU2IVD",[[1,18232,"  "],[1,18266,"  "],[1,18267,"  "],[1,18290,"  "],[1,18291," "],[1,18293," "],[1,18305,"  "],[1,18306,"  "],[1,18334,"  "],[1,18335,"  "]],[18230,18350],[18230,18368]]],[1591693289875,["Wahaha@DESKTOP-HTU2IVD",[[-1,18266,"    "]],[18270,18270],[18266,18266]]],[1591693290492,["Wahaha@DESKTOP-HTU2IVD",[[-1,18266,"\n"]],[18266,18266],[18265,18265]]],[1591693294423,["Wahaha@DESKTOP-HTU2IVD",[[-1,18289,"    "]],[18289,18293],[18289,18289]]],[1591693295005,["Wahaha@DESKTOP-HTU2IVD",[[-1,18289,"\n"]],[18289,18289],[18288,18288]]],[1591693298490,["Wahaha@DESKTOP-HTU2IVD",[[-1,18303,"    "]],[18307,18307],[18303,18303]]],[1591693298824,["Wahaha@DESKTOP-HTU2IVD",[[-1,18303,"\n"]],[18303,18303],[18302,18302]]],[1591693301447,["Wahaha@DESKTOP-HTU2IVD",[[1,18335,"="]],[18335,18335],[18336,18336]]],[1591693303192,["Wahaha@DESKTOP-HTU2IVD",[[-1,18331,"    ="]],[18336,18336],[18331,18331]]],[1591693304723,["Wahaha@DESKTOP-HTU2IVD",[[-1,18331,"\n"]],[18331,18331],[18330,18330]]],[1591693332638,["Wahaha@DESKTOP-HTU2IVD",[[1,18349,"    6. \n"]],[18348,18348],[18356,18356]]],[1591693393150,[null,[[-1,18357,"."]],[18357,18357],[18357,18357]]],[1591693393151,[null,[[1,18357,"."]],[18357,18357],[18357,18357]]],[1591693334215,["Wahaha@DESKTOP-HTU2IVD",[[-1,18353,"6. "]],[18356,18356],[18353,18353]]],[1591693334965,["Wahaha@DESKTOP-HTU2IVD",[[-1,18349,"    "],[1,18353,"\n"]],[18353,18353],[18350,18350]]],[1591693338734,["Wahaha@DESKTOP-HTU2IVD",[[-1,18350,"\n"],[1,18351,"7"]],[18350,18350],[18351,18351]]],[1591693358385,["Wahaha@DESKTOP-HTU2IVD",[[1,18351,"0. **什么是 XSS 攻击，如何避免？**"]],[18351,18351],[18374,18374]]],[1591693360813,["Wahaha@DESKTOP-HTU2IVD",[[-1,18354,"**"]],[18354,18356],[18354,18354]]],[1591693363232,["Wahaha@DESKTOP-HTU2IVD",[[-1,18370,"**"]],[18372,18372],[18370,18370]]],[1591693364232,["Wahaha@DESKTOP-HTU2IVD",[[1,18370,"\n71. "]],[18370,18370],[18375,18375]]],[1591693364804,["Wahaha@DESKTOP-HTU2IVD",[[-1,18371,"71. "],[1,18375,"\n\n"]],[18375,18375],[18372,18372]]],[1591693371323,["Wahaha@DESKTOP-HTU2IVD",[[1,18371,"XSS攻击又称CSS,全称Cross Site Script  （跨站脚本攻击），其原理是攻击者向有XSS漏洞的网站中输入恶意的 HTML 代码，当用户浏览该网站时，这段 HTML 代码会自动执行，从而达到攻击的目的。XSS 攻击类似于 SQL 注入攻击，SQL注入攻击中以SQL语句作为用户输入，从而达到查询/修改/删除数据的目的，而在xss攻击中，通过插入恶意脚本，实现对用户游览器的控制，获取用户的一些信息。 XSS是 Web 程序中常见的漏洞，XSS 属于被动式且用于客户端的攻击方式。\n\nXSS防范的总体思路是：对输入(和URL参数)进行过滤，对输出进行编码。"]],[18371,18371],[18656,18656]]],[1591693376168,["Wahaha@DESKTOP-HTU2IVD",[[1,18371,"-"],[-1,18401," "],[1,18402," "]],[18371,18371],[18372,18372]]],[1591693376356,["Wahaha@DESKTOP-HTU2IVD",[[1,18372," "]],[18372,18372],[18373,18373]]],[1591693378579,["Wahaha@DESKTOP-HTU2IVD",[[1,18622,"- "]],[18622,18622],[18624,18624]]],[1591693386042,["Wahaha@DESKTOP-HTU2IVD",[[-1,18661,"\n"]],[18661,18661],[18660,18660]]],[1591693386838,["Wahaha@DESKTOP-HTU2IVD",[[1,18661,"- \n"]],[18660,18660],[18663,18663]]],[1591693387337,["Wahaha@DESKTOP-HTU2IVD",[[-1,18661,"- "]],[18663,18663],[18662,18662]]],[1591693388488,["Wahaha@DESKTOP-HTU2IVD",[[1,18662,"\n"]],[18662,18662],[18663,18663]]],[1591693390222,["Wahaha@DESKTOP-HTU2IVD",[[-1,18662,"\n"],[1,18663,"7"]],[18663,18663],[18663,18663]]],[1591693390916,["Wahaha@DESKTOP-HTU2IVD",[[1,18663,"1 。"]],[18663,18663],[18666,18666]]],[1591693391911,["Wahaha@DESKTOP-HTU2IVD",[[-1,18664," 。"]],[18666,18666],[18664,18664]]],[1591693392757,["Wahaha@DESKTOP-HTU2IVD",[[1,18664,". "]],[18664,18664],[18666,18666]]],[1591693453159,[null,[[-1,18666,"."]],[18666,18666],[18666,18666]]],[1591693453159,[null,[[1,18666,"."]],[18666,18666],[18666,18666]]],[1591693401451,["Wahaha@DESKTOP-HTU2IVD",[[1,18666,"SH"]],[18666,18666],[18668,18668]]],[1591693402111,["Wahaha@DESKTOP-HTU2IVD",[[-1,18666,"SH"]],[18668,18668],[18666,18666]]],[1591693414381,["Wahaha@DESKTOP-HTU2IVD",[[1,18666,"什么是CFRS攻击，如何避免\n72. "]],[18666,18666],[18685,18685]]],[1591693415362,["Wahaha@DESKTOP-HTU2IVD",[[-1,18682,"2. "]],[18685,18685],[18682,18682]]],[1591693415548,["Wahaha@DESKTOP-HTU2IVD",[[-1,18681,"7"],[1,18682,"\n"]],[18682,18682],[18681,18681]]],[1591693421993,["Wahaha@DESKTOP-HTU2IVD",[[-1,18681,"\n"],[1,18682,"-"]],[18681,18681],[18682,18682]]],[1591693431289,["Wahaha@DESKTOP-HTU2IVD",[[1,18682," CSRF（Cross-site request forgery）也被称为 one-click attack或者 session riding，中文全称是叫**跨站请求伪造**。一般来说，攻击者通过伪造用户的浏览器的请求，向访问一个用户自己曾经认证访问过的网站发送出去，使目标网站接收并误以为是用户的真实操作而去执行命令。常用于盗取账号、转账、发送虚假消息等。攻击者利用网站对请求的验证漏洞而实现这样的攻击行为，网站能够确认请求来源于用户的浏览器，却不能验证请求是否源于用户的真实意愿下的操作行为。\n- 如何避免\n- "]],[18682,18682],[18941,18941]]],[1591693432041,["Wahaha@DESKTOP-HTU2IVD",[[-1,18940," "]],[18941,18941],[18940,18940]]],[1591693432637,["Wahaha@DESKTOP-HTU2IVD",[[-1,18939,"-"],[1,18940,"\n"]],[18940,18940],[18939,18939]]],[1591693433684,["Wahaha@DESKTOP-HTU2IVD",[[-1,18939,"\n"],[1,18940," "]],[18939,18939],[18940,18940]]],[1591693443148,["Wahaha@DESKTOP-HTU2IVD",[[1,18940,"   1. ### 验证 HTTP Referer 字段"]],[18940,18940],[18968,18968]]],[1591693446982,["Wahaha@DESKTOP-HTU2IVD",[[-1,18946,"### "]],[18946,18950],[18946,18946]]],[1591693513294,[null,[[-1,18964,"."]],[18964,18964],[18964,18964]]],[1591693513294,[null,[[1,18964,"."]],[18964,18964],[18964,18964]]],[1591693453731,["Wahaha@DESKTOP-HTU2IVD",[[1,18964,"\n    2. "]],[18964,18964],[18972,18972]]],[1591693455073,["Wahaha@DESKTOP-HTU2IVD",[[-1,18965,"    2. "],[1,18972,"\n\n"]],[18972,18972],[18966,18966]]],[1591693459724,["Wahaha@DESKTOP-HTU2IVD",[[1,18965,"HTTP头中的Referer字段记录了该 HTTP 请求的来源地址。在通常情况下，访问一个安全受限页面的请求来自于同一个网站，而如果黑客要对其实施 CSRF\n攻击，他一般只能在他自己的网站构造请求。因此，可以通过验证Referer值来防御CSRF 攻击。"]],[18965,18965],[19092,19092]]],[1591693464219,["Wahaha@DESKTOP-HTU2IVD",[[1,19094,"\n"]],[19092,19092],[19093,19093]]],[1591693469518,["Wahaha@DESKTOP-HTU2IVD",[[1,19093,"        2. "]],[19093,19093],[19104,19104]]],[1591693475143,["Wahaha@DESKTOP-HTU2IVD",[[-1,19097,"    "]],[19101,19101],[19097,19097]]],[1591693484035,["Wahaha@DESKTOP-HTU2IVD",[[1,19100,"### 使用验证码"]],[19100,19100],[19109,19109]]],[1591693487775,["Wahaha@DESKTOP-HTU2IVD",[[-1,19100,"### "]],[19100,19104],[19100,19100]]],[1591693496489,["Wahaha@DESKTOP-HTU2IVD",[[1,19106,"    3. \n"]],[19105,19105],[19113,19113]]],[1591693501308,["Wahaha@DESKTOP-HTU2IVD",[[-1,19110,"3. "]],[19113,19113],[19110,19110]]],[1591693502851,["Wahaha@DESKTOP-HTU2IVD",[[1,19110,"关键操作页面加上验证码，后台收到请求后通过判断验证码可以防御CSRF。但这种方法对用户不太友好。"]],[19110,19110],[19158,19158]]],[1591693509296,["Wahaha@DESKTOP-HTU2IVD",[[1,19159,"    \n"]],[19158,19158],[19163,19163]]],[1591693513065,["Wahaha@DESKTOP-HTU2IVD",[[1,19163,"   "]],[19163,19163],[19166,19166]]],[1591693573290,[null,[[-1,19168,"."]],[19168,19168],[19168,19168]]],[1591693573290,[null,[[1,19168,"."]],[19168,19168],[19168,19168]]],[1591693514384,["Wahaha@DESKTOP-HTU2IVD",[[1,19166,"3、 "]],[19166,19166],[19169,19169]]],[1591693515617,["Wahaha@DESKTOP-HTU2IVD",[[-1,19166,"3、 "]],[19169,19169],[19166,19166]]],[1591693517855,["Wahaha@DESKTOP-HTU2IVD",[[1,19166,"3. "]],[19166,19166],[19169,19169]]],[1591693531115,["Wahaha@DESKTOP-HTU2IVD",[[-1,19163,"   "]],[19164,19166],[19163,19163]]],[1591693547826,["Wahaha@DESKTOP-HTU2IVD",[[1,19166,"在请求地址中加入tokenbin"]],[19166,19166],[19182,19182]]],[1591693549268,["Wahaha@DESKTOP-HTU2IVD",[[-1,19179,"bin"]],[19182,19182],[19179,19179]]],[1591693551347,["Wahaha@DESKTOP-HTU2IVD",[[1,19179,"并验证"]],[19179,19179],[19182,19182]]],[1591693552417,["Wahaha@DESKTOP-HTU2IVD",[[1,19183,"    4. \n"]],[19182,19182],[19190,19190]]],[1591693556224,["Wahaha@DESKTOP-HTU2IVD",[[-1,19184,"   4. "]],[19190,19190],[19184,19184]]],[1591693556849,["Wahaha@DESKTOP-HTU2IVD",[[-1,19183," "],[1,19184,"\n"]],[19184,19184],[19184,19184]]],[1591693560358,["Wahaha@DESKTOP-HTU2IVD",[[1,19184,"72. "]],[19184,19184],[19188,19188]]],[1591693570740,["Wahaha@DESKTOP-HTU2IVD",[[-1,19184,"72. "]],[19184,19188],[19184,19184]]],[1591693572724,["Wahaha@DESKTOP-HTU2IVD",[[1,19183,"    4. \n"]],[19182,19182],[19190,19190]]],[1591693633289,[null,[[-1,19194,"."]],[19194,19194],[19194,19194]]],[1591693633289,[null,[[1,19194,"."]],[19194,19194],[19194,19194]]],[1591693582021,["Wahaha@DESKTOP-HTU2IVD",[[1,19191,"    4. \n"]],[19182,19182],[19190,19190]]],[1591693584092,["Wahaha@DESKTOP-HTU2IVD",[[-1,19187,"4. "]],[19190,19190],[19187,19187]]],[1591693584596,["Wahaha@DESKTOP-HTU2IVD",[[1,19187,"> CSRF 攻击之所以能够成功，是因为黑客可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于cookie中，因此黑客可以在不知道这些验证信息的情况下直接利用用户自己的cookie 来通过安全验证。要抵御 CSRF，关键在于在请求中放入黑客所不能伪造的信息，并且该信息不存在于 cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，如果请求中没有token或者 token 内容不正确，则认为可能是 CSRF 攻击而拒绝该请求。这种方法要比检查 Referer 要安全一些，token 可以在用户登陆后产生并放于session之中，然后在每次请求时把token 从 session 中拿出，与请求中的 token 进行比对，但这种方法的难点在于如何把 token 以参数的形式加入请求。\n> 对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 http://url?csrftoken=tokenvalue。\n> 而对于 POST 请求来说，要在 form 的最后加上 <input type=\"hidden\" name=\"csrftoken\" value=\"tokenvalue\"/>，这样就把token以参数的形式加入请求了。"]],[19187,19187],[19760,19760]]],[1591693587748,["Wahaha@DESKTOP-HTU2IVD",[[-1,19187,">"]],[19188,19188],[19187,19187]]],[1591693592344,["Wahaha@DESKTOP-HTU2IVD",[[-1,19577,">"]],[19577,19578],[19577,19577]]],[1591693594757,["Wahaha@DESKTOP-HTU2IVD",[[-1,19648,">"]],[19648,19649],[19648,19648]]],[1591693603325,["Wahaha@DESKTOP-HTU2IVD",[[1,19188,"    "]],[19187,19187],[19191,19191]]],[1591693604613,["Wahaha@DESKTOP-HTU2IVD",[[1,19191,"+"]],[19191,19191],[19192,19192]]],[1591693615543,["Wahaha@DESKTOP-HTU2IVD",[[1,19583,"              "]],[19582,19582],[19596,19596]]],[1591693617200,["Wahaha@DESKTOP-HTU2IVD",[[1,19596,"＋　"]],[19596,19596],[19598,19598]]],[1591693623535,["Wahaha@DESKTOP-HTU2IVD",[[-1,19597,"　"]],[19598,19598],[19597,19597]]],[1591693693290,[null,[[-1,19789,"."]],[19789,19789],[19789,19789]]],[1591693693290,[null,[[1,19789,"."]],[19789,19789],[19789,19789]]],[1591693634185,["Wahaha@DESKTOP-HTU2IVD",[[-1,19596,"＋"]],[19597,19597],[19596,19596]]],[1591693636107,["Wahaha@DESKTOP-HTU2IVD",[[1,19596,"＋　"]],[19596,19596],[19598,19598]]],[1591693639465,["Wahaha@DESKTOP-HTU2IVD",[[1,19590,"+ \n        "]],[19581,19581],[19592,19592]]],[1591693640694,["Wahaha@DESKTOP-HTU2IVD",[[-1,19582,"        + "]],[19592,19592],[19583,19583]]],[1591693647071,["Wahaha@DESKTOP-HTU2IVD",[[1,19582,"        + 于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 http://url?csrftoken=tokenvalue。"]],[19583,19583],[19660,19660]]],[1591693648237,["Wahaha@DESKTOP-HTU2IVD",[[1,19669,"+ \n        "]],[19660,19660],[19671,19671]]],[1591693654740,["Wahaha@DESKTOP-HTU2IVD",[[1,19671,"对于 POST 请求来说，要在 form 的最后加上 <input type=\"hidden\" name=\"csrftoken\" value=\"tokenvalue\"/>，这样就把token以参数的形式加入请求了"]],[19671,19671],[19777,19777]]],[1591693660175,["Wahaha@DESKTOP-HTU2IVD",[[-1,19780,"            ＋　对于 GET 请求，token 将附在请求地址之后，这样 URL 就变成 http://url?csrftoken=tokenvalue。\n 而对于 POST 请求来说，要在 form 的最后加上 <input type=\"hidden\" name=\"csrftoken\" value=\"tokenvalue\"/>，这样就把token以参数的形式加入请求了。"]],[19782,19973],[19780,19780]]],[1591693662816,["Wahaha@DESKTOP-HTU2IVD",[[1,19780,"＝"]],[19780,19780],[19781,19781]]],[1591693663919,["Wahaha@DESKTOP-HTU2IVD",[[-1,19778,"  ＝"]],[19781,19781],[19778,19778]]],[1591693664543,["Wahaha@DESKTOP-HTU2IVD",[[-1,19778,"\n"]],[19778,19778],[19777,19777]]],[1591693673358,["Wahaha@DESKTOP-HTU2IVD",[[1,19785,"### 在HTTP 头中自定义属性并验证"]],[19785,19785],[19805,19805]]],[1591693677711,["Wahaha@DESKTOP-HTU2IVD",[[-1,19785,"### "]],[19785,19788],[19784,19784]]],[1591693682857,["Wahaha@DESKTOP-HTU2IVD",[[1,19802,"    5. \n"]],[19801,19801],[19809,19809]]],[1591693683485,["Wahaha@DESKTOP-HTU2IVD",[[-1,19802,"    5. "]],[19809,19809],[19803,19803]]],[1591693688457,["Wahaha@DESKTOP-HTU2IVD",[[1,19803,"> 这种方法也是使用 token 并进行验证，和上一种方法不同的是，这里并不是把 token 以参数的形式置于 HTTP 请求之中，而是把它放到 HTTP 头中自定义的属性里。通过 XMLHttpRequest 这个类，可以一次性给所有该类请求加上 csrftoken 这个 HTTP 头属性，并把 token 值放入其中。这样解决了上种方法在请求中加入 token 的不便，同时，通过 XMLHttpRequest 请求的地址不会被记录到浏览器的地址栏，也不用担心 token 会透过 Referer 泄露到其他网站中去。"]],[19803,19803],[20065,20065]]],[1591693691112,["Wahaha@DESKTOP-HTU2IVD",[[-1,19802,"\n> "]],[19802,19805],[19802,19802]]]],null,"Wahaha@DESKTOP-HTU2IVD"]]}